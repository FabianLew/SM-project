
SM_projekt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a90  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08006c58  08006c58  00016c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c74  08006c74  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  08006c74  08006c74  00016c74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c7c  08006c7c  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c7c  08006c7c  00016c7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c80  08006c80  00016c80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08006c84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000021c  20000024  08006ca8  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000240  08006ca8  00020240  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001244d  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002705  00000000  00000000  000324a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010e0  00000000  00000000  00034ba8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f88  00000000  00000000  00035c88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002711c  00000000  00000000  00036c10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000dd46  00000000  00000000  0005dd2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f2248  00000000  00000000  0006ba72  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015dcba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000472c  00000000  00000000  0015dd38  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000024 	.word	0x20000024
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08006c40 	.word	0x08006c40

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000028 	.word	0x20000028
 8000204:	08006c40 	.word	0x08006c40

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000346:	f1a4 0401 	sub.w	r4, r4, #1
 800034a:	d1e9      	bne.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__aeabi_d2iz>:
 80009a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009ac:	d215      	bcs.n	80009da <__aeabi_d2iz+0x36>
 80009ae:	d511      	bpl.n	80009d4 <__aeabi_d2iz+0x30>
 80009b0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009b8:	d912      	bls.n	80009e0 <__aeabi_d2iz+0x3c>
 80009ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009c6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009ca:	fa23 f002 	lsr.w	r0, r3, r2
 80009ce:	bf18      	it	ne
 80009d0:	4240      	negne	r0, r0
 80009d2:	4770      	bx	lr
 80009d4:	f04f 0000 	mov.w	r0, #0
 80009d8:	4770      	bx	lr
 80009da:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009de:	d105      	bne.n	80009ec <__aeabi_d2iz+0x48>
 80009e0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009e4:	bf08      	it	eq
 80009e6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009ea:	4770      	bx	lr
 80009ec:	f04f 0000 	mov.w	r0, #0
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop

080009f4 <__aeabi_d2f>:
 80009f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009fc:	bf24      	itt	cs
 80009fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a02:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a06:	d90d      	bls.n	8000a24 <__aeabi_d2f+0x30>
 8000a08:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a0c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a10:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a14:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a18:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a1c:	bf08      	it	eq
 8000a1e:	f020 0001 	biceq.w	r0, r0, #1
 8000a22:	4770      	bx	lr
 8000a24:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a28:	d121      	bne.n	8000a6e <__aeabi_d2f+0x7a>
 8000a2a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a2e:	bfbc      	itt	lt
 8000a30:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a34:	4770      	bxlt	lr
 8000a36:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a3a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a3e:	f1c2 0218 	rsb	r2, r2, #24
 8000a42:	f1c2 0c20 	rsb	ip, r2, #32
 8000a46:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a4a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a4e:	bf18      	it	ne
 8000a50:	f040 0001 	orrne.w	r0, r0, #1
 8000a54:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a58:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a5c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a60:	ea40 000c 	orr.w	r0, r0, ip
 8000a64:	fa23 f302 	lsr.w	r3, r3, r2
 8000a68:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a6c:	e7cc      	b.n	8000a08 <__aeabi_d2f+0x14>
 8000a6e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a72:	d107      	bne.n	8000a84 <__aeabi_d2f+0x90>
 8000a74:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a78:	bf1e      	ittt	ne
 8000a7a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a7e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a82:	4770      	bxne	lr
 8000a84:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop

08000a94 <__aeabi_uldivmod>:
 8000a94:	b953      	cbnz	r3, 8000aac <__aeabi_uldivmod+0x18>
 8000a96:	b94a      	cbnz	r2, 8000aac <__aeabi_uldivmod+0x18>
 8000a98:	2900      	cmp	r1, #0
 8000a9a:	bf08      	it	eq
 8000a9c:	2800      	cmpeq	r0, #0
 8000a9e:	bf1c      	itt	ne
 8000aa0:	f04f 31ff 	movne.w	r1, #4294967295
 8000aa4:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa8:	f000 b972 	b.w	8000d90 <__aeabi_idiv0>
 8000aac:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ab4:	f000 f806 	bl	8000ac4 <__udivmoddi4>
 8000ab8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000abc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac0:	b004      	add	sp, #16
 8000ac2:	4770      	bx	lr

08000ac4 <__udivmoddi4>:
 8000ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac8:	9e08      	ldr	r6, [sp, #32]
 8000aca:	4604      	mov	r4, r0
 8000acc:	4688      	mov	r8, r1
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d14b      	bne.n	8000b6a <__udivmoddi4+0xa6>
 8000ad2:	428a      	cmp	r2, r1
 8000ad4:	4615      	mov	r5, r2
 8000ad6:	d967      	bls.n	8000ba8 <__udivmoddi4+0xe4>
 8000ad8:	fab2 f282 	clz	r2, r2
 8000adc:	b14a      	cbz	r2, 8000af2 <__udivmoddi4+0x2e>
 8000ade:	f1c2 0720 	rsb	r7, r2, #32
 8000ae2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ae6:	fa20 f707 	lsr.w	r7, r0, r7
 8000aea:	4095      	lsls	r5, r2
 8000aec:	ea47 0803 	orr.w	r8, r7, r3
 8000af0:	4094      	lsls	r4, r2
 8000af2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000af6:	0c23      	lsrs	r3, r4, #16
 8000af8:	fbb8 f7fe 	udiv	r7, r8, lr
 8000afc:	fa1f fc85 	uxth.w	ip, r5
 8000b00:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b04:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b08:	fb07 f10c 	mul.w	r1, r7, ip
 8000b0c:	4299      	cmp	r1, r3
 8000b0e:	d909      	bls.n	8000b24 <__udivmoddi4+0x60>
 8000b10:	18eb      	adds	r3, r5, r3
 8000b12:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b16:	f080 811b 	bcs.w	8000d50 <__udivmoddi4+0x28c>
 8000b1a:	4299      	cmp	r1, r3
 8000b1c:	f240 8118 	bls.w	8000d50 <__udivmoddi4+0x28c>
 8000b20:	3f02      	subs	r7, #2
 8000b22:	442b      	add	r3, r5
 8000b24:	1a5b      	subs	r3, r3, r1
 8000b26:	b2a4      	uxth	r4, r4
 8000b28:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b2c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b34:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b38:	45a4      	cmp	ip, r4
 8000b3a:	d909      	bls.n	8000b50 <__udivmoddi4+0x8c>
 8000b3c:	192c      	adds	r4, r5, r4
 8000b3e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b42:	f080 8107 	bcs.w	8000d54 <__udivmoddi4+0x290>
 8000b46:	45a4      	cmp	ip, r4
 8000b48:	f240 8104 	bls.w	8000d54 <__udivmoddi4+0x290>
 8000b4c:	3802      	subs	r0, #2
 8000b4e:	442c      	add	r4, r5
 8000b50:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b54:	eba4 040c 	sub.w	r4, r4, ip
 8000b58:	2700      	movs	r7, #0
 8000b5a:	b11e      	cbz	r6, 8000b64 <__udivmoddi4+0xa0>
 8000b5c:	40d4      	lsrs	r4, r2
 8000b5e:	2300      	movs	r3, #0
 8000b60:	e9c6 4300 	strd	r4, r3, [r6]
 8000b64:	4639      	mov	r1, r7
 8000b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6a:	428b      	cmp	r3, r1
 8000b6c:	d909      	bls.n	8000b82 <__udivmoddi4+0xbe>
 8000b6e:	2e00      	cmp	r6, #0
 8000b70:	f000 80eb 	beq.w	8000d4a <__udivmoddi4+0x286>
 8000b74:	2700      	movs	r7, #0
 8000b76:	e9c6 0100 	strd	r0, r1, [r6]
 8000b7a:	4638      	mov	r0, r7
 8000b7c:	4639      	mov	r1, r7
 8000b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b82:	fab3 f783 	clz	r7, r3
 8000b86:	2f00      	cmp	r7, #0
 8000b88:	d147      	bne.n	8000c1a <__udivmoddi4+0x156>
 8000b8a:	428b      	cmp	r3, r1
 8000b8c:	d302      	bcc.n	8000b94 <__udivmoddi4+0xd0>
 8000b8e:	4282      	cmp	r2, r0
 8000b90:	f200 80fa 	bhi.w	8000d88 <__udivmoddi4+0x2c4>
 8000b94:	1a84      	subs	r4, r0, r2
 8000b96:	eb61 0303 	sbc.w	r3, r1, r3
 8000b9a:	2001      	movs	r0, #1
 8000b9c:	4698      	mov	r8, r3
 8000b9e:	2e00      	cmp	r6, #0
 8000ba0:	d0e0      	beq.n	8000b64 <__udivmoddi4+0xa0>
 8000ba2:	e9c6 4800 	strd	r4, r8, [r6]
 8000ba6:	e7dd      	b.n	8000b64 <__udivmoddi4+0xa0>
 8000ba8:	b902      	cbnz	r2, 8000bac <__udivmoddi4+0xe8>
 8000baa:	deff      	udf	#255	; 0xff
 8000bac:	fab2 f282 	clz	r2, r2
 8000bb0:	2a00      	cmp	r2, #0
 8000bb2:	f040 808f 	bne.w	8000cd4 <__udivmoddi4+0x210>
 8000bb6:	1b49      	subs	r1, r1, r5
 8000bb8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bbc:	fa1f f885 	uxth.w	r8, r5
 8000bc0:	2701      	movs	r7, #1
 8000bc2:	fbb1 fcfe 	udiv	ip, r1, lr
 8000bc6:	0c23      	lsrs	r3, r4, #16
 8000bc8:	fb0e 111c 	mls	r1, lr, ip, r1
 8000bcc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bd0:	fb08 f10c 	mul.w	r1, r8, ip
 8000bd4:	4299      	cmp	r1, r3
 8000bd6:	d907      	bls.n	8000be8 <__udivmoddi4+0x124>
 8000bd8:	18eb      	adds	r3, r5, r3
 8000bda:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bde:	d202      	bcs.n	8000be6 <__udivmoddi4+0x122>
 8000be0:	4299      	cmp	r1, r3
 8000be2:	f200 80cd 	bhi.w	8000d80 <__udivmoddi4+0x2bc>
 8000be6:	4684      	mov	ip, r0
 8000be8:	1a59      	subs	r1, r3, r1
 8000bea:	b2a3      	uxth	r3, r4
 8000bec:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bf0:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bf4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000bf8:	fb08 f800 	mul.w	r8, r8, r0
 8000bfc:	45a0      	cmp	r8, r4
 8000bfe:	d907      	bls.n	8000c10 <__udivmoddi4+0x14c>
 8000c00:	192c      	adds	r4, r5, r4
 8000c02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c06:	d202      	bcs.n	8000c0e <__udivmoddi4+0x14a>
 8000c08:	45a0      	cmp	r8, r4
 8000c0a:	f200 80b6 	bhi.w	8000d7a <__udivmoddi4+0x2b6>
 8000c0e:	4618      	mov	r0, r3
 8000c10:	eba4 0408 	sub.w	r4, r4, r8
 8000c14:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c18:	e79f      	b.n	8000b5a <__udivmoddi4+0x96>
 8000c1a:	f1c7 0c20 	rsb	ip, r7, #32
 8000c1e:	40bb      	lsls	r3, r7
 8000c20:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c24:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c28:	fa01 f407 	lsl.w	r4, r1, r7
 8000c2c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c30:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c34:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c38:	4325      	orrs	r5, r4
 8000c3a:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c3e:	0c2c      	lsrs	r4, r5, #16
 8000c40:	fb08 3319 	mls	r3, r8, r9, r3
 8000c44:	fa1f fa8e 	uxth.w	sl, lr
 8000c48:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c4c:	fb09 f40a 	mul.w	r4, r9, sl
 8000c50:	429c      	cmp	r4, r3
 8000c52:	fa02 f207 	lsl.w	r2, r2, r7
 8000c56:	fa00 f107 	lsl.w	r1, r0, r7
 8000c5a:	d90b      	bls.n	8000c74 <__udivmoddi4+0x1b0>
 8000c5c:	eb1e 0303 	adds.w	r3, lr, r3
 8000c60:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c64:	f080 8087 	bcs.w	8000d76 <__udivmoddi4+0x2b2>
 8000c68:	429c      	cmp	r4, r3
 8000c6a:	f240 8084 	bls.w	8000d76 <__udivmoddi4+0x2b2>
 8000c6e:	f1a9 0902 	sub.w	r9, r9, #2
 8000c72:	4473      	add	r3, lr
 8000c74:	1b1b      	subs	r3, r3, r4
 8000c76:	b2ad      	uxth	r5, r5
 8000c78:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c7c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c80:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c84:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c88:	45a2      	cmp	sl, r4
 8000c8a:	d908      	bls.n	8000c9e <__udivmoddi4+0x1da>
 8000c8c:	eb1e 0404 	adds.w	r4, lr, r4
 8000c90:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c94:	d26b      	bcs.n	8000d6e <__udivmoddi4+0x2aa>
 8000c96:	45a2      	cmp	sl, r4
 8000c98:	d969      	bls.n	8000d6e <__udivmoddi4+0x2aa>
 8000c9a:	3802      	subs	r0, #2
 8000c9c:	4474      	add	r4, lr
 8000c9e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ca2:	fba0 8902 	umull	r8, r9, r0, r2
 8000ca6:	eba4 040a 	sub.w	r4, r4, sl
 8000caa:	454c      	cmp	r4, r9
 8000cac:	46c2      	mov	sl, r8
 8000cae:	464b      	mov	r3, r9
 8000cb0:	d354      	bcc.n	8000d5c <__udivmoddi4+0x298>
 8000cb2:	d051      	beq.n	8000d58 <__udivmoddi4+0x294>
 8000cb4:	2e00      	cmp	r6, #0
 8000cb6:	d069      	beq.n	8000d8c <__udivmoddi4+0x2c8>
 8000cb8:	ebb1 050a 	subs.w	r5, r1, sl
 8000cbc:	eb64 0403 	sbc.w	r4, r4, r3
 8000cc0:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000cc4:	40fd      	lsrs	r5, r7
 8000cc6:	40fc      	lsrs	r4, r7
 8000cc8:	ea4c 0505 	orr.w	r5, ip, r5
 8000ccc:	e9c6 5400 	strd	r5, r4, [r6]
 8000cd0:	2700      	movs	r7, #0
 8000cd2:	e747      	b.n	8000b64 <__udivmoddi4+0xa0>
 8000cd4:	f1c2 0320 	rsb	r3, r2, #32
 8000cd8:	fa20 f703 	lsr.w	r7, r0, r3
 8000cdc:	4095      	lsls	r5, r2
 8000cde:	fa01 f002 	lsl.w	r0, r1, r2
 8000ce2:	fa21 f303 	lsr.w	r3, r1, r3
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	4338      	orrs	r0, r7
 8000cec:	0c01      	lsrs	r1, r0, #16
 8000cee:	fbb3 f7fe 	udiv	r7, r3, lr
 8000cf2:	fa1f f885 	uxth.w	r8, r5
 8000cf6:	fb0e 3317 	mls	r3, lr, r7, r3
 8000cfa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cfe:	fb07 f308 	mul.w	r3, r7, r8
 8000d02:	428b      	cmp	r3, r1
 8000d04:	fa04 f402 	lsl.w	r4, r4, r2
 8000d08:	d907      	bls.n	8000d1a <__udivmoddi4+0x256>
 8000d0a:	1869      	adds	r1, r5, r1
 8000d0c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d10:	d22f      	bcs.n	8000d72 <__udivmoddi4+0x2ae>
 8000d12:	428b      	cmp	r3, r1
 8000d14:	d92d      	bls.n	8000d72 <__udivmoddi4+0x2ae>
 8000d16:	3f02      	subs	r7, #2
 8000d18:	4429      	add	r1, r5
 8000d1a:	1acb      	subs	r3, r1, r3
 8000d1c:	b281      	uxth	r1, r0
 8000d1e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d22:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d26:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d2a:	fb00 f308 	mul.w	r3, r0, r8
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d907      	bls.n	8000d42 <__udivmoddi4+0x27e>
 8000d32:	1869      	adds	r1, r5, r1
 8000d34:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d38:	d217      	bcs.n	8000d6a <__udivmoddi4+0x2a6>
 8000d3a:	428b      	cmp	r3, r1
 8000d3c:	d915      	bls.n	8000d6a <__udivmoddi4+0x2a6>
 8000d3e:	3802      	subs	r0, #2
 8000d40:	4429      	add	r1, r5
 8000d42:	1ac9      	subs	r1, r1, r3
 8000d44:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d48:	e73b      	b.n	8000bc2 <__udivmoddi4+0xfe>
 8000d4a:	4637      	mov	r7, r6
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	e709      	b.n	8000b64 <__udivmoddi4+0xa0>
 8000d50:	4607      	mov	r7, r0
 8000d52:	e6e7      	b.n	8000b24 <__udivmoddi4+0x60>
 8000d54:	4618      	mov	r0, r3
 8000d56:	e6fb      	b.n	8000b50 <__udivmoddi4+0x8c>
 8000d58:	4541      	cmp	r1, r8
 8000d5a:	d2ab      	bcs.n	8000cb4 <__udivmoddi4+0x1f0>
 8000d5c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d60:	eb69 020e 	sbc.w	r2, r9, lr
 8000d64:	3801      	subs	r0, #1
 8000d66:	4613      	mov	r3, r2
 8000d68:	e7a4      	b.n	8000cb4 <__udivmoddi4+0x1f0>
 8000d6a:	4660      	mov	r0, ip
 8000d6c:	e7e9      	b.n	8000d42 <__udivmoddi4+0x27e>
 8000d6e:	4618      	mov	r0, r3
 8000d70:	e795      	b.n	8000c9e <__udivmoddi4+0x1da>
 8000d72:	4667      	mov	r7, ip
 8000d74:	e7d1      	b.n	8000d1a <__udivmoddi4+0x256>
 8000d76:	4681      	mov	r9, r0
 8000d78:	e77c      	b.n	8000c74 <__udivmoddi4+0x1b0>
 8000d7a:	3802      	subs	r0, #2
 8000d7c:	442c      	add	r4, r5
 8000d7e:	e747      	b.n	8000c10 <__udivmoddi4+0x14c>
 8000d80:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d84:	442b      	add	r3, r5
 8000d86:	e72f      	b.n	8000be8 <__udivmoddi4+0x124>
 8000d88:	4638      	mov	r0, r7
 8000d8a:	e708      	b.n	8000b9e <__udivmoddi4+0xda>
 8000d8c:	4637      	mov	r7, r6
 8000d8e:	e6e9      	b.n	8000b64 <__udivmoddi4+0xa0>

08000d90 <__aeabi_idiv0>:
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop

08000d94 <bmp280_get_regs>:
/*!
 * @brief This API reads the data from the given register address of the
 * sensor.
 */
int8_t bmp280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint8_t len, const struct bmp280_dev *dev)
{
 8000d94:	b590      	push	{r4, r7, lr}
 8000d96:	b087      	sub	sp, #28
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	60b9      	str	r1, [r7, #8]
 8000d9c:	607b      	str	r3, [r7, #4]
 8000d9e:	4603      	mov	r3, r0
 8000da0:	73fb      	strb	r3, [r7, #15]
 8000da2:	4613      	mov	r3, r2
 8000da4:	73bb      	strb	r3, [r7, #14]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8000da6:	6878      	ldr	r0, [r7, #4]
 8000da8:	f000 fb36 	bl	8001418 <null_ptr_check>
 8000dac:	4603      	mov	r3, r0
 8000dae:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMP280_OK) && (reg_data != NULL))
 8000db0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d11c      	bne.n	8000df2 <bmp280_get_regs+0x5e>
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d019      	beq.n	8000df2 <bmp280_get_regs+0x5e>
    {
        /* Mask the register address' MSB if interface selected is SPI */
        if (dev->intf == BMP280_SPI_INTF)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	789b      	ldrb	r3, [r3, #2]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d103      	bne.n	8000dce <bmp280_get_regs+0x3a>
        {
            reg_addr = reg_addr | 0x80;
 8000dc6:	7bfb      	ldrb	r3, [r7, #15]
 8000dc8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000dcc:	73fb      	strb	r3, [r7, #15]
        }
        rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	685c      	ldr	r4, [r3, #4]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	7858      	ldrb	r0, [r3, #1]
 8000dd6:	7bbb      	ldrb	r3, [r7, #14]
 8000dd8:	b29b      	uxth	r3, r3
 8000dda:	7bf9      	ldrb	r1, [r7, #15]
 8000ddc:	68ba      	ldr	r2, [r7, #8]
 8000dde:	47a0      	blx	r4
 8000de0:	4603      	mov	r3, r0
 8000de2:	75fb      	strb	r3, [r7, #23]

        /* Check for communication error and mask with an internal error code */
        if (rslt != BMP280_OK)
 8000de4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d004      	beq.n	8000df6 <bmp280_get_regs+0x62>
        {
            rslt = BMP280_E_COMM_FAIL;
 8000dec:	23fc      	movs	r3, #252	; 0xfc
 8000dee:	75fb      	strb	r3, [r7, #23]
        if (rslt != BMP280_OK)
 8000df0:	e001      	b.n	8000df6 <bmp280_get_regs+0x62>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 8000df2:	23ff      	movs	r3, #255	; 0xff
 8000df4:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8000df6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	371c      	adds	r7, #28
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd90      	pop	{r4, r7, pc}

08000e02 <bmp280_set_regs>:
/*!
 * @brief This API writes the given data to the register addresses
 * of the sensor.
 */
int8_t bmp280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bmp280_dev *dev)
{
 8000e02:	b590      	push	{r4, r7, lr}
 8000e04:	b089      	sub	sp, #36	; 0x24
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	60f8      	str	r0, [r7, #12]
 8000e0a:	60b9      	str	r1, [r7, #8]
 8000e0c:	603b      	str	r3, [r7, #0]
 8000e0e:	4613      	mov	r3, r2
 8000e10:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t temp_buff[8]; /* Typically not to write more than 4 registers */
    uint16_t temp_len;
    uint8_t reg_addr_cnt;

    if (len > 4)
 8000e12:	79fb      	ldrb	r3, [r7, #7]
 8000e14:	2b04      	cmp	r3, #4
 8000e16:	d901      	bls.n	8000e1c <bmp280_set_regs+0x1a>
    {
        len = 4;
 8000e18:	2304      	movs	r3, #4
 8000e1a:	71fb      	strb	r3, [r7, #7]
    }
    rslt = null_ptr_check(dev);
 8000e1c:	6838      	ldr	r0, [r7, #0]
 8000e1e:	f000 fafb 	bl	8001418 <null_ptr_check>
 8000e22:	4603      	mov	r3, r0
 8000e24:	77fb      	strb	r3, [r7, #31]
    if ((rslt == BMP280_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8000e26:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d14d      	bne.n	8000eca <bmp280_set_regs+0xc8>
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d04a      	beq.n	8000eca <bmp280_set_regs+0xc8>
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d047      	beq.n	8000eca <bmp280_set_regs+0xc8>
    {
        if (len != 0)
 8000e3a:	79fb      	ldrb	r3, [r7, #7]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d041      	beq.n	8000ec4 <bmp280_set_regs+0xc2>
        {
            temp_buff[0] = reg_data[0];
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	743b      	strb	r3, [r7, #16]

            /* Mask the register address' MSB if interface selected is SPI */
            if (dev->intf == BMP280_SPI_INTF)
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	789b      	ldrb	r3, [r3, #2]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d114      	bne.n	8000e78 <bmp280_set_regs+0x76>
            {
                /* Converting all the reg address into proper SPI write address
                 * i.e making MSB(R/`W) bit 0
                 */
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8000e4e:	2300      	movs	r3, #0
 8000e50:	76fb      	strb	r3, [r7, #27]
 8000e52:	e00d      	b.n	8000e70 <bmp280_set_regs+0x6e>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8000e54:	7efb      	ldrb	r3, [r7, #27]
 8000e56:	68fa      	ldr	r2, [r7, #12]
 8000e58:	4413      	add	r3, r2
 8000e5a:	781a      	ldrb	r2, [r3, #0]
 8000e5c:	7efb      	ldrb	r3, [r7, #27]
 8000e5e:	68f9      	ldr	r1, [r7, #12]
 8000e60:	440b      	add	r3, r1
 8000e62:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000e66:	b2d2      	uxtb	r2, r2
 8000e68:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8000e6a:	7efb      	ldrb	r3, [r7, #27]
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	76fb      	strb	r3, [r7, #27]
 8000e70:	7efa      	ldrb	r2, [r7, #27]
 8000e72:	79fb      	ldrb	r3, [r7, #7]
 8000e74:	429a      	cmp	r2, r3
 8000e76:	d3ed      	bcc.n	8000e54 <bmp280_set_regs+0x52>
                }
            }

            /* Burst write mode */
            if (len > 1)
 8000e78:	79fb      	ldrb	r3, [r7, #7]
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	d90d      	bls.n	8000e9a <bmp280_set_regs+0x98>
            {
                /* Interleave register address w.r.t data for burst write*/
                interleave_data(reg_addr, temp_buff, reg_data, len);
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
 8000e80:	f107 0110 	add.w	r1, r7, #16
 8000e84:	68ba      	ldr	r2, [r7, #8]
 8000e86:	68f8      	ldr	r0, [r7, #12]
 8000e88:	f000 fae6 	bl	8001458 <interleave_data>
                temp_len = ((len * 2) - 1);
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
 8000e8e:	b29b      	uxth	r3, r3
 8000e90:	005b      	lsls	r3, r3, #1
 8000e92:	b29b      	uxth	r3, r3
 8000e94:	3b01      	subs	r3, #1
 8000e96:	83bb      	strh	r3, [r7, #28]
 8000e98:	e001      	b.n	8000e9e <bmp280_set_regs+0x9c>
            }
            else
            {
                temp_len = len;
 8000e9a:	79fb      	ldrb	r3, [r7, #7]
 8000e9c:	83bb      	strh	r3, [r7, #28]
            }
            rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	689c      	ldr	r4, [r3, #8]
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	7858      	ldrb	r0, [r3, #1]
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	7819      	ldrb	r1, [r3, #0]
 8000eaa:	8bbb      	ldrh	r3, [r7, #28]
 8000eac:	f107 0210 	add.w	r2, r7, #16
 8000eb0:	47a0      	blx	r4
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	77fb      	strb	r3, [r7, #31]

            /* Check for communication error and mask with an internal error code */
            if (rslt != BMP280_OK)
 8000eb6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d008      	beq.n	8000ed0 <bmp280_set_regs+0xce>
            {
                rslt = BMP280_E_COMM_FAIL;
 8000ebe:	23fc      	movs	r3, #252	; 0xfc
 8000ec0:	77fb      	strb	r3, [r7, #31]
        if (len != 0)
 8000ec2:	e005      	b.n	8000ed0 <bmp280_set_regs+0xce>
            }
        }
        else
        {
            rslt = BMP280_E_INVALID_LEN;
 8000ec4:	23fd      	movs	r3, #253	; 0xfd
 8000ec6:	77fb      	strb	r3, [r7, #31]
        if (len != 0)
 8000ec8:	e002      	b.n	8000ed0 <bmp280_set_regs+0xce>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 8000eca:	23ff      	movs	r3, #255	; 0xff
 8000ecc:	77fb      	strb	r3, [r7, #31]
 8000ece:	e000      	b.n	8000ed2 <bmp280_set_regs+0xd0>
        if (len != 0)
 8000ed0:	bf00      	nop
    }

    return rslt;
 8000ed2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3724      	adds	r7, #36	; 0x24
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd90      	pop	{r4, r7, pc}

08000ede <bmp280_soft_reset>:

/*!
 * @brief This API triggers the soft reset of the sensor.
 */
int8_t bmp280_soft_reset(const struct bmp280_dev *dev)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b084      	sub	sp, #16
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP280_SOFT_RESET_ADDR;
 8000ee6:	23e0      	movs	r3, #224	; 0xe0
 8000ee8:	73bb      	strb	r3, [r7, #14]
    uint8_t soft_rst_cmd = BMP280_SOFT_RESET_CMD;
 8000eea:	23b6      	movs	r3, #182	; 0xb6
 8000eec:	737b      	strb	r3, [r7, #13]

    rslt = null_ptr_check(dev);
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f000 fa92 	bl	8001418 <null_ptr_check>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMP280_OK)
 8000ef8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d10d      	bne.n	8000f1c <bmp280_soft_reset+0x3e>
    {
        rslt = bmp280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8000f00:	f107 010d 	add.w	r1, r7, #13
 8000f04:	f107 000e 	add.w	r0, r7, #14
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	f7ff ff79 	bl	8000e02 <bmp280_set_regs>
 8000f10:	4603      	mov	r3, r0
 8000f12:	73fb      	strb	r3, [r7, #15]

        /* As per the datasheet, startup time is 2 ms. */
        dev->delay_ms(2);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	2002      	movs	r0, #2
 8000f1a:	4798      	blx	r3
    }

    return rslt;
 8000f1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3710      	adds	r7, #16
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <bmp280_init>:
/*!
 * @brief This API is the entry point.
 * It reads the chip-id and calibration data from the sensor.
 */
int8_t bmp280_init(struct bmp280_dev *dev)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* Maximum number of tries before timeout */
    uint8_t try_count = 5;
 8000f30:	2305      	movs	r3, #5
 8000f32:	73bb      	strb	r3, [r7, #14]

    rslt = null_ptr_check(dev);
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f000 fa6f 	bl	8001418 <null_ptr_check>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMP280_OK)
 8000f3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d150      	bne.n	8000fe8 <bmp280_init+0xc0>
    {
        while (try_count)
 8000f46:	e02d      	b.n	8000fa4 <bmp280_init+0x7c>
        {
            rslt = bmp280_get_regs(BMP280_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
 8000f48:	6879      	ldr	r1, [r7, #4]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	20d0      	movs	r0, #208	; 0xd0
 8000f50:	f7ff ff20 	bl	8000d94 <bmp280_get_regs>
 8000f54:	4603      	mov	r3, r0
 8000f56:	73fb      	strb	r3, [r7, #15]

            /* Check for chip id validity */
            if ((rslt == BMP280_OK) &&
 8000f58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d11a      	bne.n	8000f96 <bmp280_init+0x6e>
                (dev->chip_id == BMP280_CHIP_ID1 || dev->chip_id == BMP280_CHIP_ID2 || dev->chip_id == BMP280_CHIP_ID3))
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	781b      	ldrb	r3, [r3, #0]
            if ((rslt == BMP280_OK) &&
 8000f64:	2b56      	cmp	r3, #86	; 0x56
 8000f66:	d007      	beq.n	8000f78 <bmp280_init+0x50>
                (dev->chip_id == BMP280_CHIP_ID1 || dev->chip_id == BMP280_CHIP_ID2 || dev->chip_id == BMP280_CHIP_ID3))
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	2b57      	cmp	r3, #87	; 0x57
 8000f6e:	d003      	beq.n	8000f78 <bmp280_init+0x50>
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	2b58      	cmp	r3, #88	; 0x58
 8000f76:	d10e      	bne.n	8000f96 <bmp280_init+0x6e>
            {
                rslt = bmp280_soft_reset(dev);
 8000f78:	6878      	ldr	r0, [r7, #4]
 8000f7a:	f7ff ffb0 	bl	8000ede <bmp280_soft_reset>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMP280_OK)
 8000f82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d110      	bne.n	8000fac <bmp280_init+0x84>
                {
                    rslt = get_calib_param(dev);
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f000 fa8f 	bl	80014ae <get_calib_param>
 8000f90:	4603      	mov	r3, r0
 8000f92:	73fb      	strb	r3, [r7, #15]
                }
                break;
 8000f94:	e00a      	b.n	8000fac <bmp280_init+0x84>
            }

            /* Wait for 10 ms */
            dev->delay_ms(10);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	68db      	ldr	r3, [r3, #12]
 8000f9a:	200a      	movs	r0, #10
 8000f9c:	4798      	blx	r3
            --try_count;
 8000f9e:	7bbb      	ldrb	r3, [r7, #14]
 8000fa0:	3b01      	subs	r3, #1
 8000fa2:	73bb      	strb	r3, [r7, #14]
        while (try_count)
 8000fa4:	7bbb      	ldrb	r3, [r7, #14]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d1ce      	bne.n	8000f48 <bmp280_init+0x20>
 8000faa:	e000      	b.n	8000fae <bmp280_init+0x86>
                break;
 8000fac:	bf00      	nop
        }

        /* Chip id check failed, and timed out */
        if (!try_count)
 8000fae:	7bbb      	ldrb	r3, [r7, #14]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d101      	bne.n	8000fb8 <bmp280_init+0x90>
        {
            rslt = BMP280_E_DEV_NOT_FOUND;
 8000fb4:	23fe      	movs	r3, #254	; 0xfe
 8000fb6:	73fb      	strb	r3, [r7, #15]
        }
        if (rslt == BMP280_OK)
 8000fb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d113      	bne.n	8000fe8 <bmp280_init+0xc0>
        {
            /* Set values to default */
            dev->conf.filter = BMP280_FILTER_OFF;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
            dev->conf.os_pres = BMP280_OS_NONE;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2200      	movs	r2, #0
 8000fcc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
            dev->conf.os_temp = BMP280_OS_NONE;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
            dev->conf.odr = BMP280_ODR_0_5_MS;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
            dev->conf.spi3w_en = BMP280_SPI3_WIRE_DISABLE;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        }
    }

    return rslt;
 8000fe8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3710      	adds	r7, #16
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <bmp280_get_config>:
 * register. It gives the currently set temperature and pressure over-sampling
 * configuration, power mode configuration, sleep duration and
 * IIR filter coefficient.
 */
int8_t bmp280_get_config(struct bmp280_config *conf, struct bmp280_dev *dev)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 8000ffe:	2300      	movs	r3, #0
 8001000:	733b      	strb	r3, [r7, #12]
 8001002:	2300      	movs	r3, #0
 8001004:	737b      	strb	r3, [r7, #13]

    rslt = null_ptr_check(dev);
 8001006:	6838      	ldr	r0, [r7, #0]
 8001008:	f000 fa06 	bl	8001418 <null_ptr_check>
 800100c:	4603      	mov	r3, r0
 800100e:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMP280_OK) && (conf != NULL))
 8001010:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d137      	bne.n	8001088 <bmp280_get_config+0x94>
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d034      	beq.n	8001088 <bmp280_get_config+0x94>
    {
        rslt = bmp280_get_regs(BMP280_CTRL_MEAS_ADDR, temp, 2, dev);
 800101e:	f107 010c 	add.w	r1, r7, #12
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	2202      	movs	r2, #2
 8001026:	20f4      	movs	r0, #244	; 0xf4
 8001028:	f7ff feb4 	bl	8000d94 <bmp280_get_regs>
 800102c:	4603      	mov	r3, r0
 800102e:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 8001030:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d129      	bne.n	800108c <bmp280_get_config+0x98>
        {
            conf->os_temp = BMP280_GET_BITS(BMP280_OS_TEMP, temp[0]);
 8001038:	7b3b      	ldrb	r3, [r7, #12]
 800103a:	095b      	lsrs	r3, r3, #5
 800103c:	b2da      	uxtb	r2, r3
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	701a      	strb	r2, [r3, #0]
            conf->os_pres = BMP280_GET_BITS(BMP280_OS_PRES, temp[0]);
 8001042:	7b3b      	ldrb	r3, [r7, #12]
 8001044:	109b      	asrs	r3, r3, #2
 8001046:	b2db      	uxtb	r3, r3
 8001048:	f003 0307 	and.w	r3, r3, #7
 800104c:	b2da      	uxtb	r2, r3
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	705a      	strb	r2, [r3, #1]
            conf->odr = BMP280_GET_BITS(BMP280_STANDBY_DURN, temp[1]);
 8001052:	7b7b      	ldrb	r3, [r7, #13]
 8001054:	095b      	lsrs	r3, r3, #5
 8001056:	b2da      	uxtb	r2, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	709a      	strb	r2, [r3, #2]
            conf->filter = BMP280_GET_BITS(BMP280_FILTER, temp[1]);
 800105c:	7b7b      	ldrb	r3, [r7, #13]
 800105e:	109b      	asrs	r3, r3, #2
 8001060:	b2db      	uxtb	r3, r3
 8001062:	f003 0307 	and.w	r3, r3, #7
 8001066:	b2da      	uxtb	r2, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	70da      	strb	r2, [r3, #3]
            conf->spi3w_en = BMP280_GET_BITS_POS_0(BMP280_SPI3_ENABLE, temp[1]);
 800106c:	7b7b      	ldrb	r3, [r7, #13]
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	b2da      	uxtb	r2, r3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	711a      	strb	r2, [r3, #4]
            dev->conf = *conf;
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	332c      	adds	r3, #44	; 0x2c
 800107e:	6810      	ldr	r0, [r2, #0]
 8001080:	6018      	str	r0, [r3, #0]
 8001082:	7912      	ldrb	r2, [r2, #4]
 8001084:	711a      	strb	r2, [r3, #4]
        if (rslt == BMP280_OK)
 8001086:	e001      	b.n	800108c <bmp280_get_config+0x98>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 8001088:	23ff      	movs	r3, #255	; 0xff
 800108a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800108c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001090:	4618      	mov	r0, r3
 8001092:	3710      	adds	r7, #16
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}

08001098 <bmp280_set_config>:
 * @brief This API writes the data to the ctrl_meas register and config register.
 * It sets the temperature and pressure over-sampling configuration,
 * power mode configuration, sleep duration and IIR filter coefficient.
 */
int8_t bmp280_set_config(const struct bmp280_config *conf, struct bmp280_dev *dev)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]
    return conf_sensor(BMP280_SLEEP_MODE, conf, dev);
 80010a2:	683a      	ldr	r2, [r7, #0]
 80010a4:	6879      	ldr	r1, [r7, #4]
 80010a6:	2000      	movs	r0, #0
 80010a8:	f000 fa9e 	bl	80015e8 <conf_sensor>
 80010ac:	4603      	mov	r3, r0
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <bmp280_set_power_mode>:

/*!
 * @brief This API writes the power mode.
 */
int8_t bmp280_set_power_mode(uint8_t mode, struct bmp280_dev *dev)
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b084      	sub	sp, #16
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	4603      	mov	r3, r0
 80010be:	6039      	str	r1, [r7, #0]
 80010c0:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 80010c2:	6838      	ldr	r0, [r7, #0]
 80010c4:	f000 f9a8 	bl	8001418 <null_ptr_check>
 80010c8:	4603      	mov	r3, r0
 80010ca:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMP280_OK)
 80010cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d109      	bne.n	80010e8 <bmp280_set_power_mode+0x32>
    {
        rslt = conf_sensor(mode, &dev->conf, dev);
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 80010da:	79fb      	ldrb	r3, [r7, #7]
 80010dc:	683a      	ldr	r2, [r7, #0]
 80010de:	4618      	mov	r0, r3
 80010e0:	f000 fa82 	bl	80015e8 <conf_sensor>
 80010e4:	4603      	mov	r3, r0
 80010e6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80010e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3710      	adds	r7, #16
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <bmp280_get_uncomp_data>:
/*!
 * @brief This API reads the temperature and pressure data registers.
 * It gives the raw temperature and pressure data .
 */
int8_t bmp280_get_uncomp_data(struct bmp280_uncomp_data *uncomp_data, const struct bmp280_dev *dev)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[6] = { 0 };
 80010fe:	f107 0308 	add.w	r3, r7, #8
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	809a      	strh	r2, [r3, #4]

    rslt = null_ptr_check(dev);
 8001108:	6838      	ldr	r0, [r7, #0]
 800110a:	f000 f985 	bl	8001418 <null_ptr_check>
 800110e:	4603      	mov	r3, r0
 8001110:	73fb      	strb	r3, [r7, #15]
    if ((rslt == BMP280_OK) && (uncomp_data != NULL))
 8001112:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d133      	bne.n	8001182 <bmp280_get_uncomp_data+0x8e>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d030      	beq.n	8001182 <bmp280_get_uncomp_data+0x8e>
    {
        rslt = bmp280_get_regs(BMP280_PRES_MSB_ADDR, temp, 6, dev);
 8001120:	f107 0108 	add.w	r1, r7, #8
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	2206      	movs	r2, #6
 8001128:	20f7      	movs	r0, #247	; 0xf7
 800112a:	f7ff fe33 	bl	8000d94 <bmp280_get_regs>
 800112e:	4603      	mov	r3, r0
 8001130:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 8001132:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d120      	bne.n	800117c <bmp280_get_uncomp_data+0x88>
        {
            uncomp_data->uncomp_press =
                (int32_t) ((((uint32_t) (temp[0])) << 12) | (((uint32_t) (temp[1])) << 4) | ((uint32_t) temp[2] >> 4));
 800113a:	7a3b      	ldrb	r3, [r7, #8]
 800113c:	031a      	lsls	r2, r3, #12
 800113e:	7a7b      	ldrb	r3, [r7, #9]
 8001140:	011b      	lsls	r3, r3, #4
 8001142:	4313      	orrs	r3, r2
 8001144:	7aba      	ldrb	r2, [r7, #10]
 8001146:	0912      	lsrs	r2, r2, #4
 8001148:	b2d2      	uxtb	r2, r2
 800114a:	431a      	orrs	r2, r3
            uncomp_data->uncomp_press =
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	605a      	str	r2, [r3, #4]
            uncomp_data->uncomp_temp =
                (int32_t) ((((int32_t) (temp[3])) << 12) | (((int32_t) (temp[4])) << 4) | (((int32_t) (temp[5])) >> 4));
 8001150:	7afb      	ldrb	r3, [r7, #11]
 8001152:	031a      	lsls	r2, r3, #12
 8001154:	7b3b      	ldrb	r3, [r7, #12]
 8001156:	011b      	lsls	r3, r3, #4
 8001158:	4313      	orrs	r3, r2
 800115a:	7b7a      	ldrb	r2, [r7, #13]
 800115c:	0912      	lsrs	r2, r2, #4
 800115e:	b2d2      	uxtb	r2, r2
 8001160:	431a      	orrs	r2, r3
            uncomp_data->uncomp_temp =
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	601a      	str	r2, [r3, #0]
            rslt = st_check_boundaries((int32_t)uncomp_data->uncomp_temp, (int32_t)uncomp_data->uncomp_press);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	4619      	mov	r1, r3
 8001170:	4610      	mov	r0, r2
 8001172:	f000 faf3 	bl	800175c <st_check_boundaries>
 8001176:	4603      	mov	r3, r0
 8001178:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 800117a:	e004      	b.n	8001186 <bmp280_get_uncomp_data+0x92>
        }
        else
        {
            rslt = BMP280_E_UNCOMP_DATA_CALC;
 800117c:	23f3      	movs	r3, #243	; 0xf3
 800117e:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMP280_OK)
 8001180:	e001      	b.n	8001186 <bmp280_get_uncomp_data+0x92>
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 8001182:	23ff      	movs	r3, #255	; 0xff
 8001184:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001186:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800118a:	4618      	mov	r0, r3
 800118c:	3710      	adds	r7, #16
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <bmp280_get_comp_temp_32bit>:
/*!
 * @brief This API is used to get the compensated temperature from
 * uncompensated temperature. This API uses 32 bit integers.
 */
int8_t bmp280_get_comp_temp_32bit(int32_t *comp_temp, int32_t uncomp_temp, struct bmp280_dev *dev)
{
 8001192:	b580      	push	{r7, lr}
 8001194:	b088      	sub	sp, #32
 8001196:	af00      	add	r7, sp, #0
 8001198:	60f8      	str	r0, [r7, #12]
 800119a:	60b9      	str	r1, [r7, #8]
 800119c:	607a      	str	r2, [r7, #4]
    int32_t var1, var2;
    int8_t rslt;

    rslt = null_ptr_check(dev);
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f000 f93a 	bl	8001418 <null_ptr_check>
 80011a4:	4603      	mov	r3, r0
 80011a6:	77fb      	strb	r3, [r7, #31]
    if (rslt == BMP280_OK)
 80011a8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d150      	bne.n	8001252 <bmp280_get_comp_temp_32bit+0xc0>
    {
        var1 =
            ((((uncomp_temp / 8) - ((int32_t) dev->calib_param.dig_t1 << 1))) * ((int32_t) dev->calib_param.dig_t2)) /
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	da00      	bge.n	80011b8 <bmp280_get_comp_temp_32bit+0x26>
 80011b6:	3307      	adds	r3, #7
 80011b8:	10db      	asrs	r3, r3, #3
 80011ba:	461a      	mov	r2, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	8a1b      	ldrh	r3, [r3, #16]
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	1ad3      	subs	r3, r2, r3
 80011c4:	687a      	ldr	r2, [r7, #4]
 80011c6:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 80011ca:	fb02 f303 	mul.w	r3, r2, r3
        var1 =
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	da01      	bge.n	80011d6 <bmp280_get_comp_temp_32bit+0x44>
 80011d2:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80011d6:	12db      	asrs	r3, r3, #11
 80011d8:	61bb      	str	r3, [r7, #24]
            2048;
        var2 =
            (((((uncomp_temp / 16) - ((int32_t) dev->calib_param.dig_t1)) *
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	da00      	bge.n	80011e2 <bmp280_get_comp_temp_32bit+0x50>
 80011e0:	330f      	adds	r3, #15
 80011e2:	111b      	asrs	r3, r3, #4
 80011e4:	461a      	mov	r2, r3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	8a1b      	ldrh	r3, [r3, #16]
 80011ea:	1ad2      	subs	r2, r2, r3
               ((uncomp_temp / 16) - ((int32_t) dev->calib_param.dig_t1))) / 4096) *
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	da00      	bge.n	80011f4 <bmp280_get_comp_temp_32bit+0x62>
 80011f2:	330f      	adds	r3, #15
 80011f4:	111b      	asrs	r3, r3, #4
 80011f6:	4619      	mov	r1, r3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	8a1b      	ldrh	r3, [r3, #16]
 80011fc:	1acb      	subs	r3, r1, r3
            (((((uncomp_temp / 16) - ((int32_t) dev->calib_param.dig_t1)) *
 80011fe:	fb03 f302 	mul.w	r3, r3, r2
               ((uncomp_temp / 16) - ((int32_t) dev->calib_param.dig_t1))) / 4096) *
 8001202:	2b00      	cmp	r3, #0
 8001204:	da01      	bge.n	800120a <bmp280_get_comp_temp_32bit+0x78>
 8001206:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800120a:	131b      	asrs	r3, r3, #12
 800120c:	461a      	mov	r2, r3
             ((int32_t) dev->calib_param.dig_t3)) /
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
               ((uncomp_temp / 16) - ((int32_t) dev->calib_param.dig_t1))) / 4096) *
 8001214:	fb03 f302 	mul.w	r3, r3, r2
        var2 =
 8001218:	2b00      	cmp	r3, #0
 800121a:	da03      	bge.n	8001224 <bmp280_get_comp_temp_32bit+0x92>
 800121c:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8001220:	441a      	add	r2, r3
 8001222:	4613      	mov	r3, r2
 8001224:	139b      	asrs	r3, r3, #14
 8001226:	617b      	str	r3, [r7, #20]
            16384;
        dev->calib_param.t_fine = var1 + var2;
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	441a      	add	r2, r3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	629a      	str	r2, [r3, #40]	; 0x28
        *comp_temp = (dev->calib_param.t_fine * 5 + 128) / 256;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001236:	4613      	mov	r3, r2
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	4413      	add	r3, r2
 800123c:	3380      	adds	r3, #128	; 0x80
 800123e:	2b00      	cmp	r3, #0
 8001240:	da00      	bge.n	8001244 <bmp280_get_comp_temp_32bit+0xb2>
 8001242:	33ff      	adds	r3, #255	; 0xff
 8001244:	121b      	asrs	r3, r3, #8
 8001246:	461a      	mov	r2, r3
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	601a      	str	r2, [r3, #0]
        rslt = BMP280_OK;
 800124c:	2300      	movs	r3, #0
 800124e:	77fb      	strb	r3, [r7, #31]
 8001250:	e004      	b.n	800125c <bmp280_get_comp_temp_32bit+0xca>
    }
    else
    {
        *comp_temp = 0;
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
        rslt = BMP280_E_32BIT_COMP_TEMP;
 8001258:	23f2      	movs	r3, #242	; 0xf2
 800125a:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 800125c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001260:	4618      	mov	r0, r3
 8001262:	3720      	adds	r7, #32
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}

08001268 <bmp280_get_comp_temp_double>:
/*!
 * @brief This API is used to get the compensated temperature from
 * uncompensated temperature. This API uses double floating precision.
 */
int8_t bmp280_get_comp_temp_double(double *temperature, int32_t uncomp_temp, struct bmp280_dev *dev)
{
 8001268:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800126c:	b08a      	sub	sp, #40	; 0x28
 800126e:	af00      	add	r7, sp, #0
 8001270:	60f8      	str	r0, [r7, #12]
 8001272:	60b9      	str	r1, [r7, #8]
 8001274:	607a      	str	r2, [r7, #4]
    double var1, var2;
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f000 f8ce 	bl	8001418 <null_ptr_check>
 800127c:	4603      	mov	r3, r0
 800127e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (rslt == BMP280_OK)
 8001282:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001286:	2b00      	cmp	r3, #0
 8001288:	f040 80ac 	bne.w	80013e4 <bmp280_get_comp_temp_double+0x17c>
    {
        var1 = (((double) uncomp_temp) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 800128c:	68b8      	ldr	r0, [r7, #8]
 800128e:	f7ff f90d 	bl	80004ac <__aeabi_i2d>
 8001292:	f04f 0200 	mov.w	r2, #0
 8001296:	4b5c      	ldr	r3, [pc, #368]	; (8001408 <bmp280_get_comp_temp_double+0x1a0>)
 8001298:	f7ff fa9c 	bl	80007d4 <__aeabi_ddiv>
 800129c:	4603      	mov	r3, r0
 800129e:	460c      	mov	r4, r1
 80012a0:	4625      	mov	r5, r4
 80012a2:	461c      	mov	r4, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	8a1b      	ldrh	r3, [r3, #16]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff f8ef 	bl	800048c <__aeabi_ui2d>
 80012ae:	f04f 0200 	mov.w	r2, #0
 80012b2:	4b56      	ldr	r3, [pc, #344]	; (800140c <bmp280_get_comp_temp_double+0x1a4>)
 80012b4:	f7ff fa8e 	bl	80007d4 <__aeabi_ddiv>
 80012b8:	4602      	mov	r2, r0
 80012ba:	460b      	mov	r3, r1
 80012bc:	4620      	mov	r0, r4
 80012be:	4629      	mov	r1, r5
 80012c0:	f7fe ffa6 	bl	8000210 <__aeabi_dsub>
 80012c4:	4603      	mov	r3, r0
 80012c6:	460c      	mov	r4, r1
 80012c8:	4625      	mov	r5, r4
 80012ca:	461c      	mov	r4, r3
               ((double) dev->calib_param.dig_t2);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff f8ea 	bl	80004ac <__aeabi_i2d>
 80012d8:	4602      	mov	r2, r0
 80012da:	460b      	mov	r3, r1
        var1 = (((double) uncomp_temp) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 80012dc:	4620      	mov	r0, r4
 80012de:	4629      	mov	r1, r5
 80012e0:	f7ff f94e 	bl	8000580 <__aeabi_dmul>
 80012e4:	4603      	mov	r3, r0
 80012e6:	460c      	mov	r4, r1
 80012e8:	e9c7 3406 	strd	r3, r4, [r7, #24]
        var2 =
            ((((double) uncomp_temp) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 80012ec:	68b8      	ldr	r0, [r7, #8]
 80012ee:	f7ff f8dd 	bl	80004ac <__aeabi_i2d>
 80012f2:	f04f 0200 	mov.w	r2, #0
 80012f6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 80012fa:	f7ff fa6b 	bl	80007d4 <__aeabi_ddiv>
 80012fe:	4603      	mov	r3, r0
 8001300:	460c      	mov	r4, r1
 8001302:	4625      	mov	r5, r4
 8001304:	461c      	mov	r4, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	8a1b      	ldrh	r3, [r3, #16]
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff f8be 	bl	800048c <__aeabi_ui2d>
 8001310:	f04f 0200 	mov.w	r2, #0
 8001314:	4b3e      	ldr	r3, [pc, #248]	; (8001410 <bmp280_get_comp_temp_double+0x1a8>)
 8001316:	f7ff fa5d 	bl	80007d4 <__aeabi_ddiv>
 800131a:	4602      	mov	r2, r0
 800131c:	460b      	mov	r3, r1
 800131e:	4620      	mov	r0, r4
 8001320:	4629      	mov	r1, r5
 8001322:	f7fe ff75 	bl	8000210 <__aeabi_dsub>
 8001326:	4603      	mov	r3, r0
 8001328:	460c      	mov	r4, r1
 800132a:	4625      	mov	r5, r4
 800132c:	461c      	mov	r4, r3
             (((double) uncomp_temp) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0)) *
 800132e:	68b8      	ldr	r0, [r7, #8]
 8001330:	f7ff f8bc 	bl	80004ac <__aeabi_i2d>
 8001334:	f04f 0200 	mov.w	r2, #0
 8001338:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 800133c:	f7ff fa4a 	bl	80007d4 <__aeabi_ddiv>
 8001340:	4602      	mov	r2, r0
 8001342:	460b      	mov	r3, r1
 8001344:	4690      	mov	r8, r2
 8001346:	4699      	mov	r9, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	8a1b      	ldrh	r3, [r3, #16]
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff f89d 	bl	800048c <__aeabi_ui2d>
 8001352:	f04f 0200 	mov.w	r2, #0
 8001356:	4b2e      	ldr	r3, [pc, #184]	; (8001410 <bmp280_get_comp_temp_double+0x1a8>)
 8001358:	f7ff fa3c 	bl	80007d4 <__aeabi_ddiv>
 800135c:	4602      	mov	r2, r0
 800135e:	460b      	mov	r3, r1
 8001360:	4640      	mov	r0, r8
 8001362:	4649      	mov	r1, r9
 8001364:	f7fe ff54 	bl	8000210 <__aeabi_dsub>
 8001368:	4602      	mov	r2, r0
 800136a:	460b      	mov	r3, r1
            ((((double) uncomp_temp) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 800136c:	4620      	mov	r0, r4
 800136e:	4629      	mov	r1, r5
 8001370:	f7ff f906 	bl	8000580 <__aeabi_dmul>
 8001374:	4603      	mov	r3, r0
 8001376:	460c      	mov	r4, r1
 8001378:	4625      	mov	r5, r4
 800137a:	461c      	mov	r4, r3
            ((double) dev->calib_param.dig_t3);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff f892 	bl	80004ac <__aeabi_i2d>
 8001388:	4602      	mov	r2, r0
 800138a:	460b      	mov	r3, r1
        var2 =
 800138c:	4620      	mov	r0, r4
 800138e:	4629      	mov	r1, r5
 8001390:	f7ff f8f6 	bl	8000580 <__aeabi_dmul>
 8001394:	4603      	mov	r3, r0
 8001396:	460c      	mov	r4, r1
 8001398:	e9c7 3404 	strd	r3, r4, [r7, #16]
        dev->calib_param.t_fine = (int32_t) (var1 + var2);
 800139c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80013a0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80013a4:	f7fe ff36 	bl	8000214 <__adddf3>
 80013a8:	4603      	mov	r3, r0
 80013aa:	460c      	mov	r4, r1
 80013ac:	4618      	mov	r0, r3
 80013ae:	4621      	mov	r1, r4
 80013b0:	f7ff faf8 	bl	80009a4 <__aeabi_d2iz>
 80013b4:	4602      	mov	r2, r0
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	629a      	str	r2, [r3, #40]	; 0x28
        *temperature = ((var1 + var2) / 5120.0);
 80013ba:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80013be:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80013c2:	f7fe ff27 	bl	8000214 <__adddf3>
 80013c6:	4603      	mov	r3, r0
 80013c8:	460c      	mov	r4, r1
 80013ca:	4618      	mov	r0, r3
 80013cc:	4621      	mov	r1, r4
 80013ce:	f04f 0200 	mov.w	r2, #0
 80013d2:	4b10      	ldr	r3, [pc, #64]	; (8001414 <bmp280_get_comp_temp_double+0x1ac>)
 80013d4:	f7ff f9fe 	bl	80007d4 <__aeabi_ddiv>
 80013d8:	4603      	mov	r3, r0
 80013da:	460c      	mov	r4, r1
 80013dc:	68fa      	ldr	r2, [r7, #12]
 80013de:	e9c2 3400 	strd	r3, r4, [r2]
 80013e2:	e009      	b.n	80013f8 <bmp280_get_comp_temp_double+0x190>
    }
    else
    {
        *temperature = 0;
 80013e4:	68fa      	ldr	r2, [r7, #12]
 80013e6:	f04f 0300 	mov.w	r3, #0
 80013ea:	f04f 0400 	mov.w	r4, #0
 80013ee:	e9c2 3400 	strd	r3, r4, [r2]
        rslt = BMP280_E_DOUBLE_COMP_TEMP;
 80013f2:	23ef      	movs	r3, #239	; 0xef
 80013f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    return rslt;
 80013f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3728      	adds	r7, #40	; 0x28
 8001400:	46bd      	mov	sp, r7
 8001402:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001406:	bf00      	nop
 8001408:	40d00000 	.word	0x40d00000
 800140c:	40900000 	.word	0x40900000
 8001410:	40c00000 	.word	0x40c00000
 8001414:	40b40000 	.word	0x40b40000

08001418 <null_ptr_check>:
/*!
 * @brief This internal API is used to check for null-pointers in the device
 * structure.
 */
static int8_t null_ptr_check(const struct bmp280_dev *dev)
{
 8001418:	b480      	push	{r7}
 800141a:	b085      	sub	sp, #20
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL))
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d00b      	beq.n	800143e <null_ptr_check+0x26>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d007      	beq.n	800143e <null_ptr_check+0x26>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d003      	beq.n	800143e <null_ptr_check+0x26>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	68db      	ldr	r3, [r3, #12]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d102      	bne.n	8001444 <null_ptr_check+0x2c>
    {
        /* Null-pointer found */
        rslt = BMP280_E_NULL_PTR;
 800143e:	23ff      	movs	r3, #255	; 0xff
 8001440:	73fb      	strb	r3, [r7, #15]
 8001442:	e001      	b.n	8001448 <null_ptr_check+0x30>
    }
    else
    {
        rslt = BMP280_OK;
 8001444:	2300      	movs	r3, #0
 8001446:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001448:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800144c:	4618      	mov	r0, r3
 800144e:	3714      	adds	r7, #20
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr

08001458 <interleave_data>:
/*!
 * @brief This internal API interleaves the register addresses and respective
 * register data for a burst write
 */
static void interleave_data(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 8001458:	b480      	push	{r7}
 800145a:	b087      	sub	sp, #28
 800145c:	af00      	add	r7, sp, #0
 800145e:	60f8      	str	r0, [r7, #12]
 8001460:	60b9      	str	r1, [r7, #8]
 8001462:	607a      	str	r2, [r7, #4]
 8001464:	70fb      	strb	r3, [r7, #3]
    uint8_t index;

    for (index = 1; index < len; index++)
 8001466:	2301      	movs	r3, #1
 8001468:	75fb      	strb	r3, [r7, #23]
 800146a:	e016      	b.n	800149a <interleave_data+0x42>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 800146c:	7dfb      	ldrb	r3, [r7, #23]
 800146e:	68fa      	ldr	r2, [r7, #12]
 8001470:	441a      	add	r2, r3
 8001472:	7dfb      	ldrb	r3, [r7, #23]
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	3b01      	subs	r3, #1
 8001478:	68b9      	ldr	r1, [r7, #8]
 800147a:	440b      	add	r3, r1
 800147c:	7812      	ldrb	r2, [r2, #0]
 800147e:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 8001480:	7dfb      	ldrb	r3, [r7, #23]
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	441a      	add	r2, r3
 8001486:	7dfb      	ldrb	r3, [r7, #23]
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	4619      	mov	r1, r3
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	440b      	add	r3, r1
 8001490:	7812      	ldrb	r2, [r2, #0]
 8001492:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 8001494:	7dfb      	ldrb	r3, [r7, #23]
 8001496:	3301      	adds	r3, #1
 8001498:	75fb      	strb	r3, [r7, #23]
 800149a:	7dfa      	ldrb	r2, [r7, #23]
 800149c:	78fb      	ldrb	r3, [r7, #3]
 800149e:	429a      	cmp	r2, r3
 80014a0:	d3e4      	bcc.n	800146c <interleave_data+0x14>
    }
}
 80014a2:	bf00      	nop
 80014a4:	371c      	adds	r7, #28
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr

080014ae <get_calib_param>:
/*!
 * @brief This API is used to read the calibration parameters used
 * for calculating the compensated data.
 */
static int8_t get_calib_param(struct bmp280_dev *dev)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b08a      	sub	sp, #40	; 0x28
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t temp[BMP280_CALIB_DATA_SIZE] = { 0 };
 80014b6:	f107 030c 	add.w	r3, r7, #12
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	605a      	str	r2, [r3, #4]
 80014c0:	609a      	str	r2, [r3, #8]
 80014c2:	60da      	str	r2, [r3, #12]
 80014c4:	611a      	str	r2, [r3, #16]
 80014c6:	615a      	str	r2, [r3, #20]

    rslt = null_ptr_check(dev);
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f7ff ffa5 	bl	8001418 <null_ptr_check>
 80014ce:	4603      	mov	r3, r0
 80014d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (rslt == BMP280_OK)
 80014d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d17f      	bne.n	80015dc <get_calib_param+0x12e>
    {
        rslt = bmp280_get_regs(BMP280_DIG_T1_LSB_ADDR, temp, BMP280_CALIB_DATA_SIZE, dev);
 80014dc:	f107 010c 	add.w	r1, r7, #12
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2218      	movs	r2, #24
 80014e4:	2088      	movs	r0, #136	; 0x88
 80014e6:	f7ff fc55 	bl	8000d94 <bmp280_get_regs>
 80014ea:	4603      	mov	r3, r0
 80014ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (rslt == BMP280_OK)
 80014f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d171      	bne.n	80015dc <get_calib_param+0x12e>
        {
            dev->calib_param.dig_t1 =
                (uint16_t) (((uint16_t) temp[BMP280_DIG_T1_MSB_POS] << 8) | ((uint16_t) temp[BMP280_DIG_T1_LSB_POS]));
 80014f8:	7b7b      	ldrb	r3, [r7, #13]
 80014fa:	021b      	lsls	r3, r3, #8
 80014fc:	b21a      	sxth	r2, r3
 80014fe:	7b3b      	ldrb	r3, [r7, #12]
 8001500:	b21b      	sxth	r3, r3
 8001502:	4313      	orrs	r3, r2
 8001504:	b21b      	sxth	r3, r3
 8001506:	b29a      	uxth	r2, r3
            dev->calib_param.dig_t1 =
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	821a      	strh	r2, [r3, #16]
            dev->calib_param.dig_t2 =
                (int16_t) (((int16_t) temp[BMP280_DIG_T2_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_T2_LSB_POS]));
 800150c:	7bfb      	ldrb	r3, [r7, #15]
 800150e:	021b      	lsls	r3, r3, #8
 8001510:	b21a      	sxth	r2, r3
 8001512:	7bbb      	ldrb	r3, [r7, #14]
 8001514:	b21b      	sxth	r3, r3
 8001516:	4313      	orrs	r3, r2
 8001518:	b21a      	sxth	r2, r3
            dev->calib_param.dig_t2 =
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	825a      	strh	r2, [r3, #18]
            dev->calib_param.dig_t3 =
                (int16_t) (((int16_t) temp[BMP280_DIG_T3_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_T3_LSB_POS]));
 800151e:	7c7b      	ldrb	r3, [r7, #17]
 8001520:	021b      	lsls	r3, r3, #8
 8001522:	b21a      	sxth	r2, r3
 8001524:	7c3b      	ldrb	r3, [r7, #16]
 8001526:	b21b      	sxth	r3, r3
 8001528:	4313      	orrs	r3, r2
 800152a:	b21a      	sxth	r2, r3
            dev->calib_param.dig_t3 =
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	829a      	strh	r2, [r3, #20]
            dev->calib_param.dig_p1 =
                (uint16_t) (((uint16_t) temp[BMP280_DIG_P1_MSB_POS] << 8) | ((uint16_t) temp[BMP280_DIG_P1_LSB_POS]));
 8001530:	7cfb      	ldrb	r3, [r7, #19]
 8001532:	021b      	lsls	r3, r3, #8
 8001534:	b21a      	sxth	r2, r3
 8001536:	7cbb      	ldrb	r3, [r7, #18]
 8001538:	b21b      	sxth	r3, r3
 800153a:	4313      	orrs	r3, r2
 800153c:	b21b      	sxth	r3, r3
 800153e:	b29a      	uxth	r2, r3
            dev->calib_param.dig_p1 =
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	82da      	strh	r2, [r3, #22]
            dev->calib_param.dig_p2 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P2_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P2_LSB_POS]));
 8001544:	7d7b      	ldrb	r3, [r7, #21]
 8001546:	021b      	lsls	r3, r3, #8
 8001548:	b21a      	sxth	r2, r3
 800154a:	7d3b      	ldrb	r3, [r7, #20]
 800154c:	b21b      	sxth	r3, r3
 800154e:	4313      	orrs	r3, r2
 8001550:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p2 =
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	831a      	strh	r2, [r3, #24]
            dev->calib_param.dig_p3 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P3_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P3_LSB_POS]));
 8001556:	7dfb      	ldrb	r3, [r7, #23]
 8001558:	021b      	lsls	r3, r3, #8
 800155a:	b21a      	sxth	r2, r3
 800155c:	7dbb      	ldrb	r3, [r7, #22]
 800155e:	b21b      	sxth	r3, r3
 8001560:	4313      	orrs	r3, r2
 8001562:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p3 =
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	835a      	strh	r2, [r3, #26]
            dev->calib_param.dig_p4 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P4_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P4_LSB_POS]));
 8001568:	7e7b      	ldrb	r3, [r7, #25]
 800156a:	021b      	lsls	r3, r3, #8
 800156c:	b21a      	sxth	r2, r3
 800156e:	7e3b      	ldrb	r3, [r7, #24]
 8001570:	b21b      	sxth	r3, r3
 8001572:	4313      	orrs	r3, r2
 8001574:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p4 =
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	839a      	strh	r2, [r3, #28]
            dev->calib_param.dig_p5 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P5_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P5_LSB_POS]));
 800157a:	7efb      	ldrb	r3, [r7, #27]
 800157c:	021b      	lsls	r3, r3, #8
 800157e:	b21a      	sxth	r2, r3
 8001580:	7ebb      	ldrb	r3, [r7, #26]
 8001582:	b21b      	sxth	r3, r3
 8001584:	4313      	orrs	r3, r2
 8001586:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p5 =
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	83da      	strh	r2, [r3, #30]
            dev->calib_param.dig_p6 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P6_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P6_LSB_POS]));
 800158c:	7f7b      	ldrb	r3, [r7, #29]
 800158e:	021b      	lsls	r3, r3, #8
 8001590:	b21a      	sxth	r2, r3
 8001592:	7f3b      	ldrb	r3, [r7, #28]
 8001594:	b21b      	sxth	r3, r3
 8001596:	4313      	orrs	r3, r2
 8001598:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p6 =
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	841a      	strh	r2, [r3, #32]
            dev->calib_param.dig_p7 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P7_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P7_LSB_POS]));
 800159e:	7ffb      	ldrb	r3, [r7, #31]
 80015a0:	021b      	lsls	r3, r3, #8
 80015a2:	b21a      	sxth	r2, r3
 80015a4:	7fbb      	ldrb	r3, [r7, #30]
 80015a6:	b21b      	sxth	r3, r3
 80015a8:	4313      	orrs	r3, r2
 80015aa:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p7 =
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	845a      	strh	r2, [r3, #34]	; 0x22
            dev->calib_param.dig_p8 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P8_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P8_LSB_POS]));
 80015b0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80015b4:	021b      	lsls	r3, r3, #8
 80015b6:	b21a      	sxth	r2, r3
 80015b8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80015bc:	b21b      	sxth	r3, r3
 80015be:	4313      	orrs	r3, r2
 80015c0:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p8 =
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	849a      	strh	r2, [r3, #36]	; 0x24
            dev->calib_param.dig_p9 =
                (int16_t) (((int16_t) temp[BMP280_DIG_P9_MSB_POS] << 8) | ((int16_t) temp[BMP280_DIG_P9_LSB_POS]));
 80015c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80015ca:	021b      	lsls	r3, r3, #8
 80015cc:	b21a      	sxth	r2, r3
 80015ce:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80015d2:	b21b      	sxth	r3, r3
 80015d4:	4313      	orrs	r3, r2
 80015d6:	b21a      	sxth	r2, r3
            dev->calib_param.dig_p9 =
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	84da      	strh	r2, [r3, #38]	; 0x26
        }
    }

    return rslt;
 80015dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3728      	adds	r7, #40	; 0x28
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <conf_sensor>:

/*!
 * @brief This internal API to reset the sensor, restore/set conf, restore/set mode
 */
static int8_t conf_sensor(uint8_t mode, const struct bmp280_config *conf, struct bmp280_dev *dev)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b086      	sub	sp, #24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	607a      	str	r2, [r7, #4]
 80015f4:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 80015f6:	2300      	movs	r3, #0
 80015f8:	753b      	strb	r3, [r7, #20]
 80015fa:	2300      	movs	r3, #0
 80015fc:	757b      	strb	r3, [r7, #21]
    uint8_t reg_addr[2] = { BMP280_CTRL_MEAS_ADDR, BMP280_CONFIG_ADDR };
 80015fe:	4b56      	ldr	r3, [pc, #344]	; (8001758 <conf_sensor+0x170>)
 8001600:	881b      	ldrh	r3, [r3, #0]
 8001602:	823b      	strh	r3, [r7, #16]

    rslt = null_ptr_check(dev);
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f7ff ff07 	bl	8001418 <null_ptr_check>
 800160a:	4603      	mov	r3, r0
 800160c:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BMP280_OK) && (conf != NULL))
 800160e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001612:	2b00      	cmp	r3, #0
 8001614:	f040 8095 	bne.w	8001742 <conf_sensor+0x15a>
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	2b00      	cmp	r3, #0
 800161c:	f000 8091 	beq.w	8001742 <conf_sensor+0x15a>
    {
        rslt = bmp280_get_regs(BMP280_CTRL_MEAS_ADDR, temp, 2, dev);
 8001620:	f107 0114 	add.w	r1, r7, #20
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2202      	movs	r2, #2
 8001628:	20f4      	movs	r0, #244	; 0xf4
 800162a:	f7ff fbb3 	bl	8000d94 <bmp280_get_regs>
 800162e:	4603      	mov	r3, r0
 8001630:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP280_OK)
 8001632:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001636:	2b00      	cmp	r3, #0
 8001638:	f040 8086 	bne.w	8001748 <conf_sensor+0x160>
        {
            /* Here the intention is to put the device to sleep
             * within the shortest period of time
             */
            rslt = bmp280_soft_reset(dev);
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f7ff fc4e 	bl	8000ede <bmp280_soft_reset>
 8001642:	4603      	mov	r3, r0
 8001644:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMP280_OK)
 8001646:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d17c      	bne.n	8001748 <conf_sensor+0x160>
            {
                temp[0] = BMP280_SET_BITS(temp[0], BMP280_OS_TEMP, conf->os_temp);
 800164e:	7d3b      	ldrb	r3, [r7, #20]
 8001650:	b25b      	sxtb	r3, r3
 8001652:	f003 031f 	and.w	r3, r3, #31
 8001656:	b25a      	sxtb	r2, r3
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	015b      	lsls	r3, r3, #5
 800165e:	b25b      	sxtb	r3, r3
 8001660:	4313      	orrs	r3, r2
 8001662:	b25b      	sxtb	r3, r3
 8001664:	b2db      	uxtb	r3, r3
 8001666:	753b      	strb	r3, [r7, #20]
                temp[0] = BMP280_SET_BITS(temp[0], BMP280_OS_PRES, conf->os_pres);
 8001668:	7d3b      	ldrb	r3, [r7, #20]
 800166a:	b25b      	sxtb	r3, r3
 800166c:	f023 031c 	bic.w	r3, r3, #28
 8001670:	b25a      	sxtb	r2, r3
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	785b      	ldrb	r3, [r3, #1]
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	b25b      	sxtb	r3, r3
 800167a:	f003 031c 	and.w	r3, r3, #28
 800167e:	b25b      	sxtb	r3, r3
 8001680:	4313      	orrs	r3, r2
 8001682:	b25b      	sxtb	r3, r3
 8001684:	b2db      	uxtb	r3, r3
 8001686:	753b      	strb	r3, [r7, #20]
                temp[1] = BMP280_SET_BITS(temp[1], BMP280_STANDBY_DURN, conf->odr);
 8001688:	7d7b      	ldrb	r3, [r7, #21]
 800168a:	b25b      	sxtb	r3, r3
 800168c:	f003 031f 	and.w	r3, r3, #31
 8001690:	b25a      	sxtb	r2, r3
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	789b      	ldrb	r3, [r3, #2]
 8001696:	015b      	lsls	r3, r3, #5
 8001698:	b25b      	sxtb	r3, r3
 800169a:	4313      	orrs	r3, r2
 800169c:	b25b      	sxtb	r3, r3
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP280_SET_BITS(temp[1], BMP280_FILTER, conf->filter);
 80016a2:	7d7b      	ldrb	r3, [r7, #21]
 80016a4:	b25b      	sxtb	r3, r3
 80016a6:	f023 031c 	bic.w	r3, r3, #28
 80016aa:	b25a      	sxtb	r2, r3
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	78db      	ldrb	r3, [r3, #3]
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	b25b      	sxtb	r3, r3
 80016b4:	f003 031c 	and.w	r3, r3, #28
 80016b8:	b25b      	sxtb	r3, r3
 80016ba:	4313      	orrs	r3, r2
 80016bc:	b25b      	sxtb	r3, r3
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP280_SET_BITS_POS_0(temp[1], BMP280_SPI3_ENABLE, conf->spi3w_en);
 80016c2:	7d7b      	ldrb	r3, [r7, #21]
 80016c4:	b25b      	sxtb	r3, r3
 80016c6:	f023 0301 	bic.w	r3, r3, #1
 80016ca:	b25a      	sxtb	r2, r3
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	791b      	ldrb	r3, [r3, #4]
 80016d0:	b25b      	sxtb	r3, r3
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	b25b      	sxtb	r3, r3
 80016d8:	4313      	orrs	r3, r2
 80016da:	b25b      	sxtb	r3, r3
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	757b      	strb	r3, [r7, #21]
                rslt = bmp280_set_regs(reg_addr, temp, 2, dev);
 80016e0:	f107 0114 	add.w	r1, r7, #20
 80016e4:	f107 0010 	add.w	r0, r7, #16
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2202      	movs	r2, #2
 80016ec:	f7ff fb89 	bl	8000e02 <bmp280_set_regs>
 80016f0:	4603      	mov	r3, r0
 80016f2:	75fb      	strb	r3, [r7, #23]
                if (rslt == BMP280_OK)
 80016f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d125      	bne.n	8001748 <conf_sensor+0x160>
                {
                    dev->conf = *conf;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	68ba      	ldr	r2, [r7, #8]
 8001700:	332c      	adds	r3, #44	; 0x2c
 8001702:	6810      	ldr	r0, [r2, #0]
 8001704:	6018      	str	r0, [r3, #0]
 8001706:	7912      	ldrb	r2, [r2, #4]
 8001708:	711a      	strb	r2, [r3, #4]
                    if (mode != BMP280_SLEEP_MODE)
 800170a:	7bfb      	ldrb	r3, [r7, #15]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d01b      	beq.n	8001748 <conf_sensor+0x160>
                    {
                        /* Write only the power mode register in a separate write */
                        temp[0] = BMP280_SET_BITS_POS_0(temp[0], BMP280_POWER_MODE, mode);
 8001710:	7d3b      	ldrb	r3, [r7, #20]
 8001712:	b25b      	sxtb	r3, r3
 8001714:	f023 0303 	bic.w	r3, r3, #3
 8001718:	b25a      	sxtb	r2, r3
 800171a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800171e:	f003 0303 	and.w	r3, r3, #3
 8001722:	b25b      	sxtb	r3, r3
 8001724:	4313      	orrs	r3, r2
 8001726:	b25b      	sxtb	r3, r3
 8001728:	b2db      	uxtb	r3, r3
 800172a:	753b      	strb	r3, [r7, #20]
                        rslt = bmp280_set_regs(reg_addr, temp, 1, dev);
 800172c:	f107 0114 	add.w	r1, r7, #20
 8001730:	f107 0010 	add.w	r0, r7, #16
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2201      	movs	r2, #1
 8001738:	f7ff fb63 	bl	8000e02 <bmp280_set_regs>
 800173c:	4603      	mov	r3, r0
 800173e:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP280_OK)
 8001740:	e002      	b.n	8001748 <conf_sensor+0x160>
            }
        }
    }
    else
    {
        rslt = BMP280_E_NULL_PTR;
 8001742:	23ff      	movs	r3, #255	; 0xff
 8001744:	75fb      	strb	r3, [r7, #23]
 8001746:	e000      	b.n	800174a <conf_sensor+0x162>
        if (rslt == BMP280_OK)
 8001748:	bf00      	nop
    }

    return rslt;
 800174a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800174e:	4618      	mov	r0, r3
 8001750:	3718      	adds	r7, #24
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	08006c58 	.word	0x08006c58

0800175c <st_check_boundaries>:

/*!
 * @This internal API checks whether the uncompensated temperature and pressure are within the range
 */
static int8_t st_check_boundaries(int32_t utemperature, int32_t upressure)
{
 800175c:	b480      	push	{r7}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8001766:	2300      	movs	r3, #0
 8001768:	73fb      	strb	r3, [r7, #15]

    /* check UT and UP for valid range */
    if ((utemperature <= BMP280_ST_ADC_T_MIN || utemperature >= BMP280_ST_ADC_T_MAX) &&
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2b00      	cmp	r3, #0
 800176e:	dd03      	ble.n	8001778 <st_check_boundaries+0x1c>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	4a15      	ldr	r2, [pc, #84]	; (80017c8 <st_check_boundaries+0x6c>)
 8001774:	4293      	cmp	r3, r2
 8001776:	dd09      	ble.n	800178c <st_check_boundaries+0x30>
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	2b00      	cmp	r3, #0
 800177c:	dd03      	ble.n	8001786 <st_check_boundaries+0x2a>
        (upressure <= BMP280_ST_ADC_P_MIN || upressure >= BMP280_ST_ADC_P_MAX))
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	4a11      	ldr	r2, [pc, #68]	; (80017c8 <st_check_boundaries+0x6c>)
 8001782:	4293      	cmp	r3, r2
 8001784:	dd02      	ble.n	800178c <st_check_boundaries+0x30>
    {
        rslt = BMP280_E_UNCOMP_TEMP_AND_PRESS_RANGE;
 8001786:	23f4      	movs	r3, #244	; 0xf4
 8001788:	73fb      	strb	r3, [r7, #15]
 800178a:	e015      	b.n	80017b8 <st_check_boundaries+0x5c>
    }
    else if (utemperature <= BMP280_ST_ADC_T_MIN || utemperature >= BMP280_ST_ADC_T_MAX)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2b00      	cmp	r3, #0
 8001790:	dd03      	ble.n	800179a <st_check_boundaries+0x3e>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a0c      	ldr	r2, [pc, #48]	; (80017c8 <st_check_boundaries+0x6c>)
 8001796:	4293      	cmp	r3, r2
 8001798:	dd02      	ble.n	80017a0 <st_check_boundaries+0x44>
    {
        rslt = BMP280_E_UNCOMP_TEMP_RANGE;
 800179a:	23f6      	movs	r3, #246	; 0xf6
 800179c:	73fb      	strb	r3, [r7, #15]
 800179e:	e00b      	b.n	80017b8 <st_check_boundaries+0x5c>
    }
    else if (upressure <= BMP280_ST_ADC_P_MIN || upressure >= BMP280_ST_ADC_P_MAX)
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	dd03      	ble.n	80017ae <st_check_boundaries+0x52>
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	4a07      	ldr	r2, [pc, #28]	; (80017c8 <st_check_boundaries+0x6c>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	dd02      	ble.n	80017b4 <st_check_boundaries+0x58>
    {
        rslt = BMP280_E_UNCOMP_PRES_RANGE;
 80017ae:	23f5      	movs	r3, #245	; 0xf5
 80017b0:	73fb      	strb	r3, [r7, #15]
 80017b2:	e001      	b.n	80017b8 <st_check_boundaries+0x5c>
    }
    else
    {
        rslt = BMP280_OK;
 80017b4:	2300      	movs	r3, #0
 80017b6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80017b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3714      	adds	r7, #20
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr
 80017c8:	000fffef 	.word	0x000fffef

080017cc <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b08c      	sub	sp, #48	; 0x30
 80017d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d2:	f107 031c 	add.w	r3, r7, #28
 80017d6:	2200      	movs	r2, #0
 80017d8:	601a      	str	r2, [r3, #0]
 80017da:	605a      	str	r2, [r3, #4]
 80017dc:	609a      	str	r2, [r3, #8]
 80017de:	60da      	str	r2, [r3, #12]
 80017e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80017e2:	4bb4      	ldr	r3, [pc, #720]	; (8001ab4 <MX_GPIO_Init+0x2e8>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	4ab3      	ldr	r2, [pc, #716]	; (8001ab4 <MX_GPIO_Init+0x2e8>)
 80017e8:	f043 0310 	orr.w	r3, r3, #16
 80017ec:	6313      	str	r3, [r2, #48]	; 0x30
 80017ee:	4bb1      	ldr	r3, [pc, #708]	; (8001ab4 <MX_GPIO_Init+0x2e8>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	f003 0310 	and.w	r3, r3, #16
 80017f6:	61bb      	str	r3, [r7, #24]
 80017f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017fa:	4bae      	ldr	r3, [pc, #696]	; (8001ab4 <MX_GPIO_Init+0x2e8>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	4aad      	ldr	r2, [pc, #692]	; (8001ab4 <MX_GPIO_Init+0x2e8>)
 8001800:	f043 0304 	orr.w	r3, r3, #4
 8001804:	6313      	str	r3, [r2, #48]	; 0x30
 8001806:	4bab      	ldr	r3, [pc, #684]	; (8001ab4 <MX_GPIO_Init+0x2e8>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	f003 0304 	and.w	r3, r3, #4
 800180e:	617b      	str	r3, [r7, #20]
 8001810:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001812:	4ba8      	ldr	r3, [pc, #672]	; (8001ab4 <MX_GPIO_Init+0x2e8>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	4aa7      	ldr	r2, [pc, #668]	; (8001ab4 <MX_GPIO_Init+0x2e8>)
 8001818:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800181c:	6313      	str	r3, [r2, #48]	; 0x30
 800181e:	4ba5      	ldr	r3, [pc, #660]	; (8001ab4 <MX_GPIO_Init+0x2e8>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001826:	613b      	str	r3, [r7, #16]
 8001828:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800182a:	4ba2      	ldr	r3, [pc, #648]	; (8001ab4 <MX_GPIO_Init+0x2e8>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	4aa1      	ldr	r2, [pc, #644]	; (8001ab4 <MX_GPIO_Init+0x2e8>)
 8001830:	f043 0301 	orr.w	r3, r3, #1
 8001834:	6313      	str	r3, [r2, #48]	; 0x30
 8001836:	4b9f      	ldr	r3, [pc, #636]	; (8001ab4 <MX_GPIO_Init+0x2e8>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001842:	4b9c      	ldr	r3, [pc, #624]	; (8001ab4 <MX_GPIO_Init+0x2e8>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	4a9b      	ldr	r2, [pc, #620]	; (8001ab4 <MX_GPIO_Init+0x2e8>)
 8001848:	f043 0302 	orr.w	r3, r3, #2
 800184c:	6313      	str	r3, [r2, #48]	; 0x30
 800184e:	4b99      	ldr	r3, [pc, #612]	; (8001ab4 <MX_GPIO_Init+0x2e8>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	f003 0302 	and.w	r3, r3, #2
 8001856:	60bb      	str	r3, [r7, #8]
 8001858:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800185a:	4b96      	ldr	r3, [pc, #600]	; (8001ab4 <MX_GPIO_Init+0x2e8>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	4a95      	ldr	r2, [pc, #596]	; (8001ab4 <MX_GPIO_Init+0x2e8>)
 8001860:	f043 0308 	orr.w	r3, r3, #8
 8001864:	6313      	str	r3, [r2, #48]	; 0x30
 8001866:	4b93      	ldr	r3, [pc, #588]	; (8001ab4 <MX_GPIO_Init+0x2e8>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	f003 0308 	and.w	r3, r3, #8
 800186e:	607b      	str	r3, [r7, #4]
 8001870:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001872:	4b90      	ldr	r3, [pc, #576]	; (8001ab4 <MX_GPIO_Init+0x2e8>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001876:	4a8f      	ldr	r2, [pc, #572]	; (8001ab4 <MX_GPIO_Init+0x2e8>)
 8001878:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800187c:	6313      	str	r3, [r2, #48]	; 0x30
 800187e:	4b8d      	ldr	r3, [pc, #564]	; (8001ab4 <MX_GPIO_Init+0x2e8>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001886:	603b      	str	r3, [r7, #0]
 8001888:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, BMP280_CS2_Pin|BMP280_CS1_Pin, GPIO_PIN_SET);
 800188a:	2201      	movs	r2, #1
 800188c:	2118      	movs	r1, #24
 800188e:	488a      	ldr	r0, [pc, #552]	; (8001ab8 <MX_GPIO_Init+0x2ec>)
 8001890:	f001 fc14 	bl	80030bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_RW_Pin|LCD_RS_Pin|LAMP_TRIAC_Pin, GPIO_PIN_RESET);
 8001894:	2200      	movs	r2, #0
 8001896:	2149      	movs	r1, #73	; 0x49
 8001898:	4888      	ldr	r0, [pc, #544]	; (8001abc <MX_GPIO_Init+0x2f0>)
 800189a:	f001 fc0f 	bl	80030bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_EN_Pin|Output_resistors_Pin, GPIO_PIN_RESET);
 800189e:	2200      	movs	r2, #0
 80018a0:	2128      	movs	r1, #40	; 0x28
 80018a2:	4887      	ldr	r0, [pc, #540]	; (8001ac0 <MX_GPIO_Init+0x2f4>)
 80018a4:	f001 fc0a 	bl	80030bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80018a8:	2200      	movs	r2, #0
 80018aa:	f244 0181 	movw	r1, #16513	; 0x4081
 80018ae:	4885      	ldr	r0, [pc, #532]	; (8001ac4 <MX_GPIO_Init+0x2f8>)
 80018b0:	f001 fc04 	bl	80030bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80018b4:	2200      	movs	r2, #0
 80018b6:	2140      	movs	r1, #64	; 0x40
 80018b8:	4883      	ldr	r0, [pc, #524]	; (8001ac8 <MX_GPIO_Init+0x2fc>)
 80018ba:	f001 fbff 	bl	80030bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin, GPIO_PIN_RESET);
 80018be:	2200      	movs	r2, #0
 80018c0:	21f0      	movs	r1, #240	; 0xf0
 80018c2:	4882      	ldr	r0, [pc, #520]	; (8001acc <MX_GPIO_Init+0x300>)
 80018c4:	f001 fbfa 	bl	80030bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = BMP280_CS2_Pin|BMP280_CS1_Pin;
 80018c8:	2318      	movs	r3, #24
 80018ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018cc:	2301      	movs	r3, #1
 80018ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d0:	2300      	movs	r3, #0
 80018d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d4:	2303      	movs	r3, #3
 80018d6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018d8:	f107 031c 	add.w	r3, r7, #28
 80018dc:	4619      	mov	r1, r3
 80018de:	4876      	ldr	r0, [pc, #472]	; (8001ab8 <MX_GPIO_Init+0x2ec>)
 80018e0:	f001 fa42 	bl	8002d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80018e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018ea:	4b79      	ldr	r3, [pc, #484]	; (8001ad0 <MX_GPIO_Init+0x304>)
 80018ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ee:	2300      	movs	r3, #0
 80018f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80018f2:	f107 031c 	add.w	r3, r7, #28
 80018f6:	4619      	mov	r1, r3
 80018f8:	4870      	ldr	r0, [pc, #448]	; (8001abc <MX_GPIO_Init+0x2f0>)
 80018fa:	f001 fa35 	bl	8002d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LCD_RW_Pin|LCD_RS_Pin;
 80018fe:	2309      	movs	r3, #9
 8001900:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001902:	2301      	movs	r3, #1
 8001904:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001906:	2300      	movs	r3, #0
 8001908:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190a:	2300      	movs	r3, #0
 800190c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800190e:	f107 031c 	add.w	r3, r7, #28
 8001912:	4619      	mov	r1, r3
 8001914:	4869      	ldr	r0, [pc, #420]	; (8001abc <MX_GPIO_Init+0x2f0>)
 8001916:	f001 fa27 	bl	8002d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800191a:	2332      	movs	r3, #50	; 0x32
 800191c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191e:	2302      	movs	r3, #2
 8001920:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001922:	2300      	movs	r3, #0
 8001924:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001926:	2303      	movs	r3, #3
 8001928:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800192a:	230b      	movs	r3, #11
 800192c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800192e:	f107 031c 	add.w	r3, r7, #28
 8001932:	4619      	mov	r1, r3
 8001934:	4861      	ldr	r0, [pc, #388]	; (8001abc <MX_GPIO_Init+0x2f0>)
 8001936:	f001 fa17 	bl	8002d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin;
 800193a:	2306      	movs	r3, #6
 800193c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193e:	2302      	movs	r3, #2
 8001940:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001942:	2300      	movs	r3, #0
 8001944:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001946:	2303      	movs	r3, #3
 8001948:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800194a:	230b      	movs	r3, #11
 800194c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800194e:	f107 031c 	add.w	r3, r7, #28
 8001952:	4619      	mov	r1, r3
 8001954:	485a      	ldr	r0, [pc, #360]	; (8001ac0 <MX_GPIO_Init+0x2f4>)
 8001956:	f001 fa07 	bl	8002d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_EN_Pin;
 800195a:	2308      	movs	r3, #8
 800195c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800195e:	2301      	movs	r3, #1
 8001960:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001962:	2300      	movs	r3, #0
 8001964:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001966:	2300      	movs	r3, #0
 8001968:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_EN_GPIO_Port, &GPIO_InitStruct);
 800196a:	f107 031c 	add.w	r3, r7, #28
 800196e:	4619      	mov	r1, r3
 8001970:	4853      	ldr	r0, [pc, #332]	; (8001ac0 <MX_GPIO_Init+0x2f4>)
 8001972:	f001 f9f9 	bl	8002d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Output_resistors_Pin;
 8001976:	2320      	movs	r3, #32
 8001978:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800197a:	2301      	movs	r3, #1
 800197c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800197e:	2302      	movs	r3, #2
 8001980:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001982:	2300      	movs	r3, #0
 8001984:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Output_resistors_GPIO_Port, &GPIO_InitStruct);
 8001986:	f107 031c 	add.w	r3, r7, #28
 800198a:	4619      	mov	r1, r3
 800198c:	484c      	ldr	r0, [pc, #304]	; (8001ac0 <MX_GPIO_Init+0x2f4>)
 800198e:	f001 f9eb 	bl	8002d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001992:	f244 0381 	movw	r3, #16513	; 0x4081
 8001996:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001998:	2301      	movs	r3, #1
 800199a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199c:	2300      	movs	r3, #0
 800199e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a0:	2300      	movs	r3, #0
 80019a2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019a4:	f107 031c 	add.w	r3, r7, #28
 80019a8:	4619      	mov	r1, r3
 80019aa:	4846      	ldr	r0, [pc, #280]	; (8001ac4 <MX_GPIO_Init+0x2f8>)
 80019ac:	f001 f9dc 	bl	8002d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80019b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b6:	2302      	movs	r3, #2
 80019b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ba:	2300      	movs	r3, #0
 80019bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019be:	2303      	movs	r3, #3
 80019c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80019c2:	230b      	movs	r3, #11
 80019c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80019c6:	f107 031c 	add.w	r3, r7, #28
 80019ca:	4619      	mov	r1, r3
 80019cc:	483d      	ldr	r0, [pc, #244]	; (8001ac4 <MX_GPIO_Init+0x2f8>)
 80019ce:	f001 f9cb 	bl	8002d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LAMP_SYNC_Pin;
 80019d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80019d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019d8:	4b3d      	ldr	r3, [pc, #244]	; (8001ad0 <MX_GPIO_Init+0x304>)
 80019da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019dc:	2300      	movs	r3, #0
 80019de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LAMP_SYNC_GPIO_Port, &GPIO_InitStruct);
 80019e0:	f107 031c 	add.w	r3, r7, #28
 80019e4:	4619      	mov	r1, r3
 80019e6:	4837      	ldr	r0, [pc, #220]	; (8001ac4 <MX_GPIO_Init+0x2f8>)
 80019e8:	f001 f9be 	bl	8002d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_CLK_Pin;
 80019ec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80019f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80019f2:	4b38      	ldr	r3, [pc, #224]	; (8001ad4 <MX_GPIO_Init+0x308>)
 80019f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f6:	2300      	movs	r3, #0
 80019f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ENC_CLK_GPIO_Port, &GPIO_InitStruct);
 80019fa:	f107 031c 	add.w	r3, r7, #28
 80019fe:	4619      	mov	r1, r3
 8001a00:	4832      	ldr	r0, [pc, #200]	; (8001acc <MX_GPIO_Init+0x300>)
 8001a02:	f001 f9b1 	bl	8002d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_DT_Pin;
 8001a06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a10:	2300      	movs	r3, #0
 8001a12:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ENC_DT_GPIO_Port, &GPIO_InitStruct);
 8001a14:	f107 031c 	add.w	r3, r7, #28
 8001a18:	4619      	mov	r1, r3
 8001a1a:	482c      	ldr	r0, [pc, #176]	; (8001acc <MX_GPIO_Init+0x300>)
 8001a1c:	f001 f9a4 	bl	8002d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001a20:	2340      	movs	r3, #64	; 0x40
 8001a22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a24:	2301      	movs	r3, #1
 8001a26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001a30:	f107 031c 	add.w	r3, r7, #28
 8001a34:	4619      	mov	r1, r3
 8001a36:	4824      	ldr	r0, [pc, #144]	; (8001ac8 <MX_GPIO_Init+0x2fc>)
 8001a38:	f001 f996 	bl	8002d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001a3c:	2380      	movs	r3, #128	; 0x80
 8001a3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a40:	2300      	movs	r3, #0
 8001a42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a44:	2300      	movs	r3, #0
 8001a46:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001a48:	f107 031c 	add.w	r3, r7, #28
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	481e      	ldr	r0, [pc, #120]	; (8001ac8 <MX_GPIO_Init+0x2fc>)
 8001a50:	f001 f98a 	bl	8002d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LAMP_TRIAC_Pin;
 8001a54:	2340      	movs	r3, #64	; 0x40
 8001a56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a60:	2302      	movs	r3, #2
 8001a62:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LAMP_TRIAC_GPIO_Port, &GPIO_InitStruct);
 8001a64:	f107 031c 	add.w	r3, r7, #28
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4814      	ldr	r0, [pc, #80]	; (8001abc <MX_GPIO_Init+0x2f0>)
 8001a6c:	f001 f97c 	bl	8002d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001a70:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001a74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a76:	2302      	movs	r3, #2
 8001a78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001a82:	230a      	movs	r3, #10
 8001a84:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a86:	f107 031c 	add.w	r3, r7, #28
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	480c      	ldr	r0, [pc, #48]	; (8001ac0 <MX_GPIO_Init+0x2f4>)
 8001a8e:	f001 f96b 	bl	8002d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001a92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001aa0:	f107 031c 	add.w	r3, r7, #28
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4806      	ldr	r0, [pc, #24]	; (8001ac0 <MX_GPIO_Init+0x2f4>)
 8001aa8:	f001 f95e 	bl	8002d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin;
 8001aac:	23f0      	movs	r3, #240	; 0xf0
 8001aae:	61fb      	str	r3, [r7, #28]
 8001ab0:	e012      	b.n	8001ad8 <MX_GPIO_Init+0x30c>
 8001ab2:	bf00      	nop
 8001ab4:	40023800 	.word	0x40023800
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	40020800 	.word	0x40020800
 8001ac0:	40020000 	.word	0x40020000
 8001ac4:	40020400 	.word	0x40020400
 8001ac8:	40021800 	.word	0x40021800
 8001acc:	40020c00 	.word	0x40020c00
 8001ad0:	10110000 	.word	0x10110000
 8001ad4:	10210000 	.word	0x10210000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001adc:	2300      	movs	r3, #0
 8001ade:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ae4:	f107 031c 	add.w	r3, r7, #28
 8001ae8:	4619      	mov	r1, r3
 8001aea:	4810      	ldr	r0, [pc, #64]	; (8001b2c <MX_GPIO_Init+0x360>)
 8001aec:	f001 f93c 	bl	8002d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001af0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001af4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af6:	2302      	movs	r3, #2
 8001af8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afa:	2300      	movs	r3, #0
 8001afc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001afe:	2303      	movs	r3, #3
 8001b00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b02:	230b      	movs	r3, #11
 8001b04:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b06:	f107 031c 	add.w	r3, r7, #28
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4808      	ldr	r0, [pc, #32]	; (8001b30 <MX_GPIO_Init+0x364>)
 8001b0e:	f001 f92b 	bl	8002d68 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001b12:	2200      	movs	r2, #0
 8001b14:	2100      	movs	r1, #0
 8001b16:	2028      	movs	r0, #40	; 0x28
 8001b18:	f001 f8cd 	bl	8002cb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001b1c:	2028      	movs	r0, #40	; 0x28
 8001b1e:	f001 f8e6 	bl	8002cee <HAL_NVIC_EnableIRQ>

}
 8001b22:	bf00      	nop
 8001b24:	3730      	adds	r7, #48	; 0x30
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	40020c00 	.word	0x40020c00
 8001b30:	40021800 	.word	0x40021800

08001b34 <PID>:
int8_t bmp280_spi_reg_write(uint8_t cs, uint8_t reg_addr, uint8_t *data, uint16_t len);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
float PID (float actual) {
 8001b34:	b480      	push	{r7}
 8001b36:	b087      	sub	sp, #28
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	ed87 0a01 	vstr	s0, [r7, #4]
	static float e = 0.0;
	static float I1 = 0.0;
//	static float mD1 = 0.0;
	static float m = 0.0;

	float I = 0.0;
 8001b3e:	f04f 0300 	mov.w	r3, #0
 8001b42:	617b      	str	r3, [r7, #20]
	float D = 0.0;
 8001b44:	f04f 0300 	mov.w	r3, #0
 8001b48:	613b      	str	r3, [r7, #16]
	float P = 0.0;
 8001b4a:	f04f 0300 	mov.w	r3, #0
 8001b4e:	60fb      	str	r3, [r7, #12]
	e=setpoint-actual;
 8001b50:	4b5b      	ldr	r3, [pc, #364]	; (8001cc0 <PID+0x18c>)
 8001b52:	ed93 7a00 	vldr	s14, [r3]
 8001b56:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b5e:	4b59      	ldr	r3, [pc, #356]	; (8001cc4 <PID+0x190>)
 8001b60:	edc3 7a00 	vstr	s15, [r3]

	//calka
	I = kI*Tp*e+I1;
 8001b64:	4b58      	ldr	r3, [pc, #352]	; (8001cc8 <PID+0x194>)
 8001b66:	edd3 7a00 	vldr	s15, [r3]
 8001b6a:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8001ccc <PID+0x198>
 8001b6e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001b72:	4b54      	ldr	r3, [pc, #336]	; (8001cc4 <PID+0x190>)
 8001b74:	edd3 7a00 	vldr	s15, [r3]
 8001b78:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b7c:	4b54      	ldr	r3, [pc, #336]	; (8001cd0 <PID+0x19c>)
 8001b7e:	edd3 7a00 	vldr	s15, [r3]
 8001b82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b86:	edc7 7a05 	vstr	s15, [r7, #20]

	//rozniczka
	D = kD/Tp*(e-e1);
 8001b8a:	4b52      	ldr	r3, [pc, #328]	; (8001cd4 <PID+0x1a0>)
 8001b8c:	edd3 7a00 	vldr	s15, [r3]
 8001b90:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8001ccc <PID+0x198>
 8001b94:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001b98:	4b4a      	ldr	r3, [pc, #296]	; (8001cc4 <PID+0x190>)
 8001b9a:	edd3 6a00 	vldr	s13, [r3]
 8001b9e:	4b4e      	ldr	r3, [pc, #312]	; (8001cd8 <PID+0x1a4>)
 8001ba0:	edd3 7a00 	vldr	s15, [r3]
 8001ba4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001ba8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bac:	edc7 7a04 	vstr	s15, [r7, #16]

	//proporcjonalny
	P = kP*e;
 8001bb0:	4b4a      	ldr	r3, [pc, #296]	; (8001cdc <PID+0x1a8>)
 8001bb2:	ed93 7a00 	vldr	s14, [r3]
 8001bb6:	4b43      	ldr	r3, [pc, #268]	; (8001cc4 <PID+0x190>)
 8001bb8:	edd3 7a00 	vldr	s15, [r3]
 8001bbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bc0:	edc7 7a03 	vstr	s15, [r7, #12]

	e1=e;
 8001bc4:	4b3f      	ldr	r3, [pc, #252]	; (8001cc4 <PID+0x190>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a43      	ldr	r2, [pc, #268]	; (8001cd8 <PID+0x1a4>)
 8001bca:	6013      	str	r3, [r2, #0]
	I1=I;
 8001bcc:	4a40      	ldr	r2, [pc, #256]	; (8001cd0 <PID+0x19c>)
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	6013      	str	r3, [r2, #0]

	if(I > maxI) {
 8001bd2:	4b43      	ldr	r3, [pc, #268]	; (8001ce0 <PID+0x1ac>)
 8001bd4:	edd3 7a00 	vldr	s15, [r3]
 8001bd8:	ed97 7a05 	vldr	s14, [r7, #20]
 8001bdc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001be4:	dd03      	ble.n	8001bee <PID+0xba>
		I = maxI;
 8001be6:	4b3e      	ldr	r3, [pc, #248]	; (8001ce0 <PID+0x1ac>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	617b      	str	r3, [r7, #20]
 8001bec:	e012      	b.n	8001c14 <PID+0xe0>
	} else if(I < -maxI) {
 8001bee:	4b3c      	ldr	r3, [pc, #240]	; (8001ce0 <PID+0x1ac>)
 8001bf0:	edd3 7a00 	vldr	s15, [r3]
 8001bf4:	eef1 7a67 	vneg.f32	s15, s15
 8001bf8:	ed97 7a05 	vldr	s14, [r7, #20]
 8001bfc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c04:	d506      	bpl.n	8001c14 <PID+0xe0>
		I=-maxI;
 8001c06:	4b36      	ldr	r3, [pc, #216]	; (8001ce0 <PID+0x1ac>)
 8001c08:	edd3 7a00 	vldr	s15, [r3]
 8001c0c:	eef1 7a67 	vneg.f32	s15, s15
 8001c10:	edc7 7a05 	vstr	s15, [r7, #20]
	}

	if(D > maxD) {
 8001c14:	4b33      	ldr	r3, [pc, #204]	; (8001ce4 <PID+0x1b0>)
 8001c16:	edd3 7a00 	vldr	s15, [r3]
 8001c1a:	ed97 7a04 	vldr	s14, [r7, #16]
 8001c1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c26:	dd03      	ble.n	8001c30 <PID+0xfc>
		D = maxD;
 8001c28:	4b2e      	ldr	r3, [pc, #184]	; (8001ce4 <PID+0x1b0>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	613b      	str	r3, [r7, #16]
 8001c2e:	e012      	b.n	8001c56 <PID+0x122>
	} else if (D < -maxD) {
 8001c30:	4b2c      	ldr	r3, [pc, #176]	; (8001ce4 <PID+0x1b0>)
 8001c32:	edd3 7a00 	vldr	s15, [r3]
 8001c36:	eef1 7a67 	vneg.f32	s15, s15
 8001c3a:	ed97 7a04 	vldr	s14, [r7, #16]
 8001c3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c46:	d506      	bpl.n	8001c56 <PID+0x122>
		D = -maxD;
 8001c48:	4b26      	ldr	r3, [pc, #152]	; (8001ce4 <PID+0x1b0>)
 8001c4a:	edd3 7a00 	vldr	s15, [r3]
 8001c4e:	eef1 7a67 	vneg.f32	s15, s15
 8001c52:	edc7 7a04 	vstr	s15, [r7, #16]
	}



	m=P+I+D;
 8001c56:	ed97 7a03 	vldr	s14, [r7, #12]
 8001c5a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c5e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c62:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c6a:	4b1f      	ldr	r3, [pc, #124]	; (8001ce8 <PID+0x1b4>)
 8001c6c:	edc3 7a00 	vstr	s15, [r3]


	if(m > maxm) {
 8001c70:	4b1d      	ldr	r3, [pc, #116]	; (8001ce8 <PID+0x1b4>)
 8001c72:	ed93 7a00 	vldr	s14, [r3]
 8001c76:	4b1d      	ldr	r3, [pc, #116]	; (8001cec <PID+0x1b8>)
 8001c78:	edd3 7a00 	vldr	s15, [r3]
 8001c7c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c84:	dd04      	ble.n	8001c90 <PID+0x15c>
		m=maxm;
 8001c86:	4b19      	ldr	r3, [pc, #100]	; (8001cec <PID+0x1b8>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a17      	ldr	r2, [pc, #92]	; (8001ce8 <PID+0x1b4>)
 8001c8c:	6013      	str	r3, [r2, #0]
 8001c8e:	e00b      	b.n	8001ca8 <PID+0x174>
	} else if (m < 0) {
 8001c90:	4b15      	ldr	r3, [pc, #84]	; (8001ce8 <PID+0x1b4>)
 8001c92:	edd3 7a00 	vldr	s15, [r3]
 8001c96:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c9e:	d503      	bpl.n	8001ca8 <PID+0x174>
		m=0.0;
 8001ca0:	4b11      	ldr	r3, [pc, #68]	; (8001ce8 <PID+0x1b4>)
 8001ca2:	f04f 0200 	mov.w	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]
	}

	return m;
 8001ca8:	4b0f      	ldr	r3, [pc, #60]	; (8001ce8 <PID+0x1b4>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	ee07 3a90 	vmov	s15, r3

}
 8001cb0:	eeb0 0a67 	vmov.f32	s0, s15
 8001cb4:	371c      	adds	r7, #28
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	20000040 	.word	0x20000040
 8001cc4:	20000048 	.word	0x20000048
 8001cc8:	20000004 	.word	0x20000004
 8001ccc:	3a83126f 	.word	0x3a83126f
 8001cd0:	2000004c 	.word	0x2000004c
 8001cd4:	20000008 	.word	0x20000008
 8001cd8:	20000050 	.word	0x20000050
 8001cdc:	20000000 	.word	0x20000000
 8001ce0:	2000000c 	.word	0x2000000c
 8001ce4:	20000010 	.word	0x20000010
 8001ce8:	20000054 	.word	0x20000054
 8001cec:	20000014 	.word	0x20000014

08001cf0 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin==USER_Btn_Pin){
 8001cfa:	88fb      	ldrh	r3, [r7, #6]
 8001cfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d00:	d107      	bne.n	8001d12 <HAL_GPIO_EXTI_Callback+0x22>
	  HAL_GPIO_TogglePin(Output_resistors_GPIO_Port,Output_resistors_Pin);
 8001d02:	2120      	movs	r1, #32
 8001d04:	4805      	ldr	r0, [pc, #20]	; (8001d1c <HAL_GPIO_EXTI_Callback+0x2c>)
 8001d06:	f001 f9f2 	bl	80030ee <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8001d0a:	2101      	movs	r1, #1
 8001d0c:	4804      	ldr	r0, [pc, #16]	; (8001d20 <HAL_GPIO_EXTI_Callback+0x30>)
 8001d0e:	f001 f9ee 	bl	80030ee <HAL_GPIO_TogglePin>
  }
}
 8001d12:	bf00      	nop
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	40020000 	.word	0x40020000
 8001d20:	40020400 	.word	0x40020400

08001d24 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
	float toSet = 0.0;
 8001d2c:	f04f 0300 	mov.w	r3, #0
 8001d30:	60fb      	str	r3, [r7, #12]
	setpoint=((int)TIM1->CNT)*scale;
 8001d32:	4b13      	ldr	r3, [pc, #76]	; (8001d80 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d36:	ee07 3a90 	vmov	s15, r3
 8001d3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d3e:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001d84 <HAL_TIM_PeriodElapsedCallback+0x60>
 8001d42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d46:	4b10      	ldr	r3, [pc, #64]	; (8001d88 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001d48:	edc3 7a00 	vstr	s15, [r3]
	toSet=PID(actualValue);
 8001d4c:	4b0f      	ldr	r3, [pc, #60]	; (8001d8c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001d4e:	edd3 7a00 	vldr	s15, [r3]
 8001d52:	eeb0 0a67 	vmov.f32	s0, s15
 8001d56:	f7ff feed 	bl	8001b34 <PID>
 8001d5a:	ed87 0a03 	vstr	s0, [r7, #12]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, floorf(toSet));
 8001d5e:	ed97 0a03 	vldr	s0, [r7, #12]
 8001d62:	f004 ff2b 	bl	8006bbc <floorf>
 8001d66:	eef0 7a40 	vmov.f32	s15, s0
 8001d6a:	4b09      	ldr	r3, [pc, #36]	; (8001d90 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d72:	ee17 2a90 	vmov	r2, s15
 8001d76:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001d78:	bf00      	nop
 8001d7a:	3710      	adds	r7, #16
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	40010000 	.word	0x40010000
 8001d84:	3c23d70a 	.word	0x3c23d70a
 8001d88:	20000040 	.word	0x20000040
 8001d8c:	20000044 	.word	0x20000044
 8001d90:	200000fc 	.word	0x200000fc

08001d94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d94:	b590      	push	{r4, r7, lr}
 8001d96:	b097      	sub	sp, #92	; 0x5c
 8001d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	struct bmp280_dev bmp280_1 = {
 8001d9a:	f107 0320 	add.w	r3, r7, #32
 8001d9e:	2234      	movs	r2, #52	; 0x34
 8001da0:	2100      	movs	r1, #0
 8001da2:	4618      	mov	r0, r3
 8001da4:	f004 ff02 	bl	8006bac <memset>
 8001da8:	2301      	movs	r3, #1
 8001daa:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8001dae:	4b43      	ldr	r3, [pc, #268]	; (8001ebc <main+0x128>)
 8001db0:	627b      	str	r3, [r7, #36]	; 0x24
 8001db2:	4b43      	ldr	r3, [pc, #268]	; (8001ec0 <main+0x12c>)
 8001db4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001db6:	4b43      	ldr	r3, [pc, #268]	; (8001ec4 <main+0x130>)
 8001db8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001dba:	f000 fe22 	bl	8002a02 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001dbe:	f000 f88d 	bl	8001edc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001dc2:	f7ff fd03 	bl	80017cc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001dc6:	f000 fd77 	bl	80028b8 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8001dca:	f000 fb6b 	bl	80024a4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001dce:	f000 fbb7 	bl	8002540 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001dd2:	f000 fc2d 	bl	8002630 <MX_TIM4_Init>
  MX_SPI4_Init();
 8001dd6:	f000 f9f3 	bl	80021c0 <MX_SPI4_Init>
  MX_TIM1_Init();
 8001dda:	f000 fb09 	bl	80023f0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8001dde:	483a      	ldr	r0, [pc, #232]	; (8001ec8 <main+0x134>)
 8001de0:	f002 fff6 	bl	8004dd0 <HAL_TIM_Base_Start_IT>
  HAL_GPIO_WritePin(Output_resistors_GPIO_Port, Output_resistors_Pin, GPIO_PIN_RESET);
 8001de4:	2200      	movs	r2, #0
 8001de6:	2120      	movs	r1, #32
 8001de8:	4838      	ldr	r0, [pc, #224]	; (8001ecc <main+0x138>)
 8001dea:	f001 f967 	bl	80030bc <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001dee:	210c      	movs	r1, #12
 8001df0:	4835      	ldr	r0, [pc, #212]	; (8001ec8 <main+0x134>)
 8001df2:	f003 f84d 	bl	8004e90 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001df6:	213c      	movs	r1, #60	; 0x3c
 8001df8:	4835      	ldr	r0, [pc, #212]	; (8001ed0 <main+0x13c>)
 8001dfa:	f003 f91f 	bl	800503c <HAL_TIM_Encoder_Start>
  TIM1->CNT=3000;
 8001dfe:	4b35      	ldr	r3, [pc, #212]	; (8001ed4 <main+0x140>)
 8001e00:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001e04:	625a      	str	r2, [r3, #36]	; 0x24
  int8_t rslt;
  struct bmp280_config conf;

  rslt = bmp280_init(&bmp280_1);
 8001e06:	f107 0320 	add.w	r3, r7, #32
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7ff f88c 	bl	8000f28 <bmp280_init>
 8001e10:	4603      	mov	r3, r0
 8001e12:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  /* Always read the current settings before writing, especially when
       * all the configuration is not modified
       */
  rslt = bmp280_get_config(&conf, &bmp280_1);
 8001e16:	f107 0220 	add.w	r2, r7, #32
 8001e1a:	f107 0310 	add.w	r3, r7, #16
 8001e1e:	4611      	mov	r1, r2
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7ff f8e7 	bl	8000ff4 <bmp280_get_config>
 8001e26:	4603      	mov	r3, r0
 8001e28:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  /* configuring the temperature oversampling, filter coefficient and output data rate */
  /* Overwrite the desired settings */
  conf.filter = BMP280_FILTER_OFF;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	74fb      	strb	r3, [r7, #19]

  /* Temperature oversampling set at 1x */
  conf.os_temp = BMP280_OS_1X;
 8001e30:	2301      	movs	r3, #1
 8001e32:	743b      	strb	r3, [r7, #16]


  /* Setting the output data rate as 1HZ(1000ms) */
  conf.odr = BMP280_ODR_1000_MS;
 8001e34:	2305      	movs	r3, #5
 8001e36:	74bb      	strb	r3, [r7, #18]
  rslt = bmp280_set_config(&conf, &bmp280_1);
 8001e38:	f107 0220 	add.w	r2, r7, #32
 8001e3c:	f107 0310 	add.w	r3, r7, #16
 8001e40:	4611      	mov	r1, r2
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7ff f928 	bl	8001098 <bmp280_set_config>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  //print_rslt(" bmp280_set_config status", rslt);

  /* Always set the power mode after setting the configuration */
  rslt = bmp280_set_power_mode(BMP280_NORMAL_MODE, &bmp280_1);
 8001e4e:	f107 0320 	add.w	r3, r7, #32
 8001e52:	4619      	mov	r1, r3
 8001e54:	2003      	movs	r0, #3
 8001e56:	f7ff f92e 	bl	80010b6 <bmp280_set_power_mode>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  {
	  //int state2;
	  //state2 = HAL_GPIO_ReadPin(Output_resistors_GPIO_Port,Output_resistors_Pin);

	  /* Reading the raw data from sensor */
	  rslt = bmp280_get_uncomp_data(&bmp280_1_data, &bmp280_1);
 8001e60:	f107 0220 	add.w	r2, r7, #32
 8001e64:	f107 0318 	add.w	r3, r7, #24
 8001e68:	4611      	mov	r1, r2
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7ff f942 	bl	80010f4 <bmp280_get_uncomp_data>
 8001e70:	4603      	mov	r3, r0
 8001e72:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	  /* Getting the 32 bit compensated temperature */
	  rslt = bmp280_get_comp_temp_32bit(&temp32, bmp280_1_data.uncomp_temp, &bmp280_1);
 8001e76:	69b9      	ldr	r1, [r7, #24]
 8001e78:	f107 0220 	add.w	r2, r7, #32
 8001e7c:	f107 030c 	add.w	r3, r7, #12
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7ff f986 	bl	8001192 <bmp280_get_comp_temp_32bit>
 8001e86:	4603      	mov	r3, r0
 8001e88:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	  /* Getting the compensated temperature as floating point value */
	  rslt = bmp280_get_comp_temp_double(&temp, bmp280_1_data.uncomp_temp, &bmp280_1);
 8001e8c:	69b9      	ldr	r1, [r7, #24]
 8001e8e:	f107 0220 	add.w	r2, r7, #32
 8001e92:	463b      	mov	r3, r7
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7ff f9e7 	bl	8001268 <bmp280_get_comp_temp_double>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	  /* Sleep time between measurements = BMP280_ODR_1000_MS */
	  actualValue = (float)temp;
 8001ea0:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	4621      	mov	r1, r4
 8001ea8:	f7fe fda4 	bl	80009f4 <__aeabi_d2f>
 8001eac:	4602      	mov	r2, r0
 8001eae:	4b0a      	ldr	r3, [pc, #40]	; (8001ed8 <main+0x144>)
 8001eb0:	601a      	str	r2, [r3, #0]
	  bmp280_1.delay_ms(1000);
 8001eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eb4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001eb8:	4798      	blx	r3
	  rslt = bmp280_get_uncomp_data(&bmp280_1_data, &bmp280_1);
 8001eba:	e7d1      	b.n	8001e60 <main+0xcc>
 8001ebc:	080020c1 	.word	0x080020c1
 8001ec0:	08002001 	.word	0x08002001
 8001ec4:	08002abd 	.word	0x08002abd
 8001ec8:	200000fc 	.word	0x200000fc
 8001ecc:	40020000 	.word	0x40020000
 8001ed0:	2000013c 	.word	0x2000013c
 8001ed4:	40010000 	.word	0x40010000
 8001ed8:	20000044 	.word	0x20000044

08001edc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b0b4      	sub	sp, #208	; 0xd0
 8001ee0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ee2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001ee6:	2230      	movs	r2, #48	; 0x30
 8001ee8:	2100      	movs	r1, #0
 8001eea:	4618      	mov	r0, r3
 8001eec:	f004 fe5e 	bl	8006bac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ef0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]
 8001ef8:	605a      	str	r2, [r3, #4]
 8001efa:	609a      	str	r2, [r3, #8]
 8001efc:	60da      	str	r2, [r3, #12]
 8001efe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f00:	f107 0308 	add.w	r3, r7, #8
 8001f04:	2284      	movs	r2, #132	; 0x84
 8001f06:	2100      	movs	r1, #0
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f004 fe4f 	bl	8006bac <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001f0e:	f001 f921 	bl	8003154 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f12:	4b39      	ldr	r3, [pc, #228]	; (8001ff8 <SystemClock_Config+0x11c>)
 8001f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f16:	4a38      	ldr	r2, [pc, #224]	; (8001ff8 <SystemClock_Config+0x11c>)
 8001f18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f1e:	4b36      	ldr	r3, [pc, #216]	; (8001ff8 <SystemClock_Config+0x11c>)
 8001f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f26:	607b      	str	r3, [r7, #4]
 8001f28:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f2a:	4b34      	ldr	r3, [pc, #208]	; (8001ffc <SystemClock_Config+0x120>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a33      	ldr	r2, [pc, #204]	; (8001ffc <SystemClock_Config+0x120>)
 8001f30:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f34:	6013      	str	r3, [r2, #0]
 8001f36:	4b31      	ldr	r3, [pc, #196]	; (8001ffc <SystemClock_Config+0x120>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f3e:	603b      	str	r3, [r7, #0]
 8001f40:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f42:	2301      	movs	r3, #1
 8001f44:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001f48:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001f4c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f50:	2302      	movs	r3, #2
 8001f52:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f56:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f5a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001f5e:	2304      	movs	r3, #4
 8001f60:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001f64:	23d8      	movs	r3, #216	; 0xd8
 8001f66:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001f70:	2303      	movs	r3, #3
 8001f72:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f76:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f001 f94a 	bl	8003214 <HAL_RCC_OscConfig>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001f86:	f000 f913 	bl	80021b0 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001f8a:	f001 f8f3 	bl	8003174 <HAL_PWREx_EnableOverDrive>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8001f94:	f000 f90c 	bl	80021b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f98:	230f      	movs	r3, #15
 8001f9a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f9e:	2302      	movs	r3, #2
 8001fa0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001faa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001fae:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001fb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fb6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001fba:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001fbe:	2107      	movs	r1, #7
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f001 fbcb 	bl	800375c <HAL_RCC_ClockConfig>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8001fcc:	f000 f8f0 	bl	80021b0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001fd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fd4:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fda:	f107 0308 	add.w	r3, r7, #8
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f001 fdb4 	bl	8003b4c <HAL_RCCEx_PeriphCLKConfig>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <SystemClock_Config+0x112>
  {
    Error_Handler();
 8001fea:	f000 f8e1 	bl	80021b0 <Error_Handler>
  }
}
 8001fee:	bf00      	nop
 8001ff0:	37d0      	adds	r7, #208	; 0xd0
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40023800 	.word	0x40023800
 8001ffc:	40007000 	.word	0x40007000

08002000 <bmp280_spi_reg_write>:
/* USER CODE BEGIN 4 */
#define BMP280_SPI_BUFFER_LEN 28
#define BMP280_DATA_INDEX 1
int8_t bmp280_spi_reg_write ( uint8_t cs , uint8_t reg_addr , uint8_t * reg_data , uint16_t
length )
 {
 8002000:	b580      	push	{r7, lr}
 8002002:	b08c      	sub	sp, #48	; 0x30
 8002004:	af00      	add	r7, sp, #0
 8002006:	603a      	str	r2, [r7, #0]
 8002008:	461a      	mov	r2, r3
 800200a:	4603      	mov	r3, r0
 800200c:	71fb      	strb	r3, [r7, #7]
 800200e:	460b      	mov	r3, r1
 8002010:	71bb      	strb	r3, [r7, #6]
 8002012:	4613      	mov	r3, r2
 8002014:	80bb      	strh	r3, [r7, #4]
 /* Implement the SPI write routine according to the target machine . */
 HAL_StatusTypeDef status = HAL_OK ;
 8002016:	2300      	movs	r3, #0
 8002018:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 int32_t iError = BMP280_OK ;
 800201c:	2300      	movs	r3, #0
 800201e:	62fb      	str	r3, [r7, #44]	; 0x2c
 uint8_t txarray [ BMP280_SPI_BUFFER_LEN ];
 uint8_t stringpos ;

 /* Copy register address and data to tx buffer */
 txarray [0] = reg_addr ;
 8002020:	79bb      	ldrb	r3, [r7, #6]
 8002022:	733b      	strb	r3, [r7, #12]
 for ( stringpos = 0; stringpos < length ; stringpos ++)
 8002024:	2300      	movs	r3, #0
 8002026:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800202a:	e011      	b.n	8002050 <bmp280_spi_reg_write+0x50>
 {
 txarray [ stringpos + BMP280_DATA_INDEX ] = reg_data [ stringpos ];
 800202c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002030:	683a      	ldr	r2, [r7, #0]
 8002032:	441a      	add	r2, r3
 8002034:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002038:	3301      	adds	r3, #1
 800203a:	7812      	ldrb	r2, [r2, #0]
 800203c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002040:	440b      	add	r3, r1
 8002042:	f803 2c24 	strb.w	r2, [r3, #-36]
 for ( stringpos = 0; stringpos < length ; stringpos ++)
 8002046:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800204a:	3301      	adds	r3, #1
 800204c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002050:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002054:	b29b      	uxth	r3, r3
 8002056:	88ba      	ldrh	r2, [r7, #4]
 8002058:	429a      	cmp	r2, r3
 800205a:	d8e7      	bhi.n	800202c <bmp280_spi_reg_write+0x2c>
 }
 // memcpy ( txarray + BMP280_DATA_INDEX , reg_data , length );

 /* Software slave selection procedure */
 if( cs == BMP280_CS1 )
 800205c:	79fb      	ldrb	r3, [r7, #7]
 800205e:	2b01      	cmp	r3, #1
 8002060:	d104      	bne.n	800206c <bmp280_spi_reg_write+0x6c>
 HAL_GPIO_WritePin ( BMP280_CS1_GPIO_Port , BMP280_CS1_Pin , GPIO_PIN_RESET ) ;
 8002062:	2200      	movs	r2, #0
 8002064:	2110      	movs	r1, #16
 8002066:	4814      	ldr	r0, [pc, #80]	; (80020b8 <bmp280_spi_reg_write+0xb8>)
 8002068:	f001 f828 	bl	80030bc <HAL_GPIO_WritePin>

 /* Data exchange */
 status = HAL_SPI_Transmit ( BMP280_SPI , ( uint8_t *) (& txarray ) , length +1 , 100) ;
 800206c:	88bb      	ldrh	r3, [r7, #4]
 800206e:	3301      	adds	r3, #1
 8002070:	b29a      	uxth	r2, r3
 8002072:	f107 010c 	add.w	r1, r7, #12
 8002076:	2364      	movs	r3, #100	; 0x64
 8002078:	4810      	ldr	r0, [pc, #64]	; (80020bc <bmp280_spi_reg_write+0xbc>)
 800207a:	f002 f9e7 	bl	800444c <HAL_SPI_Transmit>
 800207e:	4603      	mov	r3, r0
 8002080:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 while ( BMP280_SPI -> State == HAL_SPI_STATE_BUSY ) {};
 8002084:	bf00      	nop
 8002086:	4b0d      	ldr	r3, [pc, #52]	; (80020bc <bmp280_spi_reg_write+0xbc>)
 8002088:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800208c:	b2db      	uxtb	r3, r3
 800208e:	2b02      	cmp	r3, #2
 8002090:	d0f9      	beq.n	8002086 <bmp280_spi_reg_write+0x86>

 /* Disable all slaves */
 HAL_GPIO_WritePin ( BMP280_CS1_GPIO_Port , BMP280_CS1_Pin , GPIO_PIN_SET ) ;
 8002092:	2201      	movs	r2, #1
 8002094:	2110      	movs	r1, #16
 8002096:	4808      	ldr	r0, [pc, #32]	; (80020b8 <bmp280_spi_reg_write+0xb8>)
 8002098:	f001 f810 	bl	80030bc <HAL_GPIO_WritePin>

 if ( status != HAL_OK )
 800209c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d002      	beq.n	80020aa <bmp280_spi_reg_write+0xaa>
 {
 // The BMP280 API calls for 0 return value as a success , and -1 returned as failure
 iError = ( -1) ;
 80020a4:	f04f 33ff 	mov.w	r3, #4294967295
 80020a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 }

 return ( int8_t ) iError ;
 80020aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020ac:	b25b      	sxtb	r3, r3
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3730      	adds	r7, #48	; 0x30
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	40021000 	.word	0x40021000
 80020bc:	20000058 	.word	0x20000058

080020c0 <bmp280_spi_reg_read>:
int8_t bmp280_spi_reg_read ( uint8_t cs , uint8_t reg_addr , uint8_t * reg_data , uint16_t
length )
 {
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b094      	sub	sp, #80	; 0x50
 80020c4:	af02      	add	r7, sp, #8
 80020c6:	603a      	str	r2, [r7, #0]
 80020c8:	461a      	mov	r2, r3
 80020ca:	4603      	mov	r3, r0
 80020cc:	71fb      	strb	r3, [r7, #7]
 80020ce:	460b      	mov	r3, r1
 80020d0:	71bb      	strb	r3, [r7, #6]
 80020d2:	4613      	mov	r3, r2
 80020d4:	80bb      	strh	r3, [r7, #4]
 /* Implement the SPI read routine according to the target machine . */
 HAL_StatusTypeDef status = HAL_OK ;
 80020d6:	2300      	movs	r3, #0
 80020d8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 int32_t iError = BMP280_OK ;
 80020dc:	2300      	movs	r3, #0
 80020de:	647b      	str	r3, [r7, #68]	; 0x44
 uint8_t txarray [ BMP280_SPI_BUFFER_LEN ] = {0 ,};
 80020e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020e4:	2200      	movs	r2, #0
 80020e6:	601a      	str	r2, [r3, #0]
 80020e8:	605a      	str	r2, [r3, #4]
 80020ea:	609a      	str	r2, [r3, #8]
 80020ec:	60da      	str	r2, [r3, #12]
 80020ee:	611a      	str	r2, [r3, #16]
 80020f0:	615a      	str	r2, [r3, #20]
 80020f2:	619a      	str	r2, [r3, #24]
 uint8_t rxarray [ BMP280_SPI_BUFFER_LEN ] = {0 ,};
 80020f4:	f107 0308 	add.w	r3, r7, #8
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]
 80020fc:	605a      	str	r2, [r3, #4]
 80020fe:	609a      	str	r2, [r3, #8]
 8002100:	60da      	str	r2, [r3, #12]
 8002102:	611a      	str	r2, [r3, #16]
 8002104:	615a      	str	r2, [r3, #20]
 8002106:	619a      	str	r2, [r3, #24]
 uint8_t stringpos ;

 txarray [0] = reg_addr ;
 8002108:	79bb      	ldrb	r3, [r7, #6]
 800210a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

 /* Software slave selection procedure */
 if( cs == BMP280_CS1 )
 800210e:	79fb      	ldrb	r3, [r7, #7]
 8002110:	2b01      	cmp	r3, #1
 8002112:	d104      	bne.n	800211e <bmp280_spi_reg_read+0x5e>
 HAL_GPIO_WritePin ( BMP280_CS1_GPIO_Port , BMP280_CS1_Pin , GPIO_PIN_RESET ) ;
 8002114:	2200      	movs	r2, #0
 8002116:	2110      	movs	r1, #16
 8002118:	4823      	ldr	r0, [pc, #140]	; (80021a8 <bmp280_spi_reg_read+0xe8>)
 800211a:	f000 ffcf 	bl	80030bc <HAL_GPIO_WritePin>

 /* Data exchange */
 status = HAL_SPI_TransmitReceive ( BMP280_SPI , ( uint8_t *) (& txarray ) , ( uint8_t *) (&
 800211e:	88bb      	ldrh	r3, [r7, #4]
 8002120:	3301      	adds	r3, #1
 8002122:	b298      	uxth	r0, r3
 8002124:	f107 0208 	add.w	r2, r7, #8
 8002128:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800212c:	2305      	movs	r3, #5
 800212e:	9300      	str	r3, [sp, #0]
 8002130:	4603      	mov	r3, r0
 8002132:	481e      	ldr	r0, [pc, #120]	; (80021ac <bmp280_spi_reg_read+0xec>)
 8002134:	f002 faf0 	bl	8004718 <HAL_SPI_TransmitReceive>
 8002138:	4603      	mov	r3, r0
 800213a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
rxarray ) , length +1 , 5) ;
 while ( BMP280_SPI -> State == HAL_SPI_STATE_BUSY ) {};
 800213e:	bf00      	nop
 8002140:	4b1a      	ldr	r3, [pc, #104]	; (80021ac <bmp280_spi_reg_read+0xec>)
 8002142:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002146:	b2db      	uxtb	r3, r3
 8002148:	2b02      	cmp	r3, #2
 800214a:	d0f9      	beq.n	8002140 <bmp280_spi_reg_read+0x80>

 /* Disable all slaves */
 HAL_GPIO_WritePin ( BMP280_CS1_GPIO_Port , BMP280_CS1_Pin , GPIO_PIN_SET ) ;
 800214c:	2201      	movs	r2, #1
 800214e:	2110      	movs	r1, #16
 8002150:	4815      	ldr	r0, [pc, #84]	; (80021a8 <bmp280_spi_reg_read+0xe8>)
 8002152:	f000 ffb3 	bl	80030bc <HAL_GPIO_WritePin>

 /* Copy data from rx buffer */
 for ( stringpos = 0; stringpos < length ; stringpos ++)
 8002156:	2300      	movs	r3, #0
 8002158:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800215c:	e011      	b.n	8002182 <bmp280_spi_reg_read+0xc2>
 {
 reg_data [ stringpos ] = rxarray [ stringpos + BMP280_DATA_INDEX ];
 800215e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002162:	1c5a      	adds	r2, r3, #1
 8002164:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002168:	6839      	ldr	r1, [r7, #0]
 800216a:	440b      	add	r3, r1
 800216c:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002170:	440a      	add	r2, r1
 8002172:	f812 2c40 	ldrb.w	r2, [r2, #-64]
 8002176:	701a      	strb	r2, [r3, #0]
 for ( stringpos = 0; stringpos < length ; stringpos ++)
 8002178:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800217c:	3301      	adds	r3, #1
 800217e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8002182:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002186:	b29b      	uxth	r3, r3
 8002188:	88ba      	ldrh	r2, [r7, #4]
 800218a:	429a      	cmp	r2, r3
 800218c:	d8e7      	bhi.n	800215e <bmp280_spi_reg_read+0x9e>
 }
 // memcpy ( reg_data , rxarray + BMP280_DATA_INDEX , length );

 if ( status != HAL_OK )
 800218e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8002192:	2b00      	cmp	r3, #0
 8002194:	d002      	beq.n	800219c <bmp280_spi_reg_read+0xdc>
 {
 // The BME280 API calls for 0 return value as a success , and -1 returned as failure
 iError = ( -1) ;
 8002196:	f04f 33ff 	mov.w	r3, #4294967295
 800219a:	647b      	str	r3, [r7, #68]	; 0x44
 }

 return ( int8_t ) iError ;
 800219c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800219e:	b25b      	sxtb	r3, r3
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3748      	adds	r7, #72	; 0x48
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	40021000 	.word	0x40021000
 80021ac:	20000058 	.word	0x20000058

080021b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80021b4:	bf00      	nop
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
	...

080021c0 <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0

  hspi4.Instance = SPI4;
 80021c4:	4b1b      	ldr	r3, [pc, #108]	; (8002234 <MX_SPI4_Init+0x74>)
 80021c6:	4a1c      	ldr	r2, [pc, #112]	; (8002238 <MX_SPI4_Init+0x78>)
 80021c8:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80021ca:	4b1a      	ldr	r3, [pc, #104]	; (8002234 <MX_SPI4_Init+0x74>)
 80021cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80021d0:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80021d2:	4b18      	ldr	r3, [pc, #96]	; (8002234 <MX_SPI4_Init+0x74>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80021d8:	4b16      	ldr	r3, [pc, #88]	; (8002234 <MX_SPI4_Init+0x74>)
 80021da:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80021de:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80021e0:	4b14      	ldr	r3, [pc, #80]	; (8002234 <MX_SPI4_Init+0x74>)
 80021e2:	2202      	movs	r2, #2
 80021e4:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 80021e6:	4b13      	ldr	r3, [pc, #76]	; (8002234 <MX_SPI4_Init+0x74>)
 80021e8:	2201      	movs	r2, #1
 80021ea:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80021ec:	4b11      	ldr	r3, [pc, #68]	; (8002234 <MX_SPI4_Init+0x74>)
 80021ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021f2:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80021f4:	4b0f      	ldr	r3, [pc, #60]	; (8002234 <MX_SPI4_Init+0x74>)
 80021f6:	2218      	movs	r2, #24
 80021f8:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80021fa:	4b0e      	ldr	r3, [pc, #56]	; (8002234 <MX_SPI4_Init+0x74>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8002200:	4b0c      	ldr	r3, [pc, #48]	; (8002234 <MX_SPI4_Init+0x74>)
 8002202:	2200      	movs	r2, #0
 8002204:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002206:	4b0b      	ldr	r3, [pc, #44]	; (8002234 <MX_SPI4_Init+0x74>)
 8002208:	2200      	movs	r2, #0
 800220a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 800220c:	4b09      	ldr	r3, [pc, #36]	; (8002234 <MX_SPI4_Init+0x74>)
 800220e:	2207      	movs	r2, #7
 8002210:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002212:	4b08      	ldr	r3, [pc, #32]	; (8002234 <MX_SPI4_Init+0x74>)
 8002214:	2200      	movs	r2, #0
 8002216:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002218:	4b06      	ldr	r3, [pc, #24]	; (8002234 <MX_SPI4_Init+0x74>)
 800221a:	2200      	movs	r2, #0
 800221c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800221e:	4805      	ldr	r0, [pc, #20]	; (8002234 <MX_SPI4_Init+0x74>)
 8002220:	f002 f882 	bl	8004328 <HAL_SPI_Init>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 800222a:	f7ff ffc1 	bl	80021b0 <Error_Handler>
  }

}
 800222e:	bf00      	nop
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	20000058 	.word	0x20000058
 8002238:	40013400 	.word	0x40013400

0800223c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b08a      	sub	sp, #40	; 0x28
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002244:	f107 0314 	add.w	r3, r7, #20
 8002248:	2200      	movs	r2, #0
 800224a:	601a      	str	r2, [r3, #0]
 800224c:	605a      	str	r2, [r3, #4]
 800224e:	609a      	str	r2, [r3, #8]
 8002250:	60da      	str	r2, [r3, #12]
 8002252:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI4)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a17      	ldr	r2, [pc, #92]	; (80022b8 <HAL_SPI_MspInit+0x7c>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d127      	bne.n	80022ae <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 800225e:	4b17      	ldr	r3, [pc, #92]	; (80022bc <HAL_SPI_MspInit+0x80>)
 8002260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002262:	4a16      	ldr	r2, [pc, #88]	; (80022bc <HAL_SPI_MspInit+0x80>)
 8002264:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002268:	6453      	str	r3, [r2, #68]	; 0x44
 800226a:	4b14      	ldr	r3, [pc, #80]	; (80022bc <HAL_SPI_MspInit+0x80>)
 800226c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002272:	613b      	str	r3, [r7, #16]
 8002274:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002276:	4b11      	ldr	r3, [pc, #68]	; (80022bc <HAL_SPI_MspInit+0x80>)
 8002278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227a:	4a10      	ldr	r2, [pc, #64]	; (80022bc <HAL_SPI_MspInit+0x80>)
 800227c:	f043 0310 	orr.w	r3, r3, #16
 8002280:	6313      	str	r3, [r2, #48]	; 0x30
 8002282:	4b0e      	ldr	r3, [pc, #56]	; (80022bc <HAL_SPI_MspInit+0x80>)
 8002284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002286:	f003 0310 	and.w	r3, r3, #16
 800228a:	60fb      	str	r3, [r7, #12]
 800228c:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = BMP280_SCK_Pin|BMP280_MISO_Pin|BMP280_MOSI_Pin;
 800228e:	2364      	movs	r3, #100	; 0x64
 8002290:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002292:	2302      	movs	r3, #2
 8002294:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002296:	2300      	movs	r3, #0
 8002298:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800229a:	2303      	movs	r3, #3
 800229c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800229e:	2305      	movs	r3, #5
 80022a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022a2:	f107 0314 	add.w	r3, r7, #20
 80022a6:	4619      	mov	r1, r3
 80022a8:	4805      	ldr	r0, [pc, #20]	; (80022c0 <HAL_SPI_MspInit+0x84>)
 80022aa:	f000 fd5d 	bl	8002d68 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 80022ae:	bf00      	nop
 80022b0:	3728      	adds	r7, #40	; 0x28
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	40013400 	.word	0x40013400
 80022bc:	40023800 	.word	0x40023800
 80022c0:	40021000 	.word	0x40021000

080022c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80022ca:	4b0f      	ldr	r3, [pc, #60]	; (8002308 <HAL_MspInit+0x44>)
 80022cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ce:	4a0e      	ldr	r2, [pc, #56]	; (8002308 <HAL_MspInit+0x44>)
 80022d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022d4:	6413      	str	r3, [r2, #64]	; 0x40
 80022d6:	4b0c      	ldr	r3, [pc, #48]	; (8002308 <HAL_MspInit+0x44>)
 80022d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022de:	607b      	str	r3, [r7, #4]
 80022e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022e2:	4b09      	ldr	r3, [pc, #36]	; (8002308 <HAL_MspInit+0x44>)
 80022e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e6:	4a08      	ldr	r2, [pc, #32]	; (8002308 <HAL_MspInit+0x44>)
 80022e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022ec:	6453      	str	r3, [r2, #68]	; 0x44
 80022ee:	4b06      	ldr	r3, [pc, #24]	; (8002308 <HAL_MspInit+0x44>)
 80022f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022f6:	603b      	str	r3, [r7, #0]
 80022f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022fa:	bf00      	nop
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	40023800 	.word	0x40023800

0800230c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002310:	bf00      	nop
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr

0800231a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800231a:	b480      	push	{r7}
 800231c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800231e:	e7fe      	b.n	800231e <HardFault_Handler+0x4>

08002320 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002324:	e7fe      	b.n	8002324 <MemManage_Handler+0x4>

08002326 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002326:	b480      	push	{r7}
 8002328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800232a:	e7fe      	b.n	800232a <BusFault_Handler+0x4>

0800232c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002330:	e7fe      	b.n	8002330 <UsageFault_Handler+0x4>

08002332 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002332:	b480      	push	{r7}
 8002334:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002336:	bf00      	nop
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002344:	bf00      	nop
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr

0800234e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800234e:	b480      	push	{r7}
 8002350:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002352:	bf00      	nop
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002360:	f000 fb8c 	bl	8002a7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002364:	bf00      	nop
 8002366:	bd80      	pop	{r7, pc}

08002368 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800236c:	4802      	ldr	r0, [pc, #8]	; (8002378 <TIM2_IRQHandler+0x10>)
 800236e:	f002 fe9c 	bl	80050aa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002372:	bf00      	nop
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	2000017c 	.word	0x2000017c

0800237c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002380:	4802      	ldr	r0, [pc, #8]	; (800238c <TIM3_IRQHandler+0x10>)
 8002382:	f002 fe92 	bl	80050aa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002386:	bf00      	nop
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	200000fc 	.word	0x200000fc

08002390 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002394:	4802      	ldr	r0, [pc, #8]	; (80023a0 <USART3_IRQHandler+0x10>)
 8002396:	f003 fe59 	bl	800604c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800239a:	bf00      	nop
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	200001bc 	.word	0x200001bc

080023a4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80023a8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80023ac:	f000 feba 	bl	8003124 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80023b0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80023b4:	f000 feb6 	bl	8003124 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80023b8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80023bc:	f000 feb2 	bl	8003124 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80023c0:	bf00      	nop
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023c8:	4b08      	ldr	r3, [pc, #32]	; (80023ec <SystemInit+0x28>)
 80023ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ce:	4a07      	ldr	r2, [pc, #28]	; (80023ec <SystemInit+0x28>)
 80023d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80023d8:	4b04      	ldr	r3, [pc, #16]	; (80023ec <SystemInit+0x28>)
 80023da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80023de:	609a      	str	r2, [r3, #8]
#endif
}
 80023e0:	bf00      	nop
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	e000ed00 	.word	0xe000ed00

080023f0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b08c      	sub	sp, #48	; 0x30
 80023f4:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 80023f6:	f107 030c 	add.w	r3, r7, #12
 80023fa:	2224      	movs	r2, #36	; 0x24
 80023fc:	2100      	movs	r1, #0
 80023fe:	4618      	mov	r0, r3
 8002400:	f004 fbd4 	bl	8006bac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002404:	463b      	mov	r3, r7
 8002406:	2200      	movs	r2, #0
 8002408:	601a      	str	r2, [r3, #0]
 800240a:	605a      	str	r2, [r3, #4]
 800240c:	609a      	str	r2, [r3, #8]

  htim1.Instance = TIM1;
 800240e:	4b23      	ldr	r3, [pc, #140]	; (800249c <MX_TIM1_Init+0xac>)
 8002410:	4a23      	ldr	r2, [pc, #140]	; (80024a0 <MX_TIM1_Init+0xb0>)
 8002412:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002414:	4b21      	ldr	r3, [pc, #132]	; (800249c <MX_TIM1_Init+0xac>)
 8002416:	2200      	movs	r2, #0
 8002418:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800241a:	4b20      	ldr	r3, [pc, #128]	; (800249c <MX_TIM1_Init+0xac>)
 800241c:	2200      	movs	r2, #0
 800241e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5000;
 8002420:	4b1e      	ldr	r3, [pc, #120]	; (800249c <MX_TIM1_Init+0xac>)
 8002422:	f241 3288 	movw	r2, #5000	; 0x1388
 8002426:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002428:	4b1c      	ldr	r3, [pc, #112]	; (800249c <MX_TIM1_Init+0xac>)
 800242a:	2200      	movs	r2, #0
 800242c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800242e:	4b1b      	ldr	r3, [pc, #108]	; (800249c <MX_TIM1_Init+0xac>)
 8002430:	2200      	movs	r2, #0
 8002432:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002434:	4b19      	ldr	r3, [pc, #100]	; (800249c <MX_TIM1_Init+0xac>)
 8002436:	2200      	movs	r2, #0
 8002438:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800243a:	2301      	movs	r3, #1
 800243c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800243e:	2300      	movs	r3, #0
 8002440:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002442:	2301      	movs	r3, #1
 8002444:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002446:	2300      	movs	r3, #0
 8002448:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800244a:	2300      	movs	r3, #0
 800244c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800244e:	2300      	movs	r3, #0
 8002450:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002452:	2301      	movs	r3, #1
 8002454:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002456:	2300      	movs	r3, #0
 8002458:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800245a:	2300      	movs	r3, #0
 800245c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800245e:	f107 030c 	add.w	r3, r7, #12
 8002462:	4619      	mov	r1, r3
 8002464:	480d      	ldr	r0, [pc, #52]	; (800249c <MX_TIM1_Init+0xac>)
 8002466:	f002 fd57 	bl	8004f18 <HAL_TIM_Encoder_Init>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d001      	beq.n	8002474 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8002470:	f7ff fe9e 	bl	80021b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002474:	2300      	movs	r3, #0
 8002476:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002478:	2300      	movs	r3, #0
 800247a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800247c:	2300      	movs	r3, #0
 800247e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002480:	463b      	mov	r3, r7
 8002482:	4619      	mov	r1, r3
 8002484:	4805      	ldr	r0, [pc, #20]	; (800249c <MX_TIM1_Init+0xac>)
 8002486:	f003 fce7 	bl	8005e58 <HAL_TIMEx_MasterConfigSynchronization>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d001      	beq.n	8002494 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8002490:	f7ff fe8e 	bl	80021b0 <Error_Handler>
  }

}
 8002494:	bf00      	nop
 8002496:	3730      	adds	r7, #48	; 0x30
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	2000013c 	.word	0x2000013c
 80024a0:	40010000 	.word	0x40010000

080024a4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b088      	sub	sp, #32
 80024a8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024aa:	f107 0310 	add.w	r3, r7, #16
 80024ae:	2200      	movs	r2, #0
 80024b0:	601a      	str	r2, [r3, #0]
 80024b2:	605a      	str	r2, [r3, #4]
 80024b4:	609a      	str	r2, [r3, #8]
 80024b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024b8:	1d3b      	adds	r3, r7, #4
 80024ba:	2200      	movs	r2, #0
 80024bc:	601a      	str	r2, [r3, #0]
 80024be:	605a      	str	r2, [r3, #4]
 80024c0:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 80024c2:	4b1e      	ldr	r3, [pc, #120]	; (800253c <MX_TIM2_Init+0x98>)
 80024c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80024c8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 107;
 80024ca:	4b1c      	ldr	r3, [pc, #112]	; (800253c <MX_TIM2_Init+0x98>)
 80024cc:	226b      	movs	r2, #107	; 0x6b
 80024ce:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024d0:	4b1a      	ldr	r3, [pc, #104]	; (800253c <MX_TIM2_Init+0x98>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4999;
 80024d6:	4b19      	ldr	r3, [pc, #100]	; (800253c <MX_TIM2_Init+0x98>)
 80024d8:	f241 3287 	movw	r2, #4999	; 0x1387
 80024dc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024de:	4b17      	ldr	r3, [pc, #92]	; (800253c <MX_TIM2_Init+0x98>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024e4:	4b15      	ldr	r3, [pc, #84]	; (800253c <MX_TIM2_Init+0x98>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80024ea:	4814      	ldr	r0, [pc, #80]	; (800253c <MX_TIM2_Init+0x98>)
 80024ec:	f002 fc44 	bl	8004d78 <HAL_TIM_Base_Init>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80024f6:	f7ff fe5b 	bl	80021b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024fe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002500:	f107 0310 	add.w	r3, r7, #16
 8002504:	4619      	mov	r1, r3
 8002506:	480d      	ldr	r0, [pc, #52]	; (800253c <MX_TIM2_Init+0x98>)
 8002508:	f003 f806 	bl	8005518 <HAL_TIM_ConfigClockSource>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d001      	beq.n	8002516 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002512:	f7ff fe4d 	bl	80021b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002516:	2300      	movs	r3, #0
 8002518:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800251a:	2300      	movs	r3, #0
 800251c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800251e:	1d3b      	adds	r3, r7, #4
 8002520:	4619      	mov	r1, r3
 8002522:	4806      	ldr	r0, [pc, #24]	; (800253c <MX_TIM2_Init+0x98>)
 8002524:	f003 fc98 	bl	8005e58 <HAL_TIMEx_MasterConfigSynchronization>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d001      	beq.n	8002532 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800252e:	f7ff fe3f 	bl	80021b0 <Error_Handler>
  }

}
 8002532:	bf00      	nop
 8002534:	3720      	adds	r7, #32
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	2000017c 	.word	0x2000017c

08002540 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b08e      	sub	sp, #56	; 0x38
 8002544:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002546:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800254a:	2200      	movs	r2, #0
 800254c:	601a      	str	r2, [r3, #0]
 800254e:	605a      	str	r2, [r3, #4]
 8002550:	609a      	str	r2, [r3, #8]
 8002552:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002554:	f107 031c 	add.w	r3, r7, #28
 8002558:	2200      	movs	r2, #0
 800255a:	601a      	str	r2, [r3, #0]
 800255c:	605a      	str	r2, [r3, #4]
 800255e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002560:	463b      	mov	r3, r7
 8002562:	2200      	movs	r2, #0
 8002564:	601a      	str	r2, [r3, #0]
 8002566:	605a      	str	r2, [r3, #4]
 8002568:	609a      	str	r2, [r3, #8]
 800256a:	60da      	str	r2, [r3, #12]
 800256c:	611a      	str	r2, [r3, #16]
 800256e:	615a      	str	r2, [r3, #20]
 8002570:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8002572:	4b2d      	ldr	r3, [pc, #180]	; (8002628 <MX_TIM3_Init+0xe8>)
 8002574:	4a2d      	ldr	r2, [pc, #180]	; (800262c <MX_TIM3_Init+0xec>)
 8002576:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 107;
 8002578:	4b2b      	ldr	r3, [pc, #172]	; (8002628 <MX_TIM3_Init+0xe8>)
 800257a:	226b      	movs	r2, #107	; 0x6b
 800257c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800257e:	4b2a      	ldr	r3, [pc, #168]	; (8002628 <MX_TIM3_Init+0xe8>)
 8002580:	2200      	movs	r2, #0
 8002582:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8002584:	4b28      	ldr	r3, [pc, #160]	; (8002628 <MX_TIM3_Init+0xe8>)
 8002586:	f240 32e7 	movw	r2, #999	; 0x3e7
 800258a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800258c:	4b26      	ldr	r3, [pc, #152]	; (8002628 <MX_TIM3_Init+0xe8>)
 800258e:	2200      	movs	r2, #0
 8002590:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002592:	4b25      	ldr	r3, [pc, #148]	; (8002628 <MX_TIM3_Init+0xe8>)
 8002594:	2200      	movs	r2, #0
 8002596:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002598:	4823      	ldr	r0, [pc, #140]	; (8002628 <MX_TIM3_Init+0xe8>)
 800259a:	f002 fbed 	bl	8004d78 <HAL_TIM_Base_Init>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80025a4:	f7ff fe04 	bl	80021b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025ac:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80025ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025b2:	4619      	mov	r1, r3
 80025b4:	481c      	ldr	r0, [pc, #112]	; (8002628 <MX_TIM3_Init+0xe8>)
 80025b6:	f002 ffaf 	bl	8005518 <HAL_TIM_ConfigClockSource>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80025c0:	f7ff fdf6 	bl	80021b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80025c4:	4818      	ldr	r0, [pc, #96]	; (8002628 <MX_TIM3_Init+0xe8>)
 80025c6:	f002 fc2d 	bl	8004e24 <HAL_TIM_PWM_Init>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d001      	beq.n	80025d4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80025d0:	f7ff fdee 	bl	80021b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025d4:	2300      	movs	r3, #0
 80025d6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025d8:	2300      	movs	r3, #0
 80025da:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80025dc:	f107 031c 	add.w	r3, r7, #28
 80025e0:	4619      	mov	r1, r3
 80025e2:	4811      	ldr	r0, [pc, #68]	; (8002628 <MX_TIM3_Init+0xe8>)
 80025e4:	f003 fc38 	bl	8005e58 <HAL_TIMEx_MasterConfigSynchronization>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80025ee:	f7ff fddf 	bl	80021b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025f2:	2360      	movs	r3, #96	; 0x60
 80025f4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80025f6:	2300      	movs	r3, #0
 80025f8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025fa:	2300      	movs	r3, #0
 80025fc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025fe:	2300      	movs	r3, #0
 8002600:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002602:	463b      	mov	r3, r7
 8002604:	220c      	movs	r2, #12
 8002606:	4619      	mov	r1, r3
 8002608:	4807      	ldr	r0, [pc, #28]	; (8002628 <MX_TIM3_Init+0xe8>)
 800260a:	f002 fe6d 	bl	80052e8 <HAL_TIM_PWM_ConfigChannel>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002614:	f7ff fdcc 	bl	80021b0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8002618:	4803      	ldr	r0, [pc, #12]	; (8002628 <MX_TIM3_Init+0xe8>)
 800261a:	f000 f915 	bl	8002848 <HAL_TIM_MspPostInit>

}
 800261e:	bf00      	nop
 8002620:	3738      	adds	r7, #56	; 0x38
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	200000fc 	.word	0x200000fc
 800262c:	40000400 	.word	0x40000400

08002630 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b08c      	sub	sp, #48	; 0x30
 8002634:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8002636:	f107 030c 	add.w	r3, r7, #12
 800263a:	2224      	movs	r2, #36	; 0x24
 800263c:	2100      	movs	r1, #0
 800263e:	4618      	mov	r0, r3
 8002640:	f004 fab4 	bl	8006bac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002644:	463b      	mov	r3, r7
 8002646:	2200      	movs	r2, #0
 8002648:	601a      	str	r2, [r3, #0]
 800264a:	605a      	str	r2, [r3, #4]
 800264c:	609a      	str	r2, [r3, #8]

  htim4.Instance = TIM4;
 800264e:	4b20      	ldr	r3, [pc, #128]	; (80026d0 <MX_TIM4_Init+0xa0>)
 8002650:	4a20      	ldr	r2, [pc, #128]	; (80026d4 <MX_TIM4_Init+0xa4>)
 8002652:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002654:	4b1e      	ldr	r3, [pc, #120]	; (80026d0 <MX_TIM4_Init+0xa0>)
 8002656:	2200      	movs	r2, #0
 8002658:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800265a:	4b1d      	ldr	r3, [pc, #116]	; (80026d0 <MX_TIM4_Init+0xa0>)
 800265c:	2200      	movs	r2, #0
 800265e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 8002660:	4b1b      	ldr	r3, [pc, #108]	; (80026d0 <MX_TIM4_Init+0xa0>)
 8002662:	2264      	movs	r2, #100	; 0x64
 8002664:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002666:	4b1a      	ldr	r3, [pc, #104]	; (80026d0 <MX_TIM4_Init+0xa0>)
 8002668:	2200      	movs	r2, #0
 800266a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800266c:	4b18      	ldr	r3, [pc, #96]	; (80026d0 <MX_TIM4_Init+0xa0>)
 800266e:	2200      	movs	r2, #0
 8002670:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002672:	2303      	movs	r3, #3
 8002674:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8002676:	2302      	movs	r3, #2
 8002678:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800267a:	2301      	movs	r3, #1
 800267c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800267e:	2300      	movs	r3, #0
 8002680:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002682:	2300      	movs	r3, #0
 8002684:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8002686:	2302      	movs	r3, #2
 8002688:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800268a:	2301      	movs	r3, #1
 800268c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800268e:	2300      	movs	r3, #0
 8002690:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002692:	2300      	movs	r3, #0
 8002694:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002696:	f107 030c 	add.w	r3, r7, #12
 800269a:	4619      	mov	r1, r3
 800269c:	480c      	ldr	r0, [pc, #48]	; (80026d0 <MX_TIM4_Init+0xa0>)
 800269e:	f002 fc3b 	bl	8004f18 <HAL_TIM_Encoder_Init>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d001      	beq.n	80026ac <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80026a8:	f7ff fd82 	bl	80021b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026ac:	2300      	movs	r3, #0
 80026ae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026b0:	2300      	movs	r3, #0
 80026b2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80026b4:	463b      	mov	r3, r7
 80026b6:	4619      	mov	r1, r3
 80026b8:	4805      	ldr	r0, [pc, #20]	; (80026d0 <MX_TIM4_Init+0xa0>)
 80026ba:	f003 fbcd 	bl	8005e58 <HAL_TIMEx_MasterConfigSynchronization>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d001      	beq.n	80026c8 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80026c4:	f7ff fd74 	bl	80021b0 <Error_Handler>
  }

}
 80026c8:	bf00      	nop
 80026ca:	3730      	adds	r7, #48	; 0x30
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	200000bc 	.word	0x200000bc
 80026d4:	40000800 	.word	0x40000800

080026d8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b08c      	sub	sp, #48	; 0x30
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026e0:	f107 031c 	add.w	r3, r7, #28
 80026e4:	2200      	movs	r2, #0
 80026e6:	601a      	str	r2, [r3, #0]
 80026e8:	605a      	str	r2, [r3, #4]
 80026ea:	609a      	str	r2, [r3, #8]
 80026ec:	60da      	str	r2, [r3, #12]
 80026ee:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a2f      	ldr	r2, [pc, #188]	; (80027b4 <HAL_TIM_Encoder_MspInit+0xdc>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d129      	bne.n	800274e <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80026fa:	4b2f      	ldr	r3, [pc, #188]	; (80027b8 <HAL_TIM_Encoder_MspInit+0xe0>)
 80026fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026fe:	4a2e      	ldr	r2, [pc, #184]	; (80027b8 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002700:	f043 0301 	orr.w	r3, r3, #1
 8002704:	6453      	str	r3, [r2, #68]	; 0x44
 8002706:	4b2c      	ldr	r3, [pc, #176]	; (80027b8 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270a:	f003 0301 	and.w	r3, r3, #1
 800270e:	61bb      	str	r3, [r7, #24]
 8002710:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002712:	4b29      	ldr	r3, [pc, #164]	; (80027b8 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002716:	4a28      	ldr	r2, [pc, #160]	; (80027b8 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002718:	f043 0310 	orr.w	r3, r3, #16
 800271c:	6313      	str	r3, [r2, #48]	; 0x30
 800271e:	4b26      	ldr	r3, [pc, #152]	; (80027b8 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002722:	f003 0310 	and.w	r3, r3, #16
 8002726:	617b      	str	r3, [r7, #20]
 8002728:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 800272a:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800272e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002730:	2302      	movs	r3, #2
 8002732:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002734:	2300      	movs	r3, #0
 8002736:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002738:	2300      	movs	r3, #0
 800273a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800273c:	2301      	movs	r3, #1
 800273e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002740:	f107 031c 	add.w	r3, r7, #28
 8002744:	4619      	mov	r1, r3
 8002746:	481d      	ldr	r0, [pc, #116]	; (80027bc <HAL_TIM_Encoder_MspInit+0xe4>)
 8002748:	f000 fb0e 	bl	8002d68 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800274c:	e02d      	b.n	80027aa <HAL_TIM_Encoder_MspInit+0xd2>
  else if(tim_encoderHandle->Instance==TIM4)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a1b      	ldr	r2, [pc, #108]	; (80027c0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d128      	bne.n	80027aa <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002758:	4b17      	ldr	r3, [pc, #92]	; (80027b8 <HAL_TIM_Encoder_MspInit+0xe0>)
 800275a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275c:	4a16      	ldr	r2, [pc, #88]	; (80027b8 <HAL_TIM_Encoder_MspInit+0xe0>)
 800275e:	f043 0304 	orr.w	r3, r3, #4
 8002762:	6413      	str	r3, [r2, #64]	; 0x40
 8002764:	4b14      	ldr	r3, [pc, #80]	; (80027b8 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002768:	f003 0304 	and.w	r3, r3, #4
 800276c:	613b      	str	r3, [r7, #16]
 800276e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002770:	4b11      	ldr	r3, [pc, #68]	; (80027b8 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002774:	4a10      	ldr	r2, [pc, #64]	; (80027b8 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002776:	f043 0308 	orr.w	r3, r3, #8
 800277a:	6313      	str	r3, [r2, #48]	; 0x30
 800277c:	4b0e      	ldr	r3, [pc, #56]	; (80027b8 <HAL_TIM_Encoder_MspInit+0xe0>)
 800277e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002780:	f003 0308 	and.w	r3, r3, #8
 8002784:	60fb      	str	r3, [r7, #12]
 8002786:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENC_TIM_DT_Pin|ENC_TIM_CLK_Pin;
 8002788:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800278c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800278e:	2302      	movs	r3, #2
 8002790:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002792:	2300      	movs	r3, #0
 8002794:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002796:	2300      	movs	r3, #0
 8002798:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800279a:	2302      	movs	r3, #2
 800279c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800279e:	f107 031c 	add.w	r3, r7, #28
 80027a2:	4619      	mov	r1, r3
 80027a4:	4807      	ldr	r0, [pc, #28]	; (80027c4 <HAL_TIM_Encoder_MspInit+0xec>)
 80027a6:	f000 fadf 	bl	8002d68 <HAL_GPIO_Init>
}
 80027aa:	bf00      	nop
 80027ac:	3730      	adds	r7, #48	; 0x30
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	40010000 	.word	0x40010000
 80027b8:	40023800 	.word	0x40023800
 80027bc:	40021000 	.word	0x40021000
 80027c0:	40000800 	.word	0x40000800
 80027c4:	40020c00 	.word	0x40020c00

080027c8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027d8:	d114      	bne.n	8002804 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80027da:	4b19      	ldr	r3, [pc, #100]	; (8002840 <HAL_TIM_Base_MspInit+0x78>)
 80027dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027de:	4a18      	ldr	r2, [pc, #96]	; (8002840 <HAL_TIM_Base_MspInit+0x78>)
 80027e0:	f043 0301 	orr.w	r3, r3, #1
 80027e4:	6413      	str	r3, [r2, #64]	; 0x40
 80027e6:	4b16      	ldr	r3, [pc, #88]	; (8002840 <HAL_TIM_Base_MspInit+0x78>)
 80027e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ea:	f003 0301 	and.w	r3, r3, #1
 80027ee:	60fb      	str	r3, [r7, #12]
 80027f0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80027f2:	2200      	movs	r2, #0
 80027f4:	2100      	movs	r1, #0
 80027f6:	201c      	movs	r0, #28
 80027f8:	f000 fa5d 	bl	8002cb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80027fc:	201c      	movs	r0, #28
 80027fe:	f000 fa76 	bl	8002cee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002802:	e018      	b.n	8002836 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM3)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a0e      	ldr	r2, [pc, #56]	; (8002844 <HAL_TIM_Base_MspInit+0x7c>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d113      	bne.n	8002836 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800280e:	4b0c      	ldr	r3, [pc, #48]	; (8002840 <HAL_TIM_Base_MspInit+0x78>)
 8002810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002812:	4a0b      	ldr	r2, [pc, #44]	; (8002840 <HAL_TIM_Base_MspInit+0x78>)
 8002814:	f043 0302 	orr.w	r3, r3, #2
 8002818:	6413      	str	r3, [r2, #64]	; 0x40
 800281a:	4b09      	ldr	r3, [pc, #36]	; (8002840 <HAL_TIM_Base_MspInit+0x78>)
 800281c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281e:	f003 0302 	and.w	r3, r3, #2
 8002822:	60bb      	str	r3, [r7, #8]
 8002824:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002826:	2200      	movs	r2, #0
 8002828:	2100      	movs	r1, #0
 800282a:	201d      	movs	r0, #29
 800282c:	f000 fa43 	bl	8002cb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002830:	201d      	movs	r0, #29
 8002832:	f000 fa5c 	bl	8002cee <HAL_NVIC_EnableIRQ>
}
 8002836:	bf00      	nop
 8002838:	3710      	adds	r7, #16
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	40023800 	.word	0x40023800
 8002844:	40000400 	.word	0x40000400

08002848 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b088      	sub	sp, #32
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002850:	f107 030c 	add.w	r3, r7, #12
 8002854:	2200      	movs	r2, #0
 8002856:	601a      	str	r2, [r3, #0]
 8002858:	605a      	str	r2, [r3, #4]
 800285a:	609a      	str	r2, [r3, #8]
 800285c:	60da      	str	r2, [r3, #12]
 800285e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a11      	ldr	r2, [pc, #68]	; (80028ac <HAL_TIM_MspPostInit+0x64>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d11b      	bne.n	80028a2 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800286a:	4b11      	ldr	r3, [pc, #68]	; (80028b0 <HAL_TIM_MspPostInit+0x68>)
 800286c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286e:	4a10      	ldr	r2, [pc, #64]	; (80028b0 <HAL_TIM_MspPostInit+0x68>)
 8002870:	f043 0302 	orr.w	r3, r3, #2
 8002874:	6313      	str	r3, [r2, #48]	; 0x30
 8002876:	4b0e      	ldr	r3, [pc, #56]	; (80028b0 <HAL_TIM_MspPostInit+0x68>)
 8002878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	60bb      	str	r3, [r7, #8]
 8002880:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = TM3_PWM_CH4_Pin;
 8002882:	2302      	movs	r3, #2
 8002884:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002886:	2302      	movs	r3, #2
 8002888:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288a:	2300      	movs	r3, #0
 800288c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800288e:	2300      	movs	r3, #0
 8002890:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002892:	2302      	movs	r3, #2
 8002894:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TM3_PWM_CH4_GPIO_Port, &GPIO_InitStruct);
 8002896:	f107 030c 	add.w	r3, r7, #12
 800289a:	4619      	mov	r1, r3
 800289c:	4805      	ldr	r0, [pc, #20]	; (80028b4 <HAL_TIM_MspPostInit+0x6c>)
 800289e:	f000 fa63 	bl	8002d68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80028a2:	bf00      	nop
 80028a4:	3720      	adds	r7, #32
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	40000400 	.word	0x40000400
 80028b0:	40023800 	.word	0x40023800
 80028b4:	40020400 	.word	0x40020400

080028b8 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80028bc:	4b14      	ldr	r3, [pc, #80]	; (8002910 <MX_USART3_UART_Init+0x58>)
 80028be:	4a15      	ldr	r2, [pc, #84]	; (8002914 <MX_USART3_UART_Init+0x5c>)
 80028c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80028c2:	4b13      	ldr	r3, [pc, #76]	; (8002910 <MX_USART3_UART_Init+0x58>)
 80028c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80028c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80028ca:	4b11      	ldr	r3, [pc, #68]	; (8002910 <MX_USART3_UART_Init+0x58>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80028d0:	4b0f      	ldr	r3, [pc, #60]	; (8002910 <MX_USART3_UART_Init+0x58>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80028d6:	4b0e      	ldr	r3, [pc, #56]	; (8002910 <MX_USART3_UART_Init+0x58>)
 80028d8:	2200      	movs	r2, #0
 80028da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80028dc:	4b0c      	ldr	r3, [pc, #48]	; (8002910 <MX_USART3_UART_Init+0x58>)
 80028de:	220c      	movs	r2, #12
 80028e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028e2:	4b0b      	ldr	r3, [pc, #44]	; (8002910 <MX_USART3_UART_Init+0x58>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80028e8:	4b09      	ldr	r3, [pc, #36]	; (8002910 <MX_USART3_UART_Init+0x58>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80028ee:	4b08      	ldr	r3, [pc, #32]	; (8002910 <MX_USART3_UART_Init+0x58>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80028f4:	4b06      	ldr	r3, [pc, #24]	; (8002910 <MX_USART3_UART_Init+0x58>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80028fa:	4805      	ldr	r0, [pc, #20]	; (8002910 <MX_USART3_UART_Init+0x58>)
 80028fc:	f003 fb58 	bl	8005fb0 <HAL_UART_Init>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002906:	f7ff fc53 	bl	80021b0 <Error_Handler>
  }

}
 800290a:	bf00      	nop
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	200001bc 	.word	0x200001bc
 8002914:	40004800 	.word	0x40004800

08002918 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b08a      	sub	sp, #40	; 0x28
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002920:	f107 0314 	add.w	r3, r7, #20
 8002924:	2200      	movs	r2, #0
 8002926:	601a      	str	r2, [r3, #0]
 8002928:	605a      	str	r2, [r3, #4]
 800292a:	609a      	str	r2, [r3, #8]
 800292c:	60da      	str	r2, [r3, #12]
 800292e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a1b      	ldr	r2, [pc, #108]	; (80029a4 <HAL_UART_MspInit+0x8c>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d130      	bne.n	800299c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800293a:	4b1b      	ldr	r3, [pc, #108]	; (80029a8 <HAL_UART_MspInit+0x90>)
 800293c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293e:	4a1a      	ldr	r2, [pc, #104]	; (80029a8 <HAL_UART_MspInit+0x90>)
 8002940:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002944:	6413      	str	r3, [r2, #64]	; 0x40
 8002946:	4b18      	ldr	r3, [pc, #96]	; (80029a8 <HAL_UART_MspInit+0x90>)
 8002948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800294e:	613b      	str	r3, [r7, #16]
 8002950:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002952:	4b15      	ldr	r3, [pc, #84]	; (80029a8 <HAL_UART_MspInit+0x90>)
 8002954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002956:	4a14      	ldr	r2, [pc, #80]	; (80029a8 <HAL_UART_MspInit+0x90>)
 8002958:	f043 0308 	orr.w	r3, r3, #8
 800295c:	6313      	str	r3, [r2, #48]	; 0x30
 800295e:	4b12      	ldr	r3, [pc, #72]	; (80029a8 <HAL_UART_MspInit+0x90>)
 8002960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002962:	f003 0308 	and.w	r3, r3, #8
 8002966:	60fb      	str	r3, [r7, #12]
 8002968:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800296a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800296e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002970:	2302      	movs	r3, #2
 8002972:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002974:	2300      	movs	r3, #0
 8002976:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002978:	2303      	movs	r3, #3
 800297a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800297c:	2307      	movs	r3, #7
 800297e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002980:	f107 0314 	add.w	r3, r7, #20
 8002984:	4619      	mov	r1, r3
 8002986:	4809      	ldr	r0, [pc, #36]	; (80029ac <HAL_UART_MspInit+0x94>)
 8002988:	f000 f9ee 	bl	8002d68 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800298c:	2200      	movs	r2, #0
 800298e:	2100      	movs	r1, #0
 8002990:	2027      	movs	r0, #39	; 0x27
 8002992:	f000 f990 	bl	8002cb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002996:	2027      	movs	r0, #39	; 0x27
 8002998:	f000 f9a9 	bl	8002cee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800299c:	bf00      	nop
 800299e:	3728      	adds	r7, #40	; 0x28
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	40004800 	.word	0x40004800
 80029a8:	40023800 	.word	0x40023800
 80029ac:	40020c00 	.word	0x40020c00

080029b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80029b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029e8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80029b4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80029b6:	e003      	b.n	80029c0 <LoopCopyDataInit>

080029b8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80029b8:	4b0c      	ldr	r3, [pc, #48]	; (80029ec <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80029ba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80029bc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80029be:	3104      	adds	r1, #4

080029c0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80029c0:	480b      	ldr	r0, [pc, #44]	; (80029f0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80029c2:	4b0c      	ldr	r3, [pc, #48]	; (80029f4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80029c4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80029c6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80029c8:	d3f6      	bcc.n	80029b8 <CopyDataInit>
  ldr  r2, =_sbss
 80029ca:	4a0b      	ldr	r2, [pc, #44]	; (80029f8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80029cc:	e002      	b.n	80029d4 <LoopFillZerobss>

080029ce <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80029ce:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80029d0:	f842 3b04 	str.w	r3, [r2], #4

080029d4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80029d4:	4b09      	ldr	r3, [pc, #36]	; (80029fc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80029d6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80029d8:	d3f9      	bcc.n	80029ce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80029da:	f7ff fcf3 	bl	80023c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029de:	f004 f8c1 	bl	8006b64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029e2:	f7ff f9d7 	bl	8001d94 <main>
  bx  lr    
 80029e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80029e8:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80029ec:	08006c84 	.word	0x08006c84
  ldr  r0, =_sdata
 80029f0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80029f4:	20000024 	.word	0x20000024
  ldr  r2, =_sbss
 80029f8:	20000024 	.word	0x20000024
  ldr  r3, = _ebss
 80029fc:	20000240 	.word	0x20000240

08002a00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a00:	e7fe      	b.n	8002a00 <ADC_IRQHandler>

08002a02 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a02:	b580      	push	{r7, lr}
 8002a04:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a06:	2003      	movs	r0, #3
 8002a08:	f000 f94a 	bl	8002ca0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a0c:	2000      	movs	r0, #0
 8002a0e:	f000 f805 	bl	8002a1c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002a12:	f7ff fc57 	bl	80022c4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002a16:	2300      	movs	r3, #0
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a24:	4b12      	ldr	r3, [pc, #72]	; (8002a70 <HAL_InitTick+0x54>)
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	4b12      	ldr	r3, [pc, #72]	; (8002a74 <HAL_InitTick+0x58>)
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a32:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f000 f965 	bl	8002d0a <HAL_SYSTICK_Config>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d001      	beq.n	8002a4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e00e      	b.n	8002a68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2b0f      	cmp	r3, #15
 8002a4e:	d80a      	bhi.n	8002a66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a50:	2200      	movs	r2, #0
 8002a52:	6879      	ldr	r1, [r7, #4]
 8002a54:	f04f 30ff 	mov.w	r0, #4294967295
 8002a58:	f000 f92d 	bl	8002cb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a5c:	4a06      	ldr	r2, [pc, #24]	; (8002a78 <HAL_InitTick+0x5c>)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a62:	2300      	movs	r3, #0
 8002a64:	e000      	b.n	8002a68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3708      	adds	r7, #8
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	20000018 	.word	0x20000018
 8002a74:	20000020 	.word	0x20000020
 8002a78:	2000001c 	.word	0x2000001c

08002a7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a80:	4b06      	ldr	r3, [pc, #24]	; (8002a9c <HAL_IncTick+0x20>)
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	461a      	mov	r2, r3
 8002a86:	4b06      	ldr	r3, [pc, #24]	; (8002aa0 <HAL_IncTick+0x24>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4413      	add	r3, r2
 8002a8c:	4a04      	ldr	r2, [pc, #16]	; (8002aa0 <HAL_IncTick+0x24>)
 8002a8e:	6013      	str	r3, [r2, #0]
}
 8002a90:	bf00      	nop
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	20000020 	.word	0x20000020
 8002aa0:	2000023c 	.word	0x2000023c

08002aa4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0
  return uwTick;
 8002aa8:	4b03      	ldr	r3, [pc, #12]	; (8002ab8 <HAL_GetTick+0x14>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	2000023c 	.word	0x2000023c

08002abc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ac4:	f7ff ffee 	bl	8002aa4 <HAL_GetTick>
 8002ac8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ad4:	d005      	beq.n	8002ae2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ad6:	4b09      	ldr	r3, [pc, #36]	; (8002afc <HAL_Delay+0x40>)
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	461a      	mov	r2, r3
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	4413      	add	r3, r2
 8002ae0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ae2:	bf00      	nop
 8002ae4:	f7ff ffde 	bl	8002aa4 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	68fa      	ldr	r2, [r7, #12]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d8f7      	bhi.n	8002ae4 <HAL_Delay+0x28>
  {
  }
}
 8002af4:	bf00      	nop
 8002af6:	3710      	adds	r7, #16
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	20000020 	.word	0x20000020

08002b00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b085      	sub	sp, #20
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f003 0307 	and.w	r3, r3, #7
 8002b0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b10:	4b0b      	ldr	r3, [pc, #44]	; (8002b40 <__NVIC_SetPriorityGrouping+0x40>)
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b16:	68ba      	ldr	r2, [r7, #8]
 8002b18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002b28:	4b06      	ldr	r3, [pc, #24]	; (8002b44 <__NVIC_SetPriorityGrouping+0x44>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b2e:	4a04      	ldr	r2, [pc, #16]	; (8002b40 <__NVIC_SetPriorityGrouping+0x40>)
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	60d3      	str	r3, [r2, #12]
}
 8002b34:	bf00      	nop
 8002b36:	3714      	adds	r7, #20
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr
 8002b40:	e000ed00 	.word	0xe000ed00
 8002b44:	05fa0000 	.word	0x05fa0000

08002b48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b4c:	4b04      	ldr	r3, [pc, #16]	; (8002b60 <__NVIC_GetPriorityGrouping+0x18>)
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	0a1b      	lsrs	r3, r3, #8
 8002b52:	f003 0307 	and.w	r3, r3, #7
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr
 8002b60:	e000ed00 	.word	0xe000ed00

08002b64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	db0b      	blt.n	8002b8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b76:	79fb      	ldrb	r3, [r7, #7]
 8002b78:	f003 021f 	and.w	r2, r3, #31
 8002b7c:	4907      	ldr	r1, [pc, #28]	; (8002b9c <__NVIC_EnableIRQ+0x38>)
 8002b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b82:	095b      	lsrs	r3, r3, #5
 8002b84:	2001      	movs	r0, #1
 8002b86:	fa00 f202 	lsl.w	r2, r0, r2
 8002b8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b8e:	bf00      	nop
 8002b90:	370c      	adds	r7, #12
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	e000e100 	.word	0xe000e100

08002ba0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	6039      	str	r1, [r7, #0]
 8002baa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	db0a      	blt.n	8002bca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	b2da      	uxtb	r2, r3
 8002bb8:	490c      	ldr	r1, [pc, #48]	; (8002bec <__NVIC_SetPriority+0x4c>)
 8002bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bbe:	0112      	lsls	r2, r2, #4
 8002bc0:	b2d2      	uxtb	r2, r2
 8002bc2:	440b      	add	r3, r1
 8002bc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bc8:	e00a      	b.n	8002be0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	b2da      	uxtb	r2, r3
 8002bce:	4908      	ldr	r1, [pc, #32]	; (8002bf0 <__NVIC_SetPriority+0x50>)
 8002bd0:	79fb      	ldrb	r3, [r7, #7]
 8002bd2:	f003 030f 	and.w	r3, r3, #15
 8002bd6:	3b04      	subs	r3, #4
 8002bd8:	0112      	lsls	r2, r2, #4
 8002bda:	b2d2      	uxtb	r2, r2
 8002bdc:	440b      	add	r3, r1
 8002bde:	761a      	strb	r2, [r3, #24]
}
 8002be0:	bf00      	nop
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr
 8002bec:	e000e100 	.word	0xe000e100
 8002bf0:	e000ed00 	.word	0xe000ed00

08002bf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b089      	sub	sp, #36	; 0x24
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f003 0307 	and.w	r3, r3, #7
 8002c06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	f1c3 0307 	rsb	r3, r3, #7
 8002c0e:	2b04      	cmp	r3, #4
 8002c10:	bf28      	it	cs
 8002c12:	2304      	movcs	r3, #4
 8002c14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	3304      	adds	r3, #4
 8002c1a:	2b06      	cmp	r3, #6
 8002c1c:	d902      	bls.n	8002c24 <NVIC_EncodePriority+0x30>
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	3b03      	subs	r3, #3
 8002c22:	e000      	b.n	8002c26 <NVIC_EncodePriority+0x32>
 8002c24:	2300      	movs	r3, #0
 8002c26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c28:	f04f 32ff 	mov.w	r2, #4294967295
 8002c2c:	69bb      	ldr	r3, [r7, #24]
 8002c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c32:	43da      	mvns	r2, r3
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	401a      	ands	r2, r3
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c3c:	f04f 31ff 	mov.w	r1, #4294967295
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	fa01 f303 	lsl.w	r3, r1, r3
 8002c46:	43d9      	mvns	r1, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c4c:	4313      	orrs	r3, r2
         );
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3724      	adds	r7, #36	; 0x24
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
	...

08002c5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	3b01      	subs	r3, #1
 8002c68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c6c:	d301      	bcc.n	8002c72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e00f      	b.n	8002c92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c72:	4a0a      	ldr	r2, [pc, #40]	; (8002c9c <SysTick_Config+0x40>)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	3b01      	subs	r3, #1
 8002c78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c7a:	210f      	movs	r1, #15
 8002c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c80:	f7ff ff8e 	bl	8002ba0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c84:	4b05      	ldr	r3, [pc, #20]	; (8002c9c <SysTick_Config+0x40>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c8a:	4b04      	ldr	r3, [pc, #16]	; (8002c9c <SysTick_Config+0x40>)
 8002c8c:	2207      	movs	r2, #7
 8002c8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3708      	adds	r7, #8
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	e000e010 	.word	0xe000e010

08002ca0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f7ff ff29 	bl	8002b00 <__NVIC_SetPriorityGrouping>
}
 8002cae:	bf00      	nop
 8002cb0:	3708      	adds	r7, #8
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}

08002cb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002cb6:	b580      	push	{r7, lr}
 8002cb8:	b086      	sub	sp, #24
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	60b9      	str	r1, [r7, #8]
 8002cc0:	607a      	str	r2, [r7, #4]
 8002cc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cc8:	f7ff ff3e 	bl	8002b48 <__NVIC_GetPriorityGrouping>
 8002ccc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	68b9      	ldr	r1, [r7, #8]
 8002cd2:	6978      	ldr	r0, [r7, #20]
 8002cd4:	f7ff ff8e 	bl	8002bf4 <NVIC_EncodePriority>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cde:	4611      	mov	r1, r2
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7ff ff5d 	bl	8002ba0 <__NVIC_SetPriority>
}
 8002ce6:	bf00      	nop
 8002ce8:	3718      	adds	r7, #24
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}

08002cee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cee:	b580      	push	{r7, lr}
 8002cf0:	b082      	sub	sp, #8
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7ff ff31 	bl	8002b64 <__NVIC_EnableIRQ>
}
 8002d02:	bf00      	nop
 8002d04:	3708      	adds	r7, #8
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	b082      	sub	sp, #8
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f7ff ffa2 	bl	8002c5c <SysTick_Config>
 8002d18:	4603      	mov	r3, r0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3708      	adds	r7, #8
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}

08002d22 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d22:	b480      	push	{r7}
 8002d24:	b083      	sub	sp, #12
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d004      	beq.n	8002d40 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2280      	movs	r2, #128	; 0x80
 8002d3a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e00c      	b.n	8002d5a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2205      	movs	r2, #5
 8002d44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f022 0201 	bic.w	r2, r2, #1
 8002d56:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	370c      	adds	r7, #12
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
	...

08002d68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b089      	sub	sp, #36	; 0x24
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002d72:	2300      	movs	r3, #0
 8002d74:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002d76:	2300      	movs	r3, #0
 8002d78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002d82:	2300      	movs	r3, #0
 8002d84:	61fb      	str	r3, [r7, #28]
 8002d86:	e175      	b.n	8003074 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002d88:	2201      	movs	r2, #1
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	697a      	ldr	r2, [r7, #20]
 8002d98:	4013      	ands	r3, r2
 8002d9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d9c:	693a      	ldr	r2, [r7, #16]
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	f040 8164 	bne.w	800306e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d00b      	beq.n	8002dc6 <HAL_GPIO_Init+0x5e>
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d007      	beq.n	8002dc6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002dba:	2b11      	cmp	r3, #17
 8002dbc:	d003      	beq.n	8002dc6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	2b12      	cmp	r3, #18
 8002dc4:	d130      	bne.n	8002e28 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	005b      	lsls	r3, r3, #1
 8002dd0:	2203      	movs	r2, #3
 8002dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd6:	43db      	mvns	r3, r3
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	4013      	ands	r3, r2
 8002ddc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	68da      	ldr	r2, [r3, #12]
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	005b      	lsls	r3, r3, #1
 8002de6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dea:	69ba      	ldr	r2, [r7, #24]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	69ba      	ldr	r2, [r7, #24]
 8002df4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	fa02 f303 	lsl.w	r3, r2, r3
 8002e04:	43db      	mvns	r3, r3
 8002e06:	69ba      	ldr	r2, [r7, #24]
 8002e08:	4013      	ands	r3, r2
 8002e0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	091b      	lsrs	r3, r3, #4
 8002e12:	f003 0201 	and.w	r2, r3, #1
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1c:	69ba      	ldr	r2, [r7, #24]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	2203      	movs	r2, #3
 8002e34:	fa02 f303 	lsl.w	r3, r2, r3
 8002e38:	43db      	mvns	r3, r3
 8002e3a:	69ba      	ldr	r2, [r7, #24]
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	689a      	ldr	r2, [r3, #8]
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	005b      	lsls	r3, r3, #1
 8002e48:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4c:	69ba      	ldr	r2, [r7, #24]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	69ba      	ldr	r2, [r7, #24]
 8002e56:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d003      	beq.n	8002e68 <HAL_GPIO_Init+0x100>
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	2b12      	cmp	r3, #18
 8002e66:	d123      	bne.n	8002eb0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	08da      	lsrs	r2, r3, #3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	3208      	adds	r2, #8
 8002e70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	f003 0307 	and.w	r3, r3, #7
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	220f      	movs	r2, #15
 8002e80:	fa02 f303 	lsl.w	r3, r2, r3
 8002e84:	43db      	mvns	r3, r3
 8002e86:	69ba      	ldr	r2, [r7, #24]
 8002e88:	4013      	ands	r3, r2
 8002e8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	691a      	ldr	r2, [r3, #16]
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	f003 0307 	and.w	r3, r3, #7
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9c:	69ba      	ldr	r2, [r7, #24]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	08da      	lsrs	r2, r3, #3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	3208      	adds	r2, #8
 8002eaa:	69b9      	ldr	r1, [r7, #24]
 8002eac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	005b      	lsls	r3, r3, #1
 8002eba:	2203      	movs	r2, #3
 8002ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec0:	43db      	mvns	r3, r3
 8002ec2:	69ba      	ldr	r2, [r7, #24]
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f003 0203 	and.w	r2, r3, #3
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	005b      	lsls	r3, r3, #1
 8002ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed8:	69ba      	ldr	r2, [r7, #24]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	69ba      	ldr	r2, [r7, #24]
 8002ee2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	f000 80be 	beq.w	800306e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ef2:	4b65      	ldr	r3, [pc, #404]	; (8003088 <HAL_GPIO_Init+0x320>)
 8002ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef6:	4a64      	ldr	r2, [pc, #400]	; (8003088 <HAL_GPIO_Init+0x320>)
 8002ef8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002efc:	6453      	str	r3, [r2, #68]	; 0x44
 8002efe:	4b62      	ldr	r3, [pc, #392]	; (8003088 <HAL_GPIO_Init+0x320>)
 8002f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f06:	60fb      	str	r3, [r7, #12]
 8002f08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002f0a:	4a60      	ldr	r2, [pc, #384]	; (800308c <HAL_GPIO_Init+0x324>)
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	089b      	lsrs	r3, r3, #2
 8002f10:	3302      	adds	r3, #2
 8002f12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f16:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	f003 0303 	and.w	r3, r3, #3
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	220f      	movs	r2, #15
 8002f22:	fa02 f303 	lsl.w	r3, r2, r3
 8002f26:	43db      	mvns	r3, r3
 8002f28:	69ba      	ldr	r2, [r7, #24]
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a57      	ldr	r2, [pc, #348]	; (8003090 <HAL_GPIO_Init+0x328>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d037      	beq.n	8002fa6 <HAL_GPIO_Init+0x23e>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a56      	ldr	r2, [pc, #344]	; (8003094 <HAL_GPIO_Init+0x32c>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d031      	beq.n	8002fa2 <HAL_GPIO_Init+0x23a>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a55      	ldr	r2, [pc, #340]	; (8003098 <HAL_GPIO_Init+0x330>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d02b      	beq.n	8002f9e <HAL_GPIO_Init+0x236>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a54      	ldr	r2, [pc, #336]	; (800309c <HAL_GPIO_Init+0x334>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d025      	beq.n	8002f9a <HAL_GPIO_Init+0x232>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a53      	ldr	r2, [pc, #332]	; (80030a0 <HAL_GPIO_Init+0x338>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d01f      	beq.n	8002f96 <HAL_GPIO_Init+0x22e>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a52      	ldr	r2, [pc, #328]	; (80030a4 <HAL_GPIO_Init+0x33c>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d019      	beq.n	8002f92 <HAL_GPIO_Init+0x22a>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a51      	ldr	r2, [pc, #324]	; (80030a8 <HAL_GPIO_Init+0x340>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d013      	beq.n	8002f8e <HAL_GPIO_Init+0x226>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a50      	ldr	r2, [pc, #320]	; (80030ac <HAL_GPIO_Init+0x344>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d00d      	beq.n	8002f8a <HAL_GPIO_Init+0x222>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a4f      	ldr	r2, [pc, #316]	; (80030b0 <HAL_GPIO_Init+0x348>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d007      	beq.n	8002f86 <HAL_GPIO_Init+0x21e>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a4e      	ldr	r2, [pc, #312]	; (80030b4 <HAL_GPIO_Init+0x34c>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d101      	bne.n	8002f82 <HAL_GPIO_Init+0x21a>
 8002f7e:	2309      	movs	r3, #9
 8002f80:	e012      	b.n	8002fa8 <HAL_GPIO_Init+0x240>
 8002f82:	230a      	movs	r3, #10
 8002f84:	e010      	b.n	8002fa8 <HAL_GPIO_Init+0x240>
 8002f86:	2308      	movs	r3, #8
 8002f88:	e00e      	b.n	8002fa8 <HAL_GPIO_Init+0x240>
 8002f8a:	2307      	movs	r3, #7
 8002f8c:	e00c      	b.n	8002fa8 <HAL_GPIO_Init+0x240>
 8002f8e:	2306      	movs	r3, #6
 8002f90:	e00a      	b.n	8002fa8 <HAL_GPIO_Init+0x240>
 8002f92:	2305      	movs	r3, #5
 8002f94:	e008      	b.n	8002fa8 <HAL_GPIO_Init+0x240>
 8002f96:	2304      	movs	r3, #4
 8002f98:	e006      	b.n	8002fa8 <HAL_GPIO_Init+0x240>
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e004      	b.n	8002fa8 <HAL_GPIO_Init+0x240>
 8002f9e:	2302      	movs	r3, #2
 8002fa0:	e002      	b.n	8002fa8 <HAL_GPIO_Init+0x240>
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e000      	b.n	8002fa8 <HAL_GPIO_Init+0x240>
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	69fa      	ldr	r2, [r7, #28]
 8002faa:	f002 0203 	and.w	r2, r2, #3
 8002fae:	0092      	lsls	r2, r2, #2
 8002fb0:	4093      	lsls	r3, r2
 8002fb2:	69ba      	ldr	r2, [r7, #24]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002fb8:	4934      	ldr	r1, [pc, #208]	; (800308c <HAL_GPIO_Init+0x324>)
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	089b      	lsrs	r3, r3, #2
 8002fbe:	3302      	adds	r3, #2
 8002fc0:	69ba      	ldr	r2, [r7, #24]
 8002fc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fc6:	4b3c      	ldr	r3, [pc, #240]	; (80030b8 <HAL_GPIO_Init+0x350>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	43db      	mvns	r3, r3
 8002fd0:	69ba      	ldr	r2, [r7, #24]
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d003      	beq.n	8002fea <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002fe2:	69ba      	ldr	r2, [r7, #24]
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fea:	4a33      	ldr	r2, [pc, #204]	; (80030b8 <HAL_GPIO_Init+0x350>)
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002ff0:	4b31      	ldr	r3, [pc, #196]	; (80030b8 <HAL_GPIO_Init+0x350>)
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	43db      	mvns	r3, r3
 8002ffa:	69ba      	ldr	r2, [r7, #24]
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d003      	beq.n	8003014 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800300c:	69ba      	ldr	r2, [r7, #24]
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	4313      	orrs	r3, r2
 8003012:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003014:	4a28      	ldr	r2, [pc, #160]	; (80030b8 <HAL_GPIO_Init+0x350>)
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800301a:	4b27      	ldr	r3, [pc, #156]	; (80030b8 <HAL_GPIO_Init+0x350>)
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	43db      	mvns	r3, r3
 8003024:	69ba      	ldr	r2, [r7, #24]
 8003026:	4013      	ands	r3, r2
 8003028:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d003      	beq.n	800303e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003036:	69ba      	ldr	r2, [r7, #24]
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	4313      	orrs	r3, r2
 800303c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800303e:	4a1e      	ldr	r2, [pc, #120]	; (80030b8 <HAL_GPIO_Init+0x350>)
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003044:	4b1c      	ldr	r3, [pc, #112]	; (80030b8 <HAL_GPIO_Init+0x350>)
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	43db      	mvns	r3, r3
 800304e:	69ba      	ldr	r2, [r7, #24]
 8003050:	4013      	ands	r3, r2
 8003052:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d003      	beq.n	8003068 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	4313      	orrs	r3, r2
 8003066:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003068:	4a13      	ldr	r2, [pc, #76]	; (80030b8 <HAL_GPIO_Init+0x350>)
 800306a:	69bb      	ldr	r3, [r7, #24]
 800306c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	3301      	adds	r3, #1
 8003072:	61fb      	str	r3, [r7, #28]
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	2b0f      	cmp	r3, #15
 8003078:	f67f ae86 	bls.w	8002d88 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800307c:	bf00      	nop
 800307e:	3724      	adds	r7, #36	; 0x24
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr
 8003088:	40023800 	.word	0x40023800
 800308c:	40013800 	.word	0x40013800
 8003090:	40020000 	.word	0x40020000
 8003094:	40020400 	.word	0x40020400
 8003098:	40020800 	.word	0x40020800
 800309c:	40020c00 	.word	0x40020c00
 80030a0:	40021000 	.word	0x40021000
 80030a4:	40021400 	.word	0x40021400
 80030a8:	40021800 	.word	0x40021800
 80030ac:	40021c00 	.word	0x40021c00
 80030b0:	40022000 	.word	0x40022000
 80030b4:	40022400 	.word	0x40022400
 80030b8:	40013c00 	.word	0x40013c00

080030bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	460b      	mov	r3, r1
 80030c6:	807b      	strh	r3, [r7, #2]
 80030c8:	4613      	mov	r3, r2
 80030ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030cc:	787b      	ldrb	r3, [r7, #1]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d003      	beq.n	80030da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030d2:	887a      	ldrh	r2, [r7, #2]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80030d8:	e003      	b.n	80030e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80030da:	887b      	ldrh	r3, [r7, #2]
 80030dc:	041a      	lsls	r2, r3, #16
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	619a      	str	r2, [r3, #24]
}
 80030e2:	bf00      	nop
 80030e4:	370c      	adds	r7, #12
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr

080030ee <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80030ee:	b480      	push	{r7}
 80030f0:	b083      	sub	sp, #12
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	6078      	str	r0, [r7, #4]
 80030f6:	460b      	mov	r3, r1
 80030f8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	695a      	ldr	r2, [r3, #20]
 80030fe:	887b      	ldrh	r3, [r7, #2]
 8003100:	4013      	ands	r3, r2
 8003102:	2b00      	cmp	r3, #0
 8003104:	d004      	beq.n	8003110 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003106:	887b      	ldrh	r3, [r7, #2]
 8003108:	041a      	lsls	r2, r3, #16
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800310e:	e002      	b.n	8003116 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003110:	887a      	ldrh	r2, [r7, #2]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	619a      	str	r2, [r3, #24]
}
 8003116:	bf00      	nop
 8003118:	370c      	adds	r7, #12
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
	...

08003124 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	4603      	mov	r3, r0
 800312c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800312e:	4b08      	ldr	r3, [pc, #32]	; (8003150 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003130:	695a      	ldr	r2, [r3, #20]
 8003132:	88fb      	ldrh	r3, [r7, #6]
 8003134:	4013      	ands	r3, r2
 8003136:	2b00      	cmp	r3, #0
 8003138:	d006      	beq.n	8003148 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800313a:	4a05      	ldr	r2, [pc, #20]	; (8003150 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800313c:	88fb      	ldrh	r3, [r7, #6]
 800313e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003140:	88fb      	ldrh	r3, [r7, #6]
 8003142:	4618      	mov	r0, r3
 8003144:	f7fe fdd4 	bl	8001cf0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003148:	bf00      	nop
 800314a:	3708      	adds	r7, #8
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	40013c00 	.word	0x40013c00

08003154 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003154:	b480      	push	{r7}
 8003156:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003158:	4b05      	ldr	r3, [pc, #20]	; (8003170 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a04      	ldr	r2, [pc, #16]	; (8003170 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800315e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003162:	6013      	str	r3, [r2, #0]
}
 8003164:	bf00      	nop
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr
 800316e:	bf00      	nop
 8003170:	40007000 	.word	0x40007000

08003174 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800317a:	2300      	movs	r3, #0
 800317c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800317e:	4b23      	ldr	r3, [pc, #140]	; (800320c <HAL_PWREx_EnableOverDrive+0x98>)
 8003180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003182:	4a22      	ldr	r2, [pc, #136]	; (800320c <HAL_PWREx_EnableOverDrive+0x98>)
 8003184:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003188:	6413      	str	r3, [r2, #64]	; 0x40
 800318a:	4b20      	ldr	r3, [pc, #128]	; (800320c <HAL_PWREx_EnableOverDrive+0x98>)
 800318c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003192:	603b      	str	r3, [r7, #0]
 8003194:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003196:	4b1e      	ldr	r3, [pc, #120]	; (8003210 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a1d      	ldr	r2, [pc, #116]	; (8003210 <HAL_PWREx_EnableOverDrive+0x9c>)
 800319c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031a0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031a2:	f7ff fc7f 	bl	8002aa4 <HAL_GetTick>
 80031a6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80031a8:	e009      	b.n	80031be <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80031aa:	f7ff fc7b 	bl	8002aa4 <HAL_GetTick>
 80031ae:	4602      	mov	r2, r0
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80031b8:	d901      	bls.n	80031be <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e022      	b.n	8003204 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80031be:	4b14      	ldr	r3, [pc, #80]	; (8003210 <HAL_PWREx_EnableOverDrive+0x9c>)
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031ca:	d1ee      	bne.n	80031aa <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80031cc:	4b10      	ldr	r3, [pc, #64]	; (8003210 <HAL_PWREx_EnableOverDrive+0x9c>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a0f      	ldr	r2, [pc, #60]	; (8003210 <HAL_PWREx_EnableOverDrive+0x9c>)
 80031d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031d6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031d8:	f7ff fc64 	bl	8002aa4 <HAL_GetTick>
 80031dc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80031de:	e009      	b.n	80031f4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80031e0:	f7ff fc60 	bl	8002aa4 <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80031ee:	d901      	bls.n	80031f4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80031f0:	2303      	movs	r3, #3
 80031f2:	e007      	b.n	8003204 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80031f4:	4b06      	ldr	r3, [pc, #24]	; (8003210 <HAL_PWREx_EnableOverDrive+0x9c>)
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003200:	d1ee      	bne.n	80031e0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003202:	2300      	movs	r3, #0
}
 8003204:	4618      	mov	r0, r3
 8003206:	3708      	adds	r7, #8
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	40023800 	.word	0x40023800
 8003210:	40007000 	.word	0x40007000

08003214 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b086      	sub	sp, #24
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800321c:	2300      	movs	r3, #0
 800321e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d101      	bne.n	800322a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e291      	b.n	800374e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0301 	and.w	r3, r3, #1
 8003232:	2b00      	cmp	r3, #0
 8003234:	f000 8087 	beq.w	8003346 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003238:	4b96      	ldr	r3, [pc, #600]	; (8003494 <HAL_RCC_OscConfig+0x280>)
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	f003 030c 	and.w	r3, r3, #12
 8003240:	2b04      	cmp	r3, #4
 8003242:	d00c      	beq.n	800325e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003244:	4b93      	ldr	r3, [pc, #588]	; (8003494 <HAL_RCC_OscConfig+0x280>)
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	f003 030c 	and.w	r3, r3, #12
 800324c:	2b08      	cmp	r3, #8
 800324e:	d112      	bne.n	8003276 <HAL_RCC_OscConfig+0x62>
 8003250:	4b90      	ldr	r3, [pc, #576]	; (8003494 <HAL_RCC_OscConfig+0x280>)
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003258:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800325c:	d10b      	bne.n	8003276 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800325e:	4b8d      	ldr	r3, [pc, #564]	; (8003494 <HAL_RCC_OscConfig+0x280>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d06c      	beq.n	8003344 <HAL_RCC_OscConfig+0x130>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d168      	bne.n	8003344 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e26b      	b.n	800374e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800327e:	d106      	bne.n	800328e <HAL_RCC_OscConfig+0x7a>
 8003280:	4b84      	ldr	r3, [pc, #528]	; (8003494 <HAL_RCC_OscConfig+0x280>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a83      	ldr	r2, [pc, #524]	; (8003494 <HAL_RCC_OscConfig+0x280>)
 8003286:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800328a:	6013      	str	r3, [r2, #0]
 800328c:	e02e      	b.n	80032ec <HAL_RCC_OscConfig+0xd8>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d10c      	bne.n	80032b0 <HAL_RCC_OscConfig+0x9c>
 8003296:	4b7f      	ldr	r3, [pc, #508]	; (8003494 <HAL_RCC_OscConfig+0x280>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a7e      	ldr	r2, [pc, #504]	; (8003494 <HAL_RCC_OscConfig+0x280>)
 800329c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032a0:	6013      	str	r3, [r2, #0]
 80032a2:	4b7c      	ldr	r3, [pc, #496]	; (8003494 <HAL_RCC_OscConfig+0x280>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a7b      	ldr	r2, [pc, #492]	; (8003494 <HAL_RCC_OscConfig+0x280>)
 80032a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032ac:	6013      	str	r3, [r2, #0]
 80032ae:	e01d      	b.n	80032ec <HAL_RCC_OscConfig+0xd8>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032b8:	d10c      	bne.n	80032d4 <HAL_RCC_OscConfig+0xc0>
 80032ba:	4b76      	ldr	r3, [pc, #472]	; (8003494 <HAL_RCC_OscConfig+0x280>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a75      	ldr	r2, [pc, #468]	; (8003494 <HAL_RCC_OscConfig+0x280>)
 80032c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032c4:	6013      	str	r3, [r2, #0]
 80032c6:	4b73      	ldr	r3, [pc, #460]	; (8003494 <HAL_RCC_OscConfig+0x280>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a72      	ldr	r2, [pc, #456]	; (8003494 <HAL_RCC_OscConfig+0x280>)
 80032cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032d0:	6013      	str	r3, [r2, #0]
 80032d2:	e00b      	b.n	80032ec <HAL_RCC_OscConfig+0xd8>
 80032d4:	4b6f      	ldr	r3, [pc, #444]	; (8003494 <HAL_RCC_OscConfig+0x280>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a6e      	ldr	r2, [pc, #440]	; (8003494 <HAL_RCC_OscConfig+0x280>)
 80032da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032de:	6013      	str	r3, [r2, #0]
 80032e0:	4b6c      	ldr	r3, [pc, #432]	; (8003494 <HAL_RCC_OscConfig+0x280>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a6b      	ldr	r2, [pc, #428]	; (8003494 <HAL_RCC_OscConfig+0x280>)
 80032e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d013      	beq.n	800331c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f4:	f7ff fbd6 	bl	8002aa4 <HAL_GetTick>
 80032f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032fa:	e008      	b.n	800330e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032fc:	f7ff fbd2 	bl	8002aa4 <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	2b64      	cmp	r3, #100	; 0x64
 8003308:	d901      	bls.n	800330e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e21f      	b.n	800374e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800330e:	4b61      	ldr	r3, [pc, #388]	; (8003494 <HAL_RCC_OscConfig+0x280>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d0f0      	beq.n	80032fc <HAL_RCC_OscConfig+0xe8>
 800331a:	e014      	b.n	8003346 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800331c:	f7ff fbc2 	bl	8002aa4 <HAL_GetTick>
 8003320:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003322:	e008      	b.n	8003336 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003324:	f7ff fbbe 	bl	8002aa4 <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	2b64      	cmp	r3, #100	; 0x64
 8003330:	d901      	bls.n	8003336 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e20b      	b.n	800374e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003336:	4b57      	ldr	r3, [pc, #348]	; (8003494 <HAL_RCC_OscConfig+0x280>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d1f0      	bne.n	8003324 <HAL_RCC_OscConfig+0x110>
 8003342:	e000      	b.n	8003346 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003344:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0302 	and.w	r3, r3, #2
 800334e:	2b00      	cmp	r3, #0
 8003350:	d069      	beq.n	8003426 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003352:	4b50      	ldr	r3, [pc, #320]	; (8003494 <HAL_RCC_OscConfig+0x280>)
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	f003 030c 	and.w	r3, r3, #12
 800335a:	2b00      	cmp	r3, #0
 800335c:	d00b      	beq.n	8003376 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800335e:	4b4d      	ldr	r3, [pc, #308]	; (8003494 <HAL_RCC_OscConfig+0x280>)
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f003 030c 	and.w	r3, r3, #12
 8003366:	2b08      	cmp	r3, #8
 8003368:	d11c      	bne.n	80033a4 <HAL_RCC_OscConfig+0x190>
 800336a:	4b4a      	ldr	r3, [pc, #296]	; (8003494 <HAL_RCC_OscConfig+0x280>)
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d116      	bne.n	80033a4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003376:	4b47      	ldr	r3, [pc, #284]	; (8003494 <HAL_RCC_OscConfig+0x280>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0302 	and.w	r3, r3, #2
 800337e:	2b00      	cmp	r3, #0
 8003380:	d005      	beq.n	800338e <HAL_RCC_OscConfig+0x17a>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	2b01      	cmp	r3, #1
 8003388:	d001      	beq.n	800338e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e1df      	b.n	800374e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800338e:	4b41      	ldr	r3, [pc, #260]	; (8003494 <HAL_RCC_OscConfig+0x280>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	00db      	lsls	r3, r3, #3
 800339c:	493d      	ldr	r1, [pc, #244]	; (8003494 <HAL_RCC_OscConfig+0x280>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033a2:	e040      	b.n	8003426 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d023      	beq.n	80033f4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033ac:	4b39      	ldr	r3, [pc, #228]	; (8003494 <HAL_RCC_OscConfig+0x280>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a38      	ldr	r2, [pc, #224]	; (8003494 <HAL_RCC_OscConfig+0x280>)
 80033b2:	f043 0301 	orr.w	r3, r3, #1
 80033b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b8:	f7ff fb74 	bl	8002aa4 <HAL_GetTick>
 80033bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033be:	e008      	b.n	80033d2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033c0:	f7ff fb70 	bl	8002aa4 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d901      	bls.n	80033d2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e1bd      	b.n	800374e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033d2:	4b30      	ldr	r3, [pc, #192]	; (8003494 <HAL_RCC_OscConfig+0x280>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0302 	and.w	r3, r3, #2
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d0f0      	beq.n	80033c0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033de:	4b2d      	ldr	r3, [pc, #180]	; (8003494 <HAL_RCC_OscConfig+0x280>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	00db      	lsls	r3, r3, #3
 80033ec:	4929      	ldr	r1, [pc, #164]	; (8003494 <HAL_RCC_OscConfig+0x280>)
 80033ee:	4313      	orrs	r3, r2
 80033f0:	600b      	str	r3, [r1, #0]
 80033f2:	e018      	b.n	8003426 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033f4:	4b27      	ldr	r3, [pc, #156]	; (8003494 <HAL_RCC_OscConfig+0x280>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a26      	ldr	r2, [pc, #152]	; (8003494 <HAL_RCC_OscConfig+0x280>)
 80033fa:	f023 0301 	bic.w	r3, r3, #1
 80033fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003400:	f7ff fb50 	bl	8002aa4 <HAL_GetTick>
 8003404:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003406:	e008      	b.n	800341a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003408:	f7ff fb4c 	bl	8002aa4 <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	2b02      	cmp	r3, #2
 8003414:	d901      	bls.n	800341a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e199      	b.n	800374e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800341a:	4b1e      	ldr	r3, [pc, #120]	; (8003494 <HAL_RCC_OscConfig+0x280>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0302 	and.w	r3, r3, #2
 8003422:	2b00      	cmp	r3, #0
 8003424:	d1f0      	bne.n	8003408 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0308 	and.w	r3, r3, #8
 800342e:	2b00      	cmp	r3, #0
 8003430:	d038      	beq.n	80034a4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	695b      	ldr	r3, [r3, #20]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d019      	beq.n	800346e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800343a:	4b16      	ldr	r3, [pc, #88]	; (8003494 <HAL_RCC_OscConfig+0x280>)
 800343c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800343e:	4a15      	ldr	r2, [pc, #84]	; (8003494 <HAL_RCC_OscConfig+0x280>)
 8003440:	f043 0301 	orr.w	r3, r3, #1
 8003444:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003446:	f7ff fb2d 	bl	8002aa4 <HAL_GetTick>
 800344a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800344c:	e008      	b.n	8003460 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800344e:	f7ff fb29 	bl	8002aa4 <HAL_GetTick>
 8003452:	4602      	mov	r2, r0
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	2b02      	cmp	r3, #2
 800345a:	d901      	bls.n	8003460 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800345c:	2303      	movs	r3, #3
 800345e:	e176      	b.n	800374e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003460:	4b0c      	ldr	r3, [pc, #48]	; (8003494 <HAL_RCC_OscConfig+0x280>)
 8003462:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003464:	f003 0302 	and.w	r3, r3, #2
 8003468:	2b00      	cmp	r3, #0
 800346a:	d0f0      	beq.n	800344e <HAL_RCC_OscConfig+0x23a>
 800346c:	e01a      	b.n	80034a4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800346e:	4b09      	ldr	r3, [pc, #36]	; (8003494 <HAL_RCC_OscConfig+0x280>)
 8003470:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003472:	4a08      	ldr	r2, [pc, #32]	; (8003494 <HAL_RCC_OscConfig+0x280>)
 8003474:	f023 0301 	bic.w	r3, r3, #1
 8003478:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800347a:	f7ff fb13 	bl	8002aa4 <HAL_GetTick>
 800347e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003480:	e00a      	b.n	8003498 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003482:	f7ff fb0f 	bl	8002aa4 <HAL_GetTick>
 8003486:	4602      	mov	r2, r0
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	2b02      	cmp	r3, #2
 800348e:	d903      	bls.n	8003498 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003490:	2303      	movs	r3, #3
 8003492:	e15c      	b.n	800374e <HAL_RCC_OscConfig+0x53a>
 8003494:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003498:	4b91      	ldr	r3, [pc, #580]	; (80036e0 <HAL_RCC_OscConfig+0x4cc>)
 800349a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800349c:	f003 0302 	and.w	r3, r3, #2
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d1ee      	bne.n	8003482 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0304 	and.w	r3, r3, #4
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	f000 80a4 	beq.w	80035fa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034b2:	4b8b      	ldr	r3, [pc, #556]	; (80036e0 <HAL_RCC_OscConfig+0x4cc>)
 80034b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d10d      	bne.n	80034da <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80034be:	4b88      	ldr	r3, [pc, #544]	; (80036e0 <HAL_RCC_OscConfig+0x4cc>)
 80034c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c2:	4a87      	ldr	r2, [pc, #540]	; (80036e0 <HAL_RCC_OscConfig+0x4cc>)
 80034c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034c8:	6413      	str	r3, [r2, #64]	; 0x40
 80034ca:	4b85      	ldr	r3, [pc, #532]	; (80036e0 <HAL_RCC_OscConfig+0x4cc>)
 80034cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034d2:	60bb      	str	r3, [r7, #8]
 80034d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034d6:	2301      	movs	r3, #1
 80034d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034da:	4b82      	ldr	r3, [pc, #520]	; (80036e4 <HAL_RCC_OscConfig+0x4d0>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d118      	bne.n	8003518 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80034e6:	4b7f      	ldr	r3, [pc, #508]	; (80036e4 <HAL_RCC_OscConfig+0x4d0>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a7e      	ldr	r2, [pc, #504]	; (80036e4 <HAL_RCC_OscConfig+0x4d0>)
 80034ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034f2:	f7ff fad7 	bl	8002aa4 <HAL_GetTick>
 80034f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034f8:	e008      	b.n	800350c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034fa:	f7ff fad3 	bl	8002aa4 <HAL_GetTick>
 80034fe:	4602      	mov	r2, r0
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	2b64      	cmp	r3, #100	; 0x64
 8003506:	d901      	bls.n	800350c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	e120      	b.n	800374e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800350c:	4b75      	ldr	r3, [pc, #468]	; (80036e4 <HAL_RCC_OscConfig+0x4d0>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003514:	2b00      	cmp	r3, #0
 8003516:	d0f0      	beq.n	80034fa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	2b01      	cmp	r3, #1
 800351e:	d106      	bne.n	800352e <HAL_RCC_OscConfig+0x31a>
 8003520:	4b6f      	ldr	r3, [pc, #444]	; (80036e0 <HAL_RCC_OscConfig+0x4cc>)
 8003522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003524:	4a6e      	ldr	r2, [pc, #440]	; (80036e0 <HAL_RCC_OscConfig+0x4cc>)
 8003526:	f043 0301 	orr.w	r3, r3, #1
 800352a:	6713      	str	r3, [r2, #112]	; 0x70
 800352c:	e02d      	b.n	800358a <HAL_RCC_OscConfig+0x376>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d10c      	bne.n	8003550 <HAL_RCC_OscConfig+0x33c>
 8003536:	4b6a      	ldr	r3, [pc, #424]	; (80036e0 <HAL_RCC_OscConfig+0x4cc>)
 8003538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800353a:	4a69      	ldr	r2, [pc, #420]	; (80036e0 <HAL_RCC_OscConfig+0x4cc>)
 800353c:	f023 0301 	bic.w	r3, r3, #1
 8003540:	6713      	str	r3, [r2, #112]	; 0x70
 8003542:	4b67      	ldr	r3, [pc, #412]	; (80036e0 <HAL_RCC_OscConfig+0x4cc>)
 8003544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003546:	4a66      	ldr	r2, [pc, #408]	; (80036e0 <HAL_RCC_OscConfig+0x4cc>)
 8003548:	f023 0304 	bic.w	r3, r3, #4
 800354c:	6713      	str	r3, [r2, #112]	; 0x70
 800354e:	e01c      	b.n	800358a <HAL_RCC_OscConfig+0x376>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	2b05      	cmp	r3, #5
 8003556:	d10c      	bne.n	8003572 <HAL_RCC_OscConfig+0x35e>
 8003558:	4b61      	ldr	r3, [pc, #388]	; (80036e0 <HAL_RCC_OscConfig+0x4cc>)
 800355a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800355c:	4a60      	ldr	r2, [pc, #384]	; (80036e0 <HAL_RCC_OscConfig+0x4cc>)
 800355e:	f043 0304 	orr.w	r3, r3, #4
 8003562:	6713      	str	r3, [r2, #112]	; 0x70
 8003564:	4b5e      	ldr	r3, [pc, #376]	; (80036e0 <HAL_RCC_OscConfig+0x4cc>)
 8003566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003568:	4a5d      	ldr	r2, [pc, #372]	; (80036e0 <HAL_RCC_OscConfig+0x4cc>)
 800356a:	f043 0301 	orr.w	r3, r3, #1
 800356e:	6713      	str	r3, [r2, #112]	; 0x70
 8003570:	e00b      	b.n	800358a <HAL_RCC_OscConfig+0x376>
 8003572:	4b5b      	ldr	r3, [pc, #364]	; (80036e0 <HAL_RCC_OscConfig+0x4cc>)
 8003574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003576:	4a5a      	ldr	r2, [pc, #360]	; (80036e0 <HAL_RCC_OscConfig+0x4cc>)
 8003578:	f023 0301 	bic.w	r3, r3, #1
 800357c:	6713      	str	r3, [r2, #112]	; 0x70
 800357e:	4b58      	ldr	r3, [pc, #352]	; (80036e0 <HAL_RCC_OscConfig+0x4cc>)
 8003580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003582:	4a57      	ldr	r2, [pc, #348]	; (80036e0 <HAL_RCC_OscConfig+0x4cc>)
 8003584:	f023 0304 	bic.w	r3, r3, #4
 8003588:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d015      	beq.n	80035be <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003592:	f7ff fa87 	bl	8002aa4 <HAL_GetTick>
 8003596:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003598:	e00a      	b.n	80035b0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800359a:	f7ff fa83 	bl	8002aa4 <HAL_GetTick>
 800359e:	4602      	mov	r2, r0
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d901      	bls.n	80035b0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	e0ce      	b.n	800374e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035b0:	4b4b      	ldr	r3, [pc, #300]	; (80036e0 <HAL_RCC_OscConfig+0x4cc>)
 80035b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035b4:	f003 0302 	and.w	r3, r3, #2
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d0ee      	beq.n	800359a <HAL_RCC_OscConfig+0x386>
 80035bc:	e014      	b.n	80035e8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035be:	f7ff fa71 	bl	8002aa4 <HAL_GetTick>
 80035c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035c4:	e00a      	b.n	80035dc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035c6:	f7ff fa6d 	bl	8002aa4 <HAL_GetTick>
 80035ca:	4602      	mov	r2, r0
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d901      	bls.n	80035dc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80035d8:	2303      	movs	r3, #3
 80035da:	e0b8      	b.n	800374e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035dc:	4b40      	ldr	r3, [pc, #256]	; (80036e0 <HAL_RCC_OscConfig+0x4cc>)
 80035de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e0:	f003 0302 	and.w	r3, r3, #2
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d1ee      	bne.n	80035c6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80035e8:	7dfb      	ldrb	r3, [r7, #23]
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d105      	bne.n	80035fa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035ee:	4b3c      	ldr	r3, [pc, #240]	; (80036e0 <HAL_RCC_OscConfig+0x4cc>)
 80035f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f2:	4a3b      	ldr	r2, [pc, #236]	; (80036e0 <HAL_RCC_OscConfig+0x4cc>)
 80035f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035f8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	699b      	ldr	r3, [r3, #24]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	f000 80a4 	beq.w	800374c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003604:	4b36      	ldr	r3, [pc, #216]	; (80036e0 <HAL_RCC_OscConfig+0x4cc>)
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f003 030c 	and.w	r3, r3, #12
 800360c:	2b08      	cmp	r3, #8
 800360e:	d06b      	beq.n	80036e8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	699b      	ldr	r3, [r3, #24]
 8003614:	2b02      	cmp	r3, #2
 8003616:	d149      	bne.n	80036ac <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003618:	4b31      	ldr	r3, [pc, #196]	; (80036e0 <HAL_RCC_OscConfig+0x4cc>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a30      	ldr	r2, [pc, #192]	; (80036e0 <HAL_RCC_OscConfig+0x4cc>)
 800361e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003622:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003624:	f7ff fa3e 	bl	8002aa4 <HAL_GetTick>
 8003628:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800362a:	e008      	b.n	800363e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800362c:	f7ff fa3a 	bl	8002aa4 <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	2b02      	cmp	r3, #2
 8003638:	d901      	bls.n	800363e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e087      	b.n	800374e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800363e:	4b28      	ldr	r3, [pc, #160]	; (80036e0 <HAL_RCC_OscConfig+0x4cc>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d1f0      	bne.n	800362c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	69da      	ldr	r2, [r3, #28]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a1b      	ldr	r3, [r3, #32]
 8003652:	431a      	orrs	r2, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003658:	019b      	lsls	r3, r3, #6
 800365a:	431a      	orrs	r2, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003660:	085b      	lsrs	r3, r3, #1
 8003662:	3b01      	subs	r3, #1
 8003664:	041b      	lsls	r3, r3, #16
 8003666:	431a      	orrs	r2, r3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800366c:	061b      	lsls	r3, r3, #24
 800366e:	4313      	orrs	r3, r2
 8003670:	4a1b      	ldr	r2, [pc, #108]	; (80036e0 <HAL_RCC_OscConfig+0x4cc>)
 8003672:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003676:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003678:	4b19      	ldr	r3, [pc, #100]	; (80036e0 <HAL_RCC_OscConfig+0x4cc>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a18      	ldr	r2, [pc, #96]	; (80036e0 <HAL_RCC_OscConfig+0x4cc>)
 800367e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003682:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003684:	f7ff fa0e 	bl	8002aa4 <HAL_GetTick>
 8003688:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800368a:	e008      	b.n	800369e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800368c:	f7ff fa0a 	bl	8002aa4 <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	2b02      	cmp	r3, #2
 8003698:	d901      	bls.n	800369e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e057      	b.n	800374e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800369e:	4b10      	ldr	r3, [pc, #64]	; (80036e0 <HAL_RCC_OscConfig+0x4cc>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d0f0      	beq.n	800368c <HAL_RCC_OscConfig+0x478>
 80036aa:	e04f      	b.n	800374c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036ac:	4b0c      	ldr	r3, [pc, #48]	; (80036e0 <HAL_RCC_OscConfig+0x4cc>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a0b      	ldr	r2, [pc, #44]	; (80036e0 <HAL_RCC_OscConfig+0x4cc>)
 80036b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036b8:	f7ff f9f4 	bl	8002aa4 <HAL_GetTick>
 80036bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036be:	e008      	b.n	80036d2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036c0:	f7ff f9f0 	bl	8002aa4 <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d901      	bls.n	80036d2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e03d      	b.n	800374e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036d2:	4b03      	ldr	r3, [pc, #12]	; (80036e0 <HAL_RCC_OscConfig+0x4cc>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d1f0      	bne.n	80036c0 <HAL_RCC_OscConfig+0x4ac>
 80036de:	e035      	b.n	800374c <HAL_RCC_OscConfig+0x538>
 80036e0:	40023800 	.word	0x40023800
 80036e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80036e8:	4b1b      	ldr	r3, [pc, #108]	; (8003758 <HAL_RCC_OscConfig+0x544>)
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d028      	beq.n	8003748 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003700:	429a      	cmp	r2, r3
 8003702:	d121      	bne.n	8003748 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800370e:	429a      	cmp	r2, r3
 8003710:	d11a      	bne.n	8003748 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003712:	68fa      	ldr	r2, [r7, #12]
 8003714:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003718:	4013      	ands	r3, r2
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800371e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003720:	4293      	cmp	r3, r2
 8003722:	d111      	bne.n	8003748 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800372e:	085b      	lsrs	r3, r3, #1
 8003730:	3b01      	subs	r3, #1
 8003732:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003734:	429a      	cmp	r2, r3
 8003736:	d107      	bne.n	8003748 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003742:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003744:	429a      	cmp	r2, r3
 8003746:	d001      	beq.n	800374c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e000      	b.n	800374e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800374c:	2300      	movs	r3, #0
}
 800374e:	4618      	mov	r0, r3
 8003750:	3718      	adds	r7, #24
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	40023800 	.word	0x40023800

0800375c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003766:	2300      	movs	r3, #0
 8003768:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d101      	bne.n	8003774 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e0d0      	b.n	8003916 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003774:	4b6a      	ldr	r3, [pc, #424]	; (8003920 <HAL_RCC_ClockConfig+0x1c4>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 030f 	and.w	r3, r3, #15
 800377c:	683a      	ldr	r2, [r7, #0]
 800377e:	429a      	cmp	r2, r3
 8003780:	d910      	bls.n	80037a4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003782:	4b67      	ldr	r3, [pc, #412]	; (8003920 <HAL_RCC_ClockConfig+0x1c4>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f023 020f 	bic.w	r2, r3, #15
 800378a:	4965      	ldr	r1, [pc, #404]	; (8003920 <HAL_RCC_ClockConfig+0x1c4>)
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	4313      	orrs	r3, r2
 8003790:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003792:	4b63      	ldr	r3, [pc, #396]	; (8003920 <HAL_RCC_ClockConfig+0x1c4>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 030f 	and.w	r3, r3, #15
 800379a:	683a      	ldr	r2, [r7, #0]
 800379c:	429a      	cmp	r2, r3
 800379e:	d001      	beq.n	80037a4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e0b8      	b.n	8003916 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0302 	and.w	r3, r3, #2
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d020      	beq.n	80037f2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0304 	and.w	r3, r3, #4
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d005      	beq.n	80037c8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037bc:	4b59      	ldr	r3, [pc, #356]	; (8003924 <HAL_RCC_ClockConfig+0x1c8>)
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	4a58      	ldr	r2, [pc, #352]	; (8003924 <HAL_RCC_ClockConfig+0x1c8>)
 80037c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80037c6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0308 	and.w	r3, r3, #8
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d005      	beq.n	80037e0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037d4:	4b53      	ldr	r3, [pc, #332]	; (8003924 <HAL_RCC_ClockConfig+0x1c8>)
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	4a52      	ldr	r2, [pc, #328]	; (8003924 <HAL_RCC_ClockConfig+0x1c8>)
 80037da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80037de:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037e0:	4b50      	ldr	r3, [pc, #320]	; (8003924 <HAL_RCC_ClockConfig+0x1c8>)
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	494d      	ldr	r1, [pc, #308]	; (8003924 <HAL_RCC_ClockConfig+0x1c8>)
 80037ee:	4313      	orrs	r3, r2
 80037f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0301 	and.w	r3, r3, #1
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d040      	beq.n	8003880 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	2b01      	cmp	r3, #1
 8003804:	d107      	bne.n	8003816 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003806:	4b47      	ldr	r3, [pc, #284]	; (8003924 <HAL_RCC_ClockConfig+0x1c8>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d115      	bne.n	800383e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e07f      	b.n	8003916 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	2b02      	cmp	r3, #2
 800381c:	d107      	bne.n	800382e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800381e:	4b41      	ldr	r3, [pc, #260]	; (8003924 <HAL_RCC_ClockConfig+0x1c8>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d109      	bne.n	800383e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e073      	b.n	8003916 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800382e:	4b3d      	ldr	r3, [pc, #244]	; (8003924 <HAL_RCC_ClockConfig+0x1c8>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0302 	and.w	r3, r3, #2
 8003836:	2b00      	cmp	r3, #0
 8003838:	d101      	bne.n	800383e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e06b      	b.n	8003916 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800383e:	4b39      	ldr	r3, [pc, #228]	; (8003924 <HAL_RCC_ClockConfig+0x1c8>)
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	f023 0203 	bic.w	r2, r3, #3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	4936      	ldr	r1, [pc, #216]	; (8003924 <HAL_RCC_ClockConfig+0x1c8>)
 800384c:	4313      	orrs	r3, r2
 800384e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003850:	f7ff f928 	bl	8002aa4 <HAL_GetTick>
 8003854:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003856:	e00a      	b.n	800386e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003858:	f7ff f924 	bl	8002aa4 <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	f241 3288 	movw	r2, #5000	; 0x1388
 8003866:	4293      	cmp	r3, r2
 8003868:	d901      	bls.n	800386e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e053      	b.n	8003916 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800386e:	4b2d      	ldr	r3, [pc, #180]	; (8003924 <HAL_RCC_ClockConfig+0x1c8>)
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	f003 020c 	and.w	r2, r3, #12
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	429a      	cmp	r2, r3
 800387e:	d1eb      	bne.n	8003858 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003880:	4b27      	ldr	r3, [pc, #156]	; (8003920 <HAL_RCC_ClockConfig+0x1c4>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 030f 	and.w	r3, r3, #15
 8003888:	683a      	ldr	r2, [r7, #0]
 800388a:	429a      	cmp	r2, r3
 800388c:	d210      	bcs.n	80038b0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800388e:	4b24      	ldr	r3, [pc, #144]	; (8003920 <HAL_RCC_ClockConfig+0x1c4>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f023 020f 	bic.w	r2, r3, #15
 8003896:	4922      	ldr	r1, [pc, #136]	; (8003920 <HAL_RCC_ClockConfig+0x1c4>)
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	4313      	orrs	r3, r2
 800389c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800389e:	4b20      	ldr	r3, [pc, #128]	; (8003920 <HAL_RCC_ClockConfig+0x1c4>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 030f 	and.w	r3, r3, #15
 80038a6:	683a      	ldr	r2, [r7, #0]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d001      	beq.n	80038b0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e032      	b.n	8003916 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0304 	and.w	r3, r3, #4
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d008      	beq.n	80038ce <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038bc:	4b19      	ldr	r3, [pc, #100]	; (8003924 <HAL_RCC_ClockConfig+0x1c8>)
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	4916      	ldr	r1, [pc, #88]	; (8003924 <HAL_RCC_ClockConfig+0x1c8>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0308 	and.w	r3, r3, #8
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d009      	beq.n	80038ee <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80038da:	4b12      	ldr	r3, [pc, #72]	; (8003924 <HAL_RCC_ClockConfig+0x1c8>)
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	00db      	lsls	r3, r3, #3
 80038e8:	490e      	ldr	r1, [pc, #56]	; (8003924 <HAL_RCC_ClockConfig+0x1c8>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80038ee:	f000 f821 	bl	8003934 <HAL_RCC_GetSysClockFreq>
 80038f2:	4601      	mov	r1, r0
 80038f4:	4b0b      	ldr	r3, [pc, #44]	; (8003924 <HAL_RCC_ClockConfig+0x1c8>)
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	091b      	lsrs	r3, r3, #4
 80038fa:	f003 030f 	and.w	r3, r3, #15
 80038fe:	4a0a      	ldr	r2, [pc, #40]	; (8003928 <HAL_RCC_ClockConfig+0x1cc>)
 8003900:	5cd3      	ldrb	r3, [r2, r3]
 8003902:	fa21 f303 	lsr.w	r3, r1, r3
 8003906:	4a09      	ldr	r2, [pc, #36]	; (800392c <HAL_RCC_ClockConfig+0x1d0>)
 8003908:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800390a:	4b09      	ldr	r3, [pc, #36]	; (8003930 <HAL_RCC_ClockConfig+0x1d4>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4618      	mov	r0, r3
 8003910:	f7ff f884 	bl	8002a1c <HAL_InitTick>

  return HAL_OK;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3710      	adds	r7, #16
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	40023c00 	.word	0x40023c00
 8003924:	40023800 	.word	0x40023800
 8003928:	08006c5c 	.word	0x08006c5c
 800392c:	20000018 	.word	0x20000018
 8003930:	2000001c 	.word	0x2000001c

08003934 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003934:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003936:	b085      	sub	sp, #20
 8003938:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800393a:	2300      	movs	r3, #0
 800393c:	607b      	str	r3, [r7, #4]
 800393e:	2300      	movs	r3, #0
 8003940:	60fb      	str	r3, [r7, #12]
 8003942:	2300      	movs	r3, #0
 8003944:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003946:	2300      	movs	r3, #0
 8003948:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800394a:	4b63      	ldr	r3, [pc, #396]	; (8003ad8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	f003 030c 	and.w	r3, r3, #12
 8003952:	2b04      	cmp	r3, #4
 8003954:	d007      	beq.n	8003966 <HAL_RCC_GetSysClockFreq+0x32>
 8003956:	2b08      	cmp	r3, #8
 8003958:	d008      	beq.n	800396c <HAL_RCC_GetSysClockFreq+0x38>
 800395a:	2b00      	cmp	r3, #0
 800395c:	f040 80b4 	bne.w	8003ac8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003960:	4b5e      	ldr	r3, [pc, #376]	; (8003adc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003962:	60bb      	str	r3, [r7, #8]
      break;
 8003964:	e0b3      	b.n	8003ace <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003966:	4b5e      	ldr	r3, [pc, #376]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003968:	60bb      	str	r3, [r7, #8]
      break;
 800396a:	e0b0      	b.n	8003ace <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800396c:	4b5a      	ldr	r3, [pc, #360]	; (8003ad8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003974:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003976:	4b58      	ldr	r3, [pc, #352]	; (8003ad8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d04a      	beq.n	8003a18 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003982:	4b55      	ldr	r3, [pc, #340]	; (8003ad8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	099b      	lsrs	r3, r3, #6
 8003988:	f04f 0400 	mov.w	r4, #0
 800398c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003990:	f04f 0200 	mov.w	r2, #0
 8003994:	ea03 0501 	and.w	r5, r3, r1
 8003998:	ea04 0602 	and.w	r6, r4, r2
 800399c:	4629      	mov	r1, r5
 800399e:	4632      	mov	r2, r6
 80039a0:	f04f 0300 	mov.w	r3, #0
 80039a4:	f04f 0400 	mov.w	r4, #0
 80039a8:	0154      	lsls	r4, r2, #5
 80039aa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80039ae:	014b      	lsls	r3, r1, #5
 80039b0:	4619      	mov	r1, r3
 80039b2:	4622      	mov	r2, r4
 80039b4:	1b49      	subs	r1, r1, r5
 80039b6:	eb62 0206 	sbc.w	r2, r2, r6
 80039ba:	f04f 0300 	mov.w	r3, #0
 80039be:	f04f 0400 	mov.w	r4, #0
 80039c2:	0194      	lsls	r4, r2, #6
 80039c4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80039c8:	018b      	lsls	r3, r1, #6
 80039ca:	1a5b      	subs	r3, r3, r1
 80039cc:	eb64 0402 	sbc.w	r4, r4, r2
 80039d0:	f04f 0100 	mov.w	r1, #0
 80039d4:	f04f 0200 	mov.w	r2, #0
 80039d8:	00e2      	lsls	r2, r4, #3
 80039da:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80039de:	00d9      	lsls	r1, r3, #3
 80039e0:	460b      	mov	r3, r1
 80039e2:	4614      	mov	r4, r2
 80039e4:	195b      	adds	r3, r3, r5
 80039e6:	eb44 0406 	adc.w	r4, r4, r6
 80039ea:	f04f 0100 	mov.w	r1, #0
 80039ee:	f04f 0200 	mov.w	r2, #0
 80039f2:	0262      	lsls	r2, r4, #9
 80039f4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80039f8:	0259      	lsls	r1, r3, #9
 80039fa:	460b      	mov	r3, r1
 80039fc:	4614      	mov	r4, r2
 80039fe:	4618      	mov	r0, r3
 8003a00:	4621      	mov	r1, r4
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f04f 0400 	mov.w	r4, #0
 8003a08:	461a      	mov	r2, r3
 8003a0a:	4623      	mov	r3, r4
 8003a0c:	f7fd f842 	bl	8000a94 <__aeabi_uldivmod>
 8003a10:	4603      	mov	r3, r0
 8003a12:	460c      	mov	r4, r1
 8003a14:	60fb      	str	r3, [r7, #12]
 8003a16:	e049      	b.n	8003aac <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a18:	4b2f      	ldr	r3, [pc, #188]	; (8003ad8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	099b      	lsrs	r3, r3, #6
 8003a1e:	f04f 0400 	mov.w	r4, #0
 8003a22:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003a26:	f04f 0200 	mov.w	r2, #0
 8003a2a:	ea03 0501 	and.w	r5, r3, r1
 8003a2e:	ea04 0602 	and.w	r6, r4, r2
 8003a32:	4629      	mov	r1, r5
 8003a34:	4632      	mov	r2, r6
 8003a36:	f04f 0300 	mov.w	r3, #0
 8003a3a:	f04f 0400 	mov.w	r4, #0
 8003a3e:	0154      	lsls	r4, r2, #5
 8003a40:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003a44:	014b      	lsls	r3, r1, #5
 8003a46:	4619      	mov	r1, r3
 8003a48:	4622      	mov	r2, r4
 8003a4a:	1b49      	subs	r1, r1, r5
 8003a4c:	eb62 0206 	sbc.w	r2, r2, r6
 8003a50:	f04f 0300 	mov.w	r3, #0
 8003a54:	f04f 0400 	mov.w	r4, #0
 8003a58:	0194      	lsls	r4, r2, #6
 8003a5a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003a5e:	018b      	lsls	r3, r1, #6
 8003a60:	1a5b      	subs	r3, r3, r1
 8003a62:	eb64 0402 	sbc.w	r4, r4, r2
 8003a66:	f04f 0100 	mov.w	r1, #0
 8003a6a:	f04f 0200 	mov.w	r2, #0
 8003a6e:	00e2      	lsls	r2, r4, #3
 8003a70:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003a74:	00d9      	lsls	r1, r3, #3
 8003a76:	460b      	mov	r3, r1
 8003a78:	4614      	mov	r4, r2
 8003a7a:	195b      	adds	r3, r3, r5
 8003a7c:	eb44 0406 	adc.w	r4, r4, r6
 8003a80:	f04f 0100 	mov.w	r1, #0
 8003a84:	f04f 0200 	mov.w	r2, #0
 8003a88:	02a2      	lsls	r2, r4, #10
 8003a8a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003a8e:	0299      	lsls	r1, r3, #10
 8003a90:	460b      	mov	r3, r1
 8003a92:	4614      	mov	r4, r2
 8003a94:	4618      	mov	r0, r3
 8003a96:	4621      	mov	r1, r4
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f04f 0400 	mov.w	r4, #0
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	4623      	mov	r3, r4
 8003aa2:	f7fc fff7 	bl	8000a94 <__aeabi_uldivmod>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	460c      	mov	r4, r1
 8003aaa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003aac:	4b0a      	ldr	r3, [pc, #40]	; (8003ad8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	0c1b      	lsrs	r3, r3, #16
 8003ab2:	f003 0303 	and.w	r3, r3, #3
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	005b      	lsls	r3, r3, #1
 8003aba:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003abc:	68fa      	ldr	r2, [r7, #12]
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ac4:	60bb      	str	r3, [r7, #8]
      break;
 8003ac6:	e002      	b.n	8003ace <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ac8:	4b04      	ldr	r3, [pc, #16]	; (8003adc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003aca:	60bb      	str	r3, [r7, #8]
      break;
 8003acc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ace:	68bb      	ldr	r3, [r7, #8]
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3714      	adds	r7, #20
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ad8:	40023800 	.word	0x40023800
 8003adc:	00f42400 	.word	0x00f42400
 8003ae0:	007a1200 	.word	0x007a1200

08003ae4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ae8:	4b03      	ldr	r3, [pc, #12]	; (8003af8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003aea:	681b      	ldr	r3, [r3, #0]
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop
 8003af8:	20000018 	.word	0x20000018

08003afc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b00:	f7ff fff0 	bl	8003ae4 <HAL_RCC_GetHCLKFreq>
 8003b04:	4601      	mov	r1, r0
 8003b06:	4b05      	ldr	r3, [pc, #20]	; (8003b1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	0a9b      	lsrs	r3, r3, #10
 8003b0c:	f003 0307 	and.w	r3, r3, #7
 8003b10:	4a03      	ldr	r2, [pc, #12]	; (8003b20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b12:	5cd3      	ldrb	r3, [r2, r3]
 8003b14:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	40023800 	.word	0x40023800
 8003b20:	08006c6c 	.word	0x08006c6c

08003b24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b28:	f7ff ffdc 	bl	8003ae4 <HAL_RCC_GetHCLKFreq>
 8003b2c:	4601      	mov	r1, r0
 8003b2e:	4b05      	ldr	r3, [pc, #20]	; (8003b44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	0b5b      	lsrs	r3, r3, #13
 8003b34:	f003 0307 	and.w	r3, r3, #7
 8003b38:	4a03      	ldr	r2, [pc, #12]	; (8003b48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b3a:	5cd3      	ldrb	r3, [r2, r3]
 8003b3c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	40023800 	.word	0x40023800
 8003b48:	08006c6c 	.word	0x08006c6c

08003b4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b088      	sub	sp, #32
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003b54:	2300      	movs	r3, #0
 8003b56:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003b60:	2300      	movs	r3, #0
 8003b62:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003b64:	2300      	movs	r3, #0
 8003b66:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0301 	and.w	r3, r3, #1
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d012      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003b74:	4b69      	ldr	r3, [pc, #420]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	4a68      	ldr	r2, [pc, #416]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b7a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003b7e:	6093      	str	r3, [r2, #8]
 8003b80:	4b66      	ldr	r3, [pc, #408]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b82:	689a      	ldr	r2, [r3, #8]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b88:	4964      	ldr	r1, [pc, #400]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d101      	bne.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003b96:	2301      	movs	r3, #1
 8003b98:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d017      	beq.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ba6:	4b5d      	ldr	r3, [pc, #372]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ba8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bb4:	4959      	ldr	r1, [pc, #356]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bc0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bc4:	d101      	bne.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d101      	bne.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d017      	beq.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003be2:	4b4e      	ldr	r3, [pc, #312]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003be4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003be8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf0:	494a      	ldr	r1, [pc, #296]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c00:	d101      	bne.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003c02:	2301      	movs	r3, #1
 8003c04:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d101      	bne.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d001      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0320 	and.w	r3, r3, #32
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	f000 808b 	beq.w	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c30:	4b3a      	ldr	r3, [pc, #232]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c34:	4a39      	ldr	r2, [pc, #228]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c3a:	6413      	str	r3, [r2, #64]	; 0x40
 8003c3c:	4b37      	ldr	r3, [pc, #220]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c44:	60bb      	str	r3, [r7, #8]
 8003c46:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003c48:	4b35      	ldr	r3, [pc, #212]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a34      	ldr	r2, [pc, #208]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003c4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c54:	f7fe ff26 	bl	8002aa4 <HAL_GetTick>
 8003c58:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003c5a:	e008      	b.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c5c:	f7fe ff22 	bl	8002aa4 <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	2b64      	cmp	r3, #100	; 0x64
 8003c68:	d901      	bls.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e355      	b.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003c6e:	4b2c      	ldr	r3, [pc, #176]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d0f0      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c7a:	4b28      	ldr	r3, [pc, #160]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c82:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d035      	beq.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c92:	693a      	ldr	r2, [r7, #16]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d02e      	beq.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c98:	4b20      	ldr	r3, [pc, #128]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ca0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ca2:	4b1e      	ldr	r3, [pc, #120]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ca6:	4a1d      	ldr	r2, [pc, #116]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ca8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cac:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003cae:	4b1b      	ldr	r3, [pc, #108]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cb2:	4a1a      	ldr	r2, [pc, #104]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cb8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003cba:	4a18      	ldr	r2, [pc, #96]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003cc0:	4b16      	ldr	r3, [pc, #88]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cc4:	f003 0301 	and.w	r3, r3, #1
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d114      	bne.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ccc:	f7fe feea 	bl	8002aa4 <HAL_GetTick>
 8003cd0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cd2:	e00a      	b.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cd4:	f7fe fee6 	bl	8002aa4 <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d901      	bls.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e317      	b.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cea:	4b0c      	ldr	r3, [pc, #48]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d0ee      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cfe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d02:	d111      	bne.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003d04:	4b05      	ldr	r3, [pc, #20]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003d10:	4b04      	ldr	r3, [pc, #16]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003d12:	400b      	ands	r3, r1
 8003d14:	4901      	ldr	r1, [pc, #4]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d16:	4313      	orrs	r3, r2
 8003d18:	608b      	str	r3, [r1, #8]
 8003d1a:	e00b      	b.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003d1c:	40023800 	.word	0x40023800
 8003d20:	40007000 	.word	0x40007000
 8003d24:	0ffffcff 	.word	0x0ffffcff
 8003d28:	4bb0      	ldr	r3, [pc, #704]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	4aaf      	ldr	r2, [pc, #700]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003d2e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003d32:	6093      	str	r3, [r2, #8]
 8003d34:	4bad      	ldr	r3, [pc, #692]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003d36:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d40:	49aa      	ldr	r1, [pc, #680]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003d42:	4313      	orrs	r3, r2
 8003d44:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0310 	and.w	r3, r3, #16
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d010      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003d52:	4ba6      	ldr	r3, [pc, #664]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003d54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d58:	4aa4      	ldr	r2, [pc, #656]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003d5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d5e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003d62:	4ba2      	ldr	r3, [pc, #648]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003d64:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d6c:	499f      	ldr	r1, [pc, #636]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d00a      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d80:	4b9a      	ldr	r3, [pc, #616]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d86:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d8e:	4997      	ldr	r1, [pc, #604]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d00a      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003da2:	4b92      	ldr	r3, [pc, #584]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003da8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003db0:	498e      	ldr	r1, [pc, #568]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003db2:	4313      	orrs	r3, r2
 8003db4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d00a      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003dc4:	4b89      	ldr	r3, [pc, #548]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dd2:	4986      	ldr	r1, [pc, #536]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d00a      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003de6:	4b81      	ldr	r3, [pc, #516]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dec:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df4:	497d      	ldr	r1, [pc, #500]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003df6:	4313      	orrs	r3, r2
 8003df8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d00a      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e08:	4b78      	ldr	r3, [pc, #480]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e0e:	f023 0203 	bic.w	r2, r3, #3
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e16:	4975      	ldr	r1, [pc, #468]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d00a      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e2a:	4b70      	ldr	r3, [pc, #448]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e30:	f023 020c 	bic.w	r2, r3, #12
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e38:	496c      	ldr	r1, [pc, #432]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d00a      	beq.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e4c:	4b67      	ldr	r3, [pc, #412]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e52:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e5a:	4964      	ldr	r1, [pc, #400]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d00a      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e6e:	4b5f      	ldr	r3, [pc, #380]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e74:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e7c:	495b      	ldr	r1, [pc, #364]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d00a      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e90:	4b56      	ldr	r3, [pc, #344]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e96:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e9e:	4953      	ldr	r1, [pc, #332]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d00a      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003eb2:	4b4e      	ldr	r3, [pc, #312]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eb8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ec0:	494a      	ldr	r1, [pc, #296]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d00a      	beq.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003ed4:	4b45      	ldr	r3, [pc, #276]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eda:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ee2:	4942      	ldr	r1, [pc, #264]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d00a      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003ef6:	4b3d      	ldr	r3, [pc, #244]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003efc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f04:	4939      	ldr	r1, [pc, #228]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d00a      	beq.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003f18:	4b34      	ldr	r3, [pc, #208]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f1e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f26:	4931      	ldr	r1, [pc, #196]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d011      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003f3a:	4b2c      	ldr	r3, [pc, #176]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003f3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f40:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f48:	4928      	ldr	r1, [pc, #160]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f58:	d101      	bne.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0308 	and.w	r3, r3, #8
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d001      	beq.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d00a      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f7a:	4b1c      	ldr	r3, [pc, #112]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f80:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f88:	4918      	ldr	r1, [pc, #96]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d00b      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003f9c:	4b13      	ldr	r3, [pc, #76]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fa2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fac:	490f      	ldr	r1, [pc, #60]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003fb4:	69fb      	ldr	r3, [r7, #28]
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d005      	beq.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003fc2:	f040 80d8 	bne.w	8004176 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003fc6:	4b09      	ldr	r3, [pc, #36]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a08      	ldr	r2, [pc, #32]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003fcc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003fd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fd2:	f7fe fd67 	bl	8002aa4 <HAL_GetTick>
 8003fd6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003fd8:	e00a      	b.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003fda:	f7fe fd63 	bl	8002aa4 <HAL_GetTick>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	2b64      	cmp	r3, #100	; 0x64
 8003fe6:	d903      	bls.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e196      	b.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8003fec:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ff0:	4b6c      	ldr	r3, [pc, #432]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d1ee      	bne.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0301 	and.w	r3, r3, #1
 8004004:	2b00      	cmp	r3, #0
 8004006:	d021      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x500>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800400c:	2b00      	cmp	r3, #0
 800400e:	d11d      	bne.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004010:	4b64      	ldr	r3, [pc, #400]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004012:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004016:	0c1b      	lsrs	r3, r3, #16
 8004018:	f003 0303 	and.w	r3, r3, #3
 800401c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800401e:	4b61      	ldr	r3, [pc, #388]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004020:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004024:	0e1b      	lsrs	r3, r3, #24
 8004026:	f003 030f 	and.w	r3, r3, #15
 800402a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	019a      	lsls	r2, r3, #6
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	041b      	lsls	r3, r3, #16
 8004036:	431a      	orrs	r2, r3
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	061b      	lsls	r3, r3, #24
 800403c:	431a      	orrs	r2, r3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	071b      	lsls	r3, r3, #28
 8004044:	4957      	ldr	r1, [pc, #348]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004046:	4313      	orrs	r3, r2
 8004048:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d004      	beq.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x516>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800405c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004060:	d00a      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800406a:	2b00      	cmp	r3, #0
 800406c:	d02e      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004072:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004076:	d129      	bne.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004078:	4b4a      	ldr	r3, [pc, #296]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800407a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800407e:	0c1b      	lsrs	r3, r3, #16
 8004080:	f003 0303 	and.w	r3, r3, #3
 8004084:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004086:	4b47      	ldr	r3, [pc, #284]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004088:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800408c:	0f1b      	lsrs	r3, r3, #28
 800408e:	f003 0307 	and.w	r3, r3, #7
 8004092:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	019a      	lsls	r2, r3, #6
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	041b      	lsls	r3, r3, #16
 800409e:	431a      	orrs	r2, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	061b      	lsls	r3, r3, #24
 80040a6:	431a      	orrs	r2, r3
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	071b      	lsls	r3, r3, #28
 80040ac:	493d      	ldr	r1, [pc, #244]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80040b4:	4b3b      	ldr	r3, [pc, #236]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80040b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040ba:	f023 021f 	bic.w	r2, r3, #31
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c2:	3b01      	subs	r3, #1
 80040c4:	4937      	ldr	r1, [pc, #220]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80040c6:	4313      	orrs	r3, r2
 80040c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d01d      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80040d8:	4b32      	ldr	r3, [pc, #200]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80040da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040de:	0e1b      	lsrs	r3, r3, #24
 80040e0:	f003 030f 	and.w	r3, r3, #15
 80040e4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80040e6:	4b2f      	ldr	r3, [pc, #188]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80040e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040ec:	0f1b      	lsrs	r3, r3, #28
 80040ee:	f003 0307 	and.w	r3, r3, #7
 80040f2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	019a      	lsls	r2, r3, #6
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	691b      	ldr	r3, [r3, #16]
 80040fe:	041b      	lsls	r3, r3, #16
 8004100:	431a      	orrs	r2, r3
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	061b      	lsls	r3, r3, #24
 8004106:	431a      	orrs	r2, r3
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	071b      	lsls	r3, r3, #28
 800410c:	4925      	ldr	r1, [pc, #148]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800410e:	4313      	orrs	r3, r2
 8004110:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d011      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	019a      	lsls	r2, r3, #6
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	691b      	ldr	r3, [r3, #16]
 800412a:	041b      	lsls	r3, r3, #16
 800412c:	431a      	orrs	r2, r3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	061b      	lsls	r3, r3, #24
 8004134:	431a      	orrs	r2, r3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	071b      	lsls	r3, r3, #28
 800413c:	4919      	ldr	r1, [pc, #100]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800413e:	4313      	orrs	r3, r2
 8004140:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004144:	4b17      	ldr	r3, [pc, #92]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a16      	ldr	r2, [pc, #88]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800414a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800414e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004150:	f7fe fca8 	bl	8002aa4 <HAL_GetTick>
 8004154:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004156:	e008      	b.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004158:	f7fe fca4 	bl	8002aa4 <HAL_GetTick>
 800415c:	4602      	mov	r2, r0
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	2b64      	cmp	r3, #100	; 0x64
 8004164:	d901      	bls.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	e0d7      	b.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800416a:	4b0e      	ldr	r3, [pc, #56]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d0f0      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004176:	69bb      	ldr	r3, [r7, #24]
 8004178:	2b01      	cmp	r3, #1
 800417a:	f040 80cd 	bne.w	8004318 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800417e:	4b09      	ldr	r3, [pc, #36]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a08      	ldr	r2, [pc, #32]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004184:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004188:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800418a:	f7fe fc8b 	bl	8002aa4 <HAL_GetTick>
 800418e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004190:	e00a      	b.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004192:	f7fe fc87 	bl	8002aa4 <HAL_GetTick>
 8004196:	4602      	mov	r2, r0
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	2b64      	cmp	r3, #100	; 0x64
 800419e:	d903      	bls.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041a0:	2303      	movs	r3, #3
 80041a2:	e0ba      	b.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80041a4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80041a8:	4b5e      	ldr	r3, [pc, #376]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041b4:	d0ed      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d003      	beq.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x67e>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d009      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d02e      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d12a      	bne.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80041de:	4b51      	ldr	r3, [pc, #324]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80041e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041e4:	0c1b      	lsrs	r3, r3, #16
 80041e6:	f003 0303 	and.w	r3, r3, #3
 80041ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80041ec:	4b4d      	ldr	r3, [pc, #308]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80041ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041f2:	0f1b      	lsrs	r3, r3, #28
 80041f4:	f003 0307 	and.w	r3, r3, #7
 80041f8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	695b      	ldr	r3, [r3, #20]
 80041fe:	019a      	lsls	r2, r3, #6
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	041b      	lsls	r3, r3, #16
 8004204:	431a      	orrs	r2, r3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	699b      	ldr	r3, [r3, #24]
 800420a:	061b      	lsls	r3, r3, #24
 800420c:	431a      	orrs	r2, r3
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	071b      	lsls	r3, r3, #28
 8004212:	4944      	ldr	r1, [pc, #272]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004214:	4313      	orrs	r3, r2
 8004216:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800421a:	4b42      	ldr	r3, [pc, #264]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800421c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004220:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004228:	3b01      	subs	r3, #1
 800422a:	021b      	lsls	r3, r3, #8
 800422c:	493d      	ldr	r1, [pc, #244]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800422e:	4313      	orrs	r3, r2
 8004230:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800423c:	2b00      	cmp	r3, #0
 800423e:	d022      	beq.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004244:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004248:	d11d      	bne.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800424a:	4b36      	ldr	r3, [pc, #216]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800424c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004250:	0e1b      	lsrs	r3, r3, #24
 8004252:	f003 030f 	and.w	r3, r3, #15
 8004256:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004258:	4b32      	ldr	r3, [pc, #200]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800425a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800425e:	0f1b      	lsrs	r3, r3, #28
 8004260:	f003 0307 	and.w	r3, r3, #7
 8004264:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	695b      	ldr	r3, [r3, #20]
 800426a:	019a      	lsls	r2, r3, #6
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6a1b      	ldr	r3, [r3, #32]
 8004270:	041b      	lsls	r3, r3, #16
 8004272:	431a      	orrs	r2, r3
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	061b      	lsls	r3, r3, #24
 8004278:	431a      	orrs	r2, r3
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	071b      	lsls	r3, r3, #28
 800427e:	4929      	ldr	r1, [pc, #164]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004280:	4313      	orrs	r3, r2
 8004282:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0308 	and.w	r3, r3, #8
 800428e:	2b00      	cmp	r3, #0
 8004290:	d028      	beq.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004292:	4b24      	ldr	r3, [pc, #144]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004294:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004298:	0e1b      	lsrs	r3, r3, #24
 800429a:	f003 030f 	and.w	r3, r3, #15
 800429e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80042a0:	4b20      	ldr	r3, [pc, #128]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80042a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042a6:	0c1b      	lsrs	r3, r3, #16
 80042a8:	f003 0303 	and.w	r3, r3, #3
 80042ac:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	695b      	ldr	r3, [r3, #20]
 80042b2:	019a      	lsls	r2, r3, #6
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	041b      	lsls	r3, r3, #16
 80042b8:	431a      	orrs	r2, r3
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	061b      	lsls	r3, r3, #24
 80042be:	431a      	orrs	r2, r3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	69db      	ldr	r3, [r3, #28]
 80042c4:	071b      	lsls	r3, r3, #28
 80042c6:	4917      	ldr	r1, [pc, #92]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80042c8:	4313      	orrs	r3, r2
 80042ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80042ce:	4b15      	ldr	r3, [pc, #84]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80042d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042dc:	4911      	ldr	r1, [pc, #68]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80042de:	4313      	orrs	r3, r2
 80042e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80042e4:	4b0f      	ldr	r3, [pc, #60]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a0e      	ldr	r2, [pc, #56]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80042ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042f0:	f7fe fbd8 	bl	8002aa4 <HAL_GetTick>
 80042f4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80042f6:	e008      	b.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80042f8:	f7fe fbd4 	bl	8002aa4 <HAL_GetTick>
 80042fc:	4602      	mov	r2, r0
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	2b64      	cmp	r3, #100	; 0x64
 8004304:	d901      	bls.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	e007      	b.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800430a:	4b06      	ldr	r3, [pc, #24]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004312:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004316:	d1ef      	bne.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3720      	adds	r7, #32
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	40023800 	.word	0x40023800

08004328 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d101      	bne.n	800433a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e084      	b.n	8004444 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004346:	b2db      	uxtb	r3, r3
 8004348:	2b00      	cmp	r3, #0
 800434a:	d106      	bne.n	800435a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f7fd ff71 	bl	800223c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2202      	movs	r2, #2
 800435e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004370:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800437a:	d902      	bls.n	8004382 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800437c:	2300      	movs	r3, #0
 800437e:	60fb      	str	r3, [r7, #12]
 8004380:	e002      	b.n	8004388 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004382:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004386:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004390:	d007      	beq.n	80043a2 <HAL_SPI_Init+0x7a>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800439a:	d002      	beq.n	80043a2 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2200      	movs	r2, #0
 80043a0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d10b      	bne.n	80043c2 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80043b2:	d903      	bls.n	80043bc <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2202      	movs	r2, #2
 80043b8:	631a      	str	r2, [r3, #48]	; 0x30
 80043ba:	e002      	b.n	80043c2 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	685a      	ldr	r2, [r3, #4]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	431a      	orrs	r2, r3
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	691b      	ldr	r3, [r3, #16]
 80043d0:	431a      	orrs	r2, r3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	695b      	ldr	r3, [r3, #20]
 80043d6:	431a      	orrs	r2, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	699b      	ldr	r3, [r3, #24]
 80043dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043e0:	431a      	orrs	r2, r3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	69db      	ldr	r3, [r3, #28]
 80043e6:	431a      	orrs	r2, r3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6a1b      	ldr	r3, [r3, #32]
 80043ec:	ea42 0103 	orr.w	r1, r2, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	430a      	orrs	r2, r1
 80043fa:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	699b      	ldr	r3, [r3, #24]
 8004400:	0c1b      	lsrs	r3, r3, #16
 8004402:	f003 0204 	and.w	r2, r3, #4
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440a:	431a      	orrs	r2, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004410:	431a      	orrs	r2, r3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	ea42 0103 	orr.w	r1, r2, r3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	68fa      	ldr	r2, [r7, #12]
 8004420:	430a      	orrs	r2, r1
 8004422:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	69da      	ldr	r2, [r3, #28]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004432:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2201      	movs	r2, #1
 800443e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004442:	2300      	movs	r3, #0
}
 8004444:	4618      	mov	r0, r3
 8004446:	3710      	adds	r7, #16
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}

0800444c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b088      	sub	sp, #32
 8004450:	af00      	add	r7, sp, #0
 8004452:	60f8      	str	r0, [r7, #12]
 8004454:	60b9      	str	r1, [r7, #8]
 8004456:	603b      	str	r3, [r7, #0]
 8004458:	4613      	mov	r3, r2
 800445a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800445c:	2300      	movs	r3, #0
 800445e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004466:	2b01      	cmp	r3, #1
 8004468:	d101      	bne.n	800446e <HAL_SPI_Transmit+0x22>
 800446a:	2302      	movs	r3, #2
 800446c:	e150      	b.n	8004710 <HAL_SPI_Transmit+0x2c4>
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2201      	movs	r2, #1
 8004472:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004476:	f7fe fb15 	bl	8002aa4 <HAL_GetTick>
 800447a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800447c:	88fb      	ldrh	r3, [r7, #6]
 800447e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004486:	b2db      	uxtb	r3, r3
 8004488:	2b01      	cmp	r3, #1
 800448a:	d002      	beq.n	8004492 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800448c:	2302      	movs	r3, #2
 800448e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004490:	e135      	b.n	80046fe <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d002      	beq.n	800449e <HAL_SPI_Transmit+0x52>
 8004498:	88fb      	ldrh	r3, [r7, #6]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d102      	bne.n	80044a4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80044a2:	e12c      	b.n	80046fe <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2203      	movs	r2, #3
 80044a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2200      	movs	r2, #0
 80044b0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	68ba      	ldr	r2, [r7, #8]
 80044b6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	88fa      	ldrh	r2, [r7, #6]
 80044bc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	88fa      	ldrh	r2, [r7, #6]
 80044c2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2200      	movs	r2, #0
 80044c8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2200      	movs	r2, #0
 80044de:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2200      	movs	r2, #0
 80044e4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044ee:	d107      	bne.n	8004500 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80044fe:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800450a:	2b40      	cmp	r3, #64	; 0x40
 800450c:	d007      	beq.n	800451e <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800451c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004526:	d94b      	bls.n	80045c0 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d002      	beq.n	8004536 <HAL_SPI_Transmit+0xea>
 8004530:	8afb      	ldrh	r3, [r7, #22]
 8004532:	2b01      	cmp	r3, #1
 8004534:	d13e      	bne.n	80045b4 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800453a:	881a      	ldrh	r2, [r3, #0]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004546:	1c9a      	adds	r2, r3, #2
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004550:	b29b      	uxth	r3, r3
 8004552:	3b01      	subs	r3, #1
 8004554:	b29a      	uxth	r2, r3
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800455a:	e02b      	b.n	80045b4 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	f003 0302 	and.w	r3, r3, #2
 8004566:	2b02      	cmp	r3, #2
 8004568:	d112      	bne.n	8004590 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800456e:	881a      	ldrh	r2, [r3, #0]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800457a:	1c9a      	adds	r2, r3, #2
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004584:	b29b      	uxth	r3, r3
 8004586:	3b01      	subs	r3, #1
 8004588:	b29a      	uxth	r2, r3
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800458e:	e011      	b.n	80045b4 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004590:	f7fe fa88 	bl	8002aa4 <HAL_GetTick>
 8004594:	4602      	mov	r2, r0
 8004596:	69bb      	ldr	r3, [r7, #24]
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	683a      	ldr	r2, [r7, #0]
 800459c:	429a      	cmp	r2, r3
 800459e:	d803      	bhi.n	80045a8 <HAL_SPI_Transmit+0x15c>
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045a6:	d102      	bne.n	80045ae <HAL_SPI_Transmit+0x162>
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d102      	bne.n	80045b4 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80045b2:	e0a4      	b.n	80046fe <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d1ce      	bne.n	800455c <HAL_SPI_Transmit+0x110>
 80045be:	e07c      	b.n	80046ba <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d002      	beq.n	80045ce <HAL_SPI_Transmit+0x182>
 80045c8:	8afb      	ldrh	r3, [r7, #22]
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d170      	bne.n	80046b0 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d912      	bls.n	80045fe <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045dc:	881a      	ldrh	r2, [r3, #0]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e8:	1c9a      	adds	r2, r3, #2
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	3b02      	subs	r3, #2
 80045f6:	b29a      	uxth	r2, r3
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80045fc:	e058      	b.n	80046b0 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	330c      	adds	r3, #12
 8004608:	7812      	ldrb	r2, [r2, #0]
 800460a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004610:	1c5a      	adds	r2, r3, #1
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800461a:	b29b      	uxth	r3, r3
 800461c:	3b01      	subs	r3, #1
 800461e:	b29a      	uxth	r2, r3
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004624:	e044      	b.n	80046b0 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	f003 0302 	and.w	r3, r3, #2
 8004630:	2b02      	cmp	r3, #2
 8004632:	d12b      	bne.n	800468c <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004638:	b29b      	uxth	r3, r3
 800463a:	2b01      	cmp	r3, #1
 800463c:	d912      	bls.n	8004664 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004642:	881a      	ldrh	r2, [r3, #0]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800464e:	1c9a      	adds	r2, r3, #2
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004658:	b29b      	uxth	r3, r3
 800465a:	3b02      	subs	r3, #2
 800465c:	b29a      	uxth	r2, r3
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004662:	e025      	b.n	80046b0 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	330c      	adds	r3, #12
 800466e:	7812      	ldrb	r2, [r2, #0]
 8004670:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004676:	1c5a      	adds	r2, r3, #1
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004680:	b29b      	uxth	r3, r3
 8004682:	3b01      	subs	r3, #1
 8004684:	b29a      	uxth	r2, r3
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	87da      	strh	r2, [r3, #62]	; 0x3e
 800468a:	e011      	b.n	80046b0 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800468c:	f7fe fa0a 	bl	8002aa4 <HAL_GetTick>
 8004690:	4602      	mov	r2, r0
 8004692:	69bb      	ldr	r3, [r7, #24]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	683a      	ldr	r2, [r7, #0]
 8004698:	429a      	cmp	r2, r3
 800469a:	d803      	bhi.n	80046a4 <HAL_SPI_Transmit+0x258>
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046a2:	d102      	bne.n	80046aa <HAL_SPI_Transmit+0x25e>
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d102      	bne.n	80046b0 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	77fb      	strb	r3, [r7, #31]
          goto error;
 80046ae:	e026      	b.n	80046fe <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d1b5      	bne.n	8004626 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80046ba:	69ba      	ldr	r2, [r7, #24]
 80046bc:	6839      	ldr	r1, [r7, #0]
 80046be:	68f8      	ldr	r0, [r7, #12]
 80046c0:	f000 fb14 	bl	8004cec <SPI_EndRxTxTransaction>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d002      	beq.n	80046d0 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2220      	movs	r2, #32
 80046ce:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d10a      	bne.n	80046ee <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80046d8:	2300      	movs	r3, #0
 80046da:	613b      	str	r3, [r7, #16]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	613b      	str	r3, [r7, #16]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	613b      	str	r3, [r7, #16]
 80046ec:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d002      	beq.n	80046fc <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	77fb      	strb	r3, [r7, #31]
 80046fa:	e000      	b.n	80046fe <HAL_SPI_Transmit+0x2b2>
  }

error:
 80046fc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2201      	movs	r2, #1
 8004702:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2200      	movs	r2, #0
 800470a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800470e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004710:	4618      	mov	r0, r3
 8004712:	3720      	adds	r7, #32
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}

08004718 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b08a      	sub	sp, #40	; 0x28
 800471c:	af00      	add	r7, sp, #0
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	60b9      	str	r1, [r7, #8]
 8004722:	607a      	str	r2, [r7, #4]
 8004724:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004726:	2301      	movs	r3, #1
 8004728:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800472a:	2300      	movs	r3, #0
 800472c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004736:	2b01      	cmp	r3, #1
 8004738:	d101      	bne.n	800473e <HAL_SPI_TransmitReceive+0x26>
 800473a:	2302      	movs	r3, #2
 800473c:	e1fb      	b.n	8004b36 <HAL_SPI_TransmitReceive+0x41e>
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2201      	movs	r2, #1
 8004742:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004746:	f7fe f9ad 	bl	8002aa4 <HAL_GetTick>
 800474a:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004752:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800475a:	887b      	ldrh	r3, [r7, #2]
 800475c:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800475e:	887b      	ldrh	r3, [r7, #2]
 8004760:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004762:	7efb      	ldrb	r3, [r7, #27]
 8004764:	2b01      	cmp	r3, #1
 8004766:	d00e      	beq.n	8004786 <HAL_SPI_TransmitReceive+0x6e>
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800476e:	d106      	bne.n	800477e <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d102      	bne.n	800477e <HAL_SPI_TransmitReceive+0x66>
 8004778:	7efb      	ldrb	r3, [r7, #27]
 800477a:	2b04      	cmp	r3, #4
 800477c:	d003      	beq.n	8004786 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800477e:	2302      	movs	r3, #2
 8004780:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004784:	e1cd      	b.n	8004b22 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d005      	beq.n	8004798 <HAL_SPI_TransmitReceive+0x80>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d002      	beq.n	8004798 <HAL_SPI_TransmitReceive+0x80>
 8004792:	887b      	ldrh	r3, [r7, #2]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d103      	bne.n	80047a0 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800479e:	e1c0      	b.n	8004b22 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	2b04      	cmp	r3, #4
 80047aa:	d003      	beq.n	80047b4 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2205      	movs	r2, #5
 80047b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2200      	movs	r2, #0
 80047b8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	887a      	ldrh	r2, [r7, #2]
 80047c4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	887a      	ldrh	r2, [r7, #2]
 80047cc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	68ba      	ldr	r2, [r7, #8]
 80047d4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	887a      	ldrh	r2, [r7, #2]
 80047da:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	887a      	ldrh	r2, [r7, #2]
 80047e0:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2200      	movs	r2, #0
 80047e6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2200      	movs	r2, #0
 80047ec:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80047f6:	d802      	bhi.n	80047fe <HAL_SPI_TransmitReceive+0xe6>
 80047f8:	8a3b      	ldrh	r3, [r7, #16]
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d908      	bls.n	8004810 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	685a      	ldr	r2, [r3, #4]
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800480c:	605a      	str	r2, [r3, #4]
 800480e:	e007      	b.n	8004820 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	685a      	ldr	r2, [r3, #4]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800481e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800482a:	2b40      	cmp	r3, #64	; 0x40
 800482c:	d007      	beq.n	800483e <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800483c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004846:	d97c      	bls.n	8004942 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d002      	beq.n	8004856 <HAL_SPI_TransmitReceive+0x13e>
 8004850:	8a7b      	ldrh	r3, [r7, #18]
 8004852:	2b01      	cmp	r3, #1
 8004854:	d169      	bne.n	800492a <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800485a:	881a      	ldrh	r2, [r3, #0]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004866:	1c9a      	adds	r2, r3, #2
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004870:	b29b      	uxth	r3, r3
 8004872:	3b01      	subs	r3, #1
 8004874:	b29a      	uxth	r2, r3
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800487a:	e056      	b.n	800492a <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	f003 0302 	and.w	r3, r3, #2
 8004886:	2b02      	cmp	r3, #2
 8004888:	d11b      	bne.n	80048c2 <HAL_SPI_TransmitReceive+0x1aa>
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800488e:	b29b      	uxth	r3, r3
 8004890:	2b00      	cmp	r3, #0
 8004892:	d016      	beq.n	80048c2 <HAL_SPI_TransmitReceive+0x1aa>
 8004894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004896:	2b01      	cmp	r3, #1
 8004898:	d113      	bne.n	80048c2 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800489e:	881a      	ldrh	r2, [r3, #0]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048aa:	1c9a      	adds	r2, r3, #2
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	3b01      	subs	r3, #1
 80048b8:	b29a      	uxth	r2, r3
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80048be:	2300      	movs	r3, #0
 80048c0:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	f003 0301 	and.w	r3, r3, #1
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d11c      	bne.n	800490a <HAL_SPI_TransmitReceive+0x1f2>
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d016      	beq.n	800490a <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	68da      	ldr	r2, [r3, #12]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e6:	b292      	uxth	r2, r2
 80048e8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ee:	1c9a      	adds	r2, r3, #2
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	3b01      	subs	r3, #1
 80048fe:	b29a      	uxth	r2, r3
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004906:	2301      	movs	r3, #1
 8004908:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800490a:	f7fe f8cb 	bl	8002aa4 <HAL_GetTick>
 800490e:	4602      	mov	r2, r0
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	1ad3      	subs	r3, r2, r3
 8004914:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004916:	429a      	cmp	r2, r3
 8004918:	d807      	bhi.n	800492a <HAL_SPI_TransmitReceive+0x212>
 800491a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800491c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004920:	d003      	beq.n	800492a <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004922:	2303      	movs	r3, #3
 8004924:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004928:	e0fb      	b.n	8004b22 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800492e:	b29b      	uxth	r3, r3
 8004930:	2b00      	cmp	r3, #0
 8004932:	d1a3      	bne.n	800487c <HAL_SPI_TransmitReceive+0x164>
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800493a:	b29b      	uxth	r3, r3
 800493c:	2b00      	cmp	r3, #0
 800493e:	d19d      	bne.n	800487c <HAL_SPI_TransmitReceive+0x164>
 8004940:	e0df      	b.n	8004b02 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d003      	beq.n	8004952 <HAL_SPI_TransmitReceive+0x23a>
 800494a:	8a7b      	ldrh	r3, [r7, #18]
 800494c:	2b01      	cmp	r3, #1
 800494e:	f040 80cb 	bne.w	8004ae8 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004956:	b29b      	uxth	r3, r3
 8004958:	2b01      	cmp	r3, #1
 800495a:	d912      	bls.n	8004982 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004960:	881a      	ldrh	r2, [r3, #0]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800496c:	1c9a      	adds	r2, r3, #2
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004976:	b29b      	uxth	r3, r3
 8004978:	3b02      	subs	r3, #2
 800497a:	b29a      	uxth	r2, r3
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004980:	e0b2      	b.n	8004ae8 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	330c      	adds	r3, #12
 800498c:	7812      	ldrb	r2, [r2, #0]
 800498e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004994:	1c5a      	adds	r2, r3, #1
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800499e:	b29b      	uxth	r3, r3
 80049a0:	3b01      	subs	r3, #1
 80049a2:	b29a      	uxth	r2, r3
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049a8:	e09e      	b.n	8004ae8 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	f003 0302 	and.w	r3, r3, #2
 80049b4:	2b02      	cmp	r3, #2
 80049b6:	d134      	bne.n	8004a22 <HAL_SPI_TransmitReceive+0x30a>
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049bc:	b29b      	uxth	r3, r3
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d02f      	beq.n	8004a22 <HAL_SPI_TransmitReceive+0x30a>
 80049c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d12c      	bne.n	8004a22 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d912      	bls.n	80049f8 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d6:	881a      	ldrh	r2, [r3, #0]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e2:	1c9a      	adds	r2, r3, #2
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	3b02      	subs	r3, #2
 80049f0:	b29a      	uxth	r2, r3
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80049f6:	e012      	b.n	8004a1e <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	330c      	adds	r3, #12
 8004a02:	7812      	ldrb	r2, [r2, #0]
 8004a04:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a0a:	1c5a      	adds	r2, r3, #1
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	3b01      	subs	r3, #1
 8004a18:	b29a      	uxth	r2, r3
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	f003 0301 	and.w	r3, r3, #1
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d148      	bne.n	8004ac2 <HAL_SPI_TransmitReceive+0x3aa>
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d042      	beq.n	8004ac2 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d923      	bls.n	8004a90 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	68da      	ldr	r2, [r3, #12]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a52:	b292      	uxth	r2, r2
 8004a54:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5a:	1c9a      	adds	r2, r3, #2
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	3b02      	subs	r3, #2
 8004a6a:	b29a      	uxth	r2, r3
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d81f      	bhi.n	8004abe <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	685a      	ldr	r2, [r3, #4]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004a8c:	605a      	str	r2, [r3, #4]
 8004a8e:	e016      	b.n	8004abe <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f103 020c 	add.w	r2, r3, #12
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a9c:	7812      	ldrb	r2, [r2, #0]
 8004a9e:	b2d2      	uxtb	r2, r2
 8004aa0:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa6:	1c5a      	adds	r2, r3, #1
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	3b01      	subs	r3, #1
 8004ab6:	b29a      	uxth	r2, r3
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004ac2:	f7fd ffef 	bl	8002aa4 <HAL_GetTick>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	1ad3      	subs	r3, r2, r3
 8004acc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d803      	bhi.n	8004ada <HAL_SPI_TransmitReceive+0x3c2>
 8004ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ad8:	d102      	bne.n	8004ae0 <HAL_SPI_TransmitReceive+0x3c8>
 8004ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d103      	bne.n	8004ae8 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004ae6:	e01c      	b.n	8004b22 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	f47f af5b 	bne.w	80049aa <HAL_SPI_TransmitReceive+0x292>
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	f47f af54 	bne.w	80049aa <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b02:	69fa      	ldr	r2, [r7, #28]
 8004b04:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b06:	68f8      	ldr	r0, [r7, #12]
 8004b08:	f000 f8f0 	bl	8004cec <SPI_EndRxTxTransaction>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d006      	beq.n	8004b20 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2220      	movs	r2, #32
 8004b1c:	661a      	str	r2, [r3, #96]	; 0x60
 8004b1e:	e000      	b.n	8004b22 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004b20:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2201      	movs	r2, #1
 8004b26:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004b32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3728      	adds	r7, #40	; 0x28
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}

08004b3e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b3e:	b580      	push	{r7, lr}
 8004b40:	b084      	sub	sp, #16
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	60f8      	str	r0, [r7, #12]
 8004b46:	60b9      	str	r1, [r7, #8]
 8004b48:	603b      	str	r3, [r7, #0]
 8004b4a:	4613      	mov	r3, r2
 8004b4c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b4e:	e04c      	b.n	8004bea <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b56:	d048      	beq.n	8004bea <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004b58:	f7fd ffa4 	bl	8002aa4 <HAL_GetTick>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	69bb      	ldr	r3, [r7, #24]
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	683a      	ldr	r2, [r7, #0]
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d902      	bls.n	8004b6e <SPI_WaitFlagStateUntilTimeout+0x30>
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d13d      	bne.n	8004bea <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	685a      	ldr	r2, [r3, #4]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004b7c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b86:	d111      	bne.n	8004bac <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b90:	d004      	beq.n	8004b9c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b9a:	d107      	bne.n	8004bac <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004baa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bb4:	d10f      	bne.n	8004bd6 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004bc4:	601a      	str	r2, [r3, #0]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004bd4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2201      	movs	r2, #1
 8004bda:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2200      	movs	r2, #0
 8004be2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	e00f      	b.n	8004c0a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	689a      	ldr	r2, [r3, #8]
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	68ba      	ldr	r2, [r7, #8]
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	bf0c      	ite	eq
 8004bfa:	2301      	moveq	r3, #1
 8004bfc:	2300      	movne	r3, #0
 8004bfe:	b2db      	uxtb	r3, r3
 8004c00:	461a      	mov	r2, r3
 8004c02:	79fb      	ldrb	r3, [r7, #7]
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d1a3      	bne.n	8004b50 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3710      	adds	r7, #16
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}

08004c12 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004c12:	b580      	push	{r7, lr}
 8004c14:	b084      	sub	sp, #16
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	60f8      	str	r0, [r7, #12]
 8004c1a:	60b9      	str	r1, [r7, #8]
 8004c1c:	607a      	str	r2, [r7, #4]
 8004c1e:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8004c20:	e057      	b.n	8004cd2 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004c28:	d106      	bne.n	8004c38 <SPI_WaitFifoStateUntilTimeout+0x26>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d103      	bne.n	8004c38 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	330c      	adds	r3, #12
 8004c36:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c3e:	d048      	beq.n	8004cd2 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004c40:	f7fd ff30 	bl	8002aa4 <HAL_GetTick>
 8004c44:	4602      	mov	r2, r0
 8004c46:	69bb      	ldr	r3, [r7, #24]
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	683a      	ldr	r2, [r7, #0]
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d902      	bls.n	8004c56 <SPI_WaitFifoStateUntilTimeout+0x44>
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d13d      	bne.n	8004cd2 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	685a      	ldr	r2, [r3, #4]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004c64:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c6e:	d111      	bne.n	8004c94 <SPI_WaitFifoStateUntilTimeout+0x82>
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c78:	d004      	beq.n	8004c84 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c82:	d107      	bne.n	8004c94 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c92:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c9c:	d10f      	bne.n	8004cbe <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004cac:	601a      	str	r2, [r3, #0]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004cbc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	e008      	b.n	8004ce4 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	689a      	ldr	r2, [r3, #8]
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	4013      	ands	r3, r2
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d19f      	bne.n	8004c22 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8004ce2:	2300      	movs	r3, #0
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3710      	adds	r7, #16
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}

08004cec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b086      	sub	sp, #24
 8004cf0:	af02      	add	r7, sp, #8
 8004cf2:	60f8      	str	r0, [r7, #12]
 8004cf4:	60b9      	str	r1, [r7, #8]
 8004cf6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	9300      	str	r3, [sp, #0]
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004d04:	68f8      	ldr	r0, [r7, #12]
 8004d06:	f7ff ff84 	bl	8004c12 <SPI_WaitFifoStateUntilTimeout>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d007      	beq.n	8004d20 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d14:	f043 0220 	orr.w	r2, r3, #32
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004d1c:	2303      	movs	r3, #3
 8004d1e:	e027      	b.n	8004d70 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	9300      	str	r3, [sp, #0]
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	2200      	movs	r2, #0
 8004d28:	2180      	movs	r1, #128	; 0x80
 8004d2a:	68f8      	ldr	r0, [r7, #12]
 8004d2c:	f7ff ff07 	bl	8004b3e <SPI_WaitFlagStateUntilTimeout>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d007      	beq.n	8004d46 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d3a:	f043 0220 	orr.w	r2, r3, #32
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004d42:	2303      	movs	r3, #3
 8004d44:	e014      	b.n	8004d70 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	9300      	str	r3, [sp, #0]
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004d52:	68f8      	ldr	r0, [r7, #12]
 8004d54:	f7ff ff5d 	bl	8004c12 <SPI_WaitFifoStateUntilTimeout>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d007      	beq.n	8004d6e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d62:	f043 0220 	orr.w	r2, r3, #32
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	e000      	b.n	8004d70 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004d6e:	2300      	movs	r3, #0
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3710      	adds	r7, #16
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b082      	sub	sp, #8
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d101      	bne.n	8004d8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e01d      	b.n	8004dc6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d106      	bne.n	8004da4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f7fd fd12 	bl	80027c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2202      	movs	r2, #2
 8004da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	3304      	adds	r3, #4
 8004db4:	4619      	mov	r1, r3
 8004db6:	4610      	mov	r0, r2
 8004db8:	f000 fc90 	bl	80056dc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004dc4:	2300      	movs	r3, #0
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3708      	adds	r7, #8
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
	...

08004dd0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b085      	sub	sp, #20
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	68da      	ldr	r2, [r3, #12]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f042 0201 	orr.w	r2, r2, #1
 8004de6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	689a      	ldr	r2, [r3, #8]
 8004dee:	4b0c      	ldr	r3, [pc, #48]	; (8004e20 <HAL_TIM_Base_Start_IT+0x50>)
 8004df0:	4013      	ands	r3, r2
 8004df2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2b06      	cmp	r3, #6
 8004df8:	d00b      	beq.n	8004e12 <HAL_TIM_Base_Start_IT+0x42>
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e00:	d007      	beq.n	8004e12 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f042 0201 	orr.w	r2, r2, #1
 8004e10:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e12:	2300      	movs	r3, #0
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3714      	adds	r7, #20
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr
 8004e20:	00010007 	.word	0x00010007

08004e24 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b082      	sub	sp, #8
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d101      	bne.n	8004e36 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e01d      	b.n	8004e72 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d106      	bne.n	8004e50 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f000 f815 	bl	8004e7a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2202      	movs	r2, #2
 8004e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	3304      	adds	r3, #4
 8004e60:	4619      	mov	r1, r3
 8004e62:	4610      	mov	r0, r2
 8004e64:	f000 fc3a 	bl	80056dc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e70:	2300      	movs	r3, #0
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3708      	adds	r7, #8
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}

08004e7a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004e7a:	b480      	push	{r7}
 8004e7c:	b083      	sub	sp, #12
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004e82:	bf00      	nop
 8004e84:	370c      	adds	r7, #12
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr
	...

08004e90 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	6839      	ldr	r1, [r7, #0]
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f000 ffb2 	bl	8005e0c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a17      	ldr	r2, [pc, #92]	; (8004f0c <HAL_TIM_PWM_Start+0x7c>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d004      	beq.n	8004ebc <HAL_TIM_PWM_Start+0x2c>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a16      	ldr	r2, [pc, #88]	; (8004f10 <HAL_TIM_PWM_Start+0x80>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d101      	bne.n	8004ec0 <HAL_TIM_PWM_Start+0x30>
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e000      	b.n	8004ec2 <HAL_TIM_PWM_Start+0x32>
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d007      	beq.n	8004ed6 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ed4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	689a      	ldr	r2, [r3, #8]
 8004edc:	4b0d      	ldr	r3, [pc, #52]	; (8004f14 <HAL_TIM_PWM_Start+0x84>)
 8004ede:	4013      	ands	r3, r2
 8004ee0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2b06      	cmp	r3, #6
 8004ee6:	d00b      	beq.n	8004f00 <HAL_TIM_PWM_Start+0x70>
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004eee:	d007      	beq.n	8004f00 <HAL_TIM_PWM_Start+0x70>
  {
    __HAL_TIM_ENABLE(htim);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f042 0201 	orr.w	r2, r2, #1
 8004efe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f00:	2300      	movs	r3, #0
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3710      	adds	r7, #16
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	40010000 	.word	0x40010000
 8004f10:	40010400 	.word	0x40010400
 8004f14:	00010007 	.word	0x00010007

08004f18 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b086      	sub	sp, #24
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d101      	bne.n	8004f2c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e07b      	b.n	8005024 <HAL_TIM_Encoder_Init+0x10c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f32:	b2db      	uxtb	r3, r3
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d106      	bne.n	8004f46 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f7fd fbc9 	bl	80026d8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2202      	movs	r2, #2
 8004f4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	6899      	ldr	r1, [r3, #8]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	4b34      	ldr	r3, [pc, #208]	; (800502c <HAL_TIM_Encoder_Init+0x114>)
 8004f5a:	400b      	ands	r3, r1
 8004f5c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	3304      	adds	r3, #4
 8004f66:	4619      	mov	r1, r3
 8004f68:	4610      	mov	r0, r2
 8004f6a:	f000 fbb7 	bl	80056dc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	699b      	ldr	r3, [r3, #24]
 8004f7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	6a1b      	ldr	r3, [r3, #32]
 8004f84:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	697a      	ldr	r2, [r7, #20]
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004f90:	693a      	ldr	r2, [r7, #16]
 8004f92:	4b27      	ldr	r3, [pc, #156]	; (8005030 <HAL_TIM_Encoder_Init+0x118>)
 8004f94:	4013      	ands	r3, r2
 8004f96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	689a      	ldr	r2, [r3, #8]
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	699b      	ldr	r3, [r3, #24]
 8004fa0:	021b      	lsls	r3, r3, #8
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	693a      	ldr	r2, [r7, #16]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004faa:	693a      	ldr	r2, [r7, #16]
 8004fac:	4b21      	ldr	r3, [pc, #132]	; (8005034 <HAL_TIM_Encoder_Init+0x11c>)
 8004fae:	4013      	ands	r3, r2
 8004fb0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004fb2:	693a      	ldr	r2, [r7, #16]
 8004fb4:	4b20      	ldr	r3, [pc, #128]	; (8005038 <HAL_TIM_Encoder_Init+0x120>)
 8004fb6:	4013      	ands	r3, r2
 8004fb8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	68da      	ldr	r2, [r3, #12]
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	69db      	ldr	r3, [r3, #28]
 8004fc2:	021b      	lsls	r3, r3, #8
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	693a      	ldr	r2, [r7, #16]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	691b      	ldr	r3, [r3, #16]
 8004fd0:	011a      	lsls	r2, r3, #4
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	6a1b      	ldr	r3, [r3, #32]
 8004fd6:	031b      	lsls	r3, r3, #12
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	693a      	ldr	r2, [r7, #16]
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004fe6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004fee:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	685a      	ldr	r2, [r3, #4]
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	695b      	ldr	r3, [r3, #20]
 8004ff8:	011b      	lsls	r3, r3, #4
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	68fa      	ldr	r2, [r7, #12]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	697a      	ldr	r2, [r7, #20]
 8005008:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	693a      	ldr	r2, [r7, #16]
 8005010:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	68fa      	ldr	r2, [r7, #12]
 8005018:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2201      	movs	r2, #1
 800501e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005022:	2300      	movs	r3, #0
}
 8005024:	4618      	mov	r0, r3
 8005026:	3718      	adds	r7, #24
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}
 800502c:	fffebff8 	.word	0xfffebff8
 8005030:	fffffcfc 	.word	0xfffffcfc
 8005034:	fffff3f3 	.word	0xfffff3f3
 8005038:	ffff0f0f 	.word	0xffff0f0f

0800503c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b082      	sub	sp, #8
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d002      	beq.n	8005052 <HAL_TIM_Encoder_Start+0x16>
 800504c:	2b04      	cmp	r3, #4
 800504e:	d008      	beq.n	8005062 <HAL_TIM_Encoder_Start+0x26>
 8005050:	e00f      	b.n	8005072 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	2201      	movs	r2, #1
 8005058:	2100      	movs	r1, #0
 800505a:	4618      	mov	r0, r3
 800505c:	f000 fed6 	bl	8005e0c <TIM_CCxChannelCmd>
      break;
 8005060:	e016      	b.n	8005090 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	2201      	movs	r2, #1
 8005068:	2104      	movs	r1, #4
 800506a:	4618      	mov	r0, r3
 800506c:	f000 fece 	bl	8005e0c <TIM_CCxChannelCmd>
      break;
 8005070:	e00e      	b.n	8005090 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	2201      	movs	r2, #1
 8005078:	2100      	movs	r1, #0
 800507a:	4618      	mov	r0, r3
 800507c:	f000 fec6 	bl	8005e0c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	2201      	movs	r2, #1
 8005086:	2104      	movs	r1, #4
 8005088:	4618      	mov	r0, r3
 800508a:	f000 febf 	bl	8005e0c <TIM_CCxChannelCmd>
      break;
 800508e:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f042 0201 	orr.w	r2, r2, #1
 800509e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80050a0:	2300      	movs	r3, #0
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3708      	adds	r7, #8
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}

080050aa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80050aa:	b580      	push	{r7, lr}
 80050ac:	b082      	sub	sp, #8
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	691b      	ldr	r3, [r3, #16]
 80050b8:	f003 0302 	and.w	r3, r3, #2
 80050bc:	2b02      	cmp	r3, #2
 80050be:	d122      	bne.n	8005106 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	68db      	ldr	r3, [r3, #12]
 80050c6:	f003 0302 	and.w	r3, r3, #2
 80050ca:	2b02      	cmp	r3, #2
 80050cc:	d11b      	bne.n	8005106 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f06f 0202 	mvn.w	r2, #2
 80050d6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	699b      	ldr	r3, [r3, #24]
 80050e4:	f003 0303 	and.w	r3, r3, #3
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d003      	beq.n	80050f4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f000 fad7 	bl	80056a0 <HAL_TIM_IC_CaptureCallback>
 80050f2:	e005      	b.n	8005100 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f000 fac9 	bl	800568c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f000 fada 	bl	80056b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	691b      	ldr	r3, [r3, #16]
 800510c:	f003 0304 	and.w	r3, r3, #4
 8005110:	2b04      	cmp	r3, #4
 8005112:	d122      	bne.n	800515a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	68db      	ldr	r3, [r3, #12]
 800511a:	f003 0304 	and.w	r3, r3, #4
 800511e:	2b04      	cmp	r3, #4
 8005120:	d11b      	bne.n	800515a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f06f 0204 	mvn.w	r2, #4
 800512a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2202      	movs	r2, #2
 8005130:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	699b      	ldr	r3, [r3, #24]
 8005138:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800513c:	2b00      	cmp	r3, #0
 800513e:	d003      	beq.n	8005148 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f000 faad 	bl	80056a0 <HAL_TIM_IC_CaptureCallback>
 8005146:	e005      	b.n	8005154 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f000 fa9f 	bl	800568c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f000 fab0 	bl	80056b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2200      	movs	r2, #0
 8005158:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	691b      	ldr	r3, [r3, #16]
 8005160:	f003 0308 	and.w	r3, r3, #8
 8005164:	2b08      	cmp	r3, #8
 8005166:	d122      	bne.n	80051ae <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	f003 0308 	and.w	r3, r3, #8
 8005172:	2b08      	cmp	r3, #8
 8005174:	d11b      	bne.n	80051ae <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f06f 0208 	mvn.w	r2, #8
 800517e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2204      	movs	r2, #4
 8005184:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	69db      	ldr	r3, [r3, #28]
 800518c:	f003 0303 	and.w	r3, r3, #3
 8005190:	2b00      	cmp	r3, #0
 8005192:	d003      	beq.n	800519c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f000 fa83 	bl	80056a0 <HAL_TIM_IC_CaptureCallback>
 800519a:	e005      	b.n	80051a8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f000 fa75 	bl	800568c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f000 fa86 	bl	80056b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	691b      	ldr	r3, [r3, #16]
 80051b4:	f003 0310 	and.w	r3, r3, #16
 80051b8:	2b10      	cmp	r3, #16
 80051ba:	d122      	bne.n	8005202 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	f003 0310 	and.w	r3, r3, #16
 80051c6:	2b10      	cmp	r3, #16
 80051c8:	d11b      	bne.n	8005202 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f06f 0210 	mvn.w	r2, #16
 80051d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2208      	movs	r2, #8
 80051d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	69db      	ldr	r3, [r3, #28]
 80051e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d003      	beq.n	80051f0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f000 fa59 	bl	80056a0 <HAL_TIM_IC_CaptureCallback>
 80051ee:	e005      	b.n	80051fc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f000 fa4b 	bl	800568c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f000 fa5c 	bl	80056b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2200      	movs	r2, #0
 8005200:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	691b      	ldr	r3, [r3, #16]
 8005208:	f003 0301 	and.w	r3, r3, #1
 800520c:	2b01      	cmp	r3, #1
 800520e:	d10e      	bne.n	800522e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	68db      	ldr	r3, [r3, #12]
 8005216:	f003 0301 	and.w	r3, r3, #1
 800521a:	2b01      	cmp	r3, #1
 800521c:	d107      	bne.n	800522e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f06f 0201 	mvn.w	r2, #1
 8005226:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f7fc fd7b 	bl	8001d24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	691b      	ldr	r3, [r3, #16]
 8005234:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005238:	2b80      	cmp	r3, #128	; 0x80
 800523a:	d10e      	bne.n	800525a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	68db      	ldr	r3, [r3, #12]
 8005242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005246:	2b80      	cmp	r3, #128	; 0x80
 8005248:	d107      	bne.n	800525a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005252:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f000 fe97 	bl	8005f88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	691b      	ldr	r3, [r3, #16]
 8005260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005264:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005268:	d10e      	bne.n	8005288 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	68db      	ldr	r3, [r3, #12]
 8005270:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005274:	2b80      	cmp	r3, #128	; 0x80
 8005276:	d107      	bne.n	8005288 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005280:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f000 fe8a 	bl	8005f9c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	691b      	ldr	r3, [r3, #16]
 800528e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005292:	2b40      	cmp	r3, #64	; 0x40
 8005294:	d10e      	bne.n	80052b4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052a0:	2b40      	cmp	r3, #64	; 0x40
 80052a2:	d107      	bne.n	80052b4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80052ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f000 fa0a 	bl	80056c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	691b      	ldr	r3, [r3, #16]
 80052ba:	f003 0320 	and.w	r3, r3, #32
 80052be:	2b20      	cmp	r3, #32
 80052c0:	d10e      	bne.n	80052e0 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	68db      	ldr	r3, [r3, #12]
 80052c8:	f003 0320 	and.w	r3, r3, #32
 80052cc:	2b20      	cmp	r3, #32
 80052ce:	d107      	bne.n	80052e0 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f06f 0220 	mvn.w	r2, #32
 80052d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f000 fe4a 	bl	8005f74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052e0:	bf00      	nop
 80052e2:	3708      	adds	r7, #8
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}

080052e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b084      	sub	sp, #16
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	60f8      	str	r0, [r7, #12]
 80052f0:	60b9      	str	r1, [r7, #8]
 80052f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d101      	bne.n	8005302 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80052fe:	2302      	movs	r3, #2
 8005300:	e105      	b.n	800550e <HAL_TIM_PWM_ConfigChannel+0x226>
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2201      	movs	r2, #1
 8005306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2202      	movs	r2, #2
 800530e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2b14      	cmp	r3, #20
 8005316:	f200 80f0 	bhi.w	80054fa <HAL_TIM_PWM_ConfigChannel+0x212>
 800531a:	a201      	add	r2, pc, #4	; (adr r2, 8005320 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800531c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005320:	08005375 	.word	0x08005375
 8005324:	080054fb 	.word	0x080054fb
 8005328:	080054fb 	.word	0x080054fb
 800532c:	080054fb 	.word	0x080054fb
 8005330:	080053b5 	.word	0x080053b5
 8005334:	080054fb 	.word	0x080054fb
 8005338:	080054fb 	.word	0x080054fb
 800533c:	080054fb 	.word	0x080054fb
 8005340:	080053f7 	.word	0x080053f7
 8005344:	080054fb 	.word	0x080054fb
 8005348:	080054fb 	.word	0x080054fb
 800534c:	080054fb 	.word	0x080054fb
 8005350:	08005437 	.word	0x08005437
 8005354:	080054fb 	.word	0x080054fb
 8005358:	080054fb 	.word	0x080054fb
 800535c:	080054fb 	.word	0x080054fb
 8005360:	08005479 	.word	0x08005479
 8005364:	080054fb 	.word	0x080054fb
 8005368:	080054fb 	.word	0x080054fb
 800536c:	080054fb 	.word	0x080054fb
 8005370:	080054b9 	.word	0x080054b9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	68b9      	ldr	r1, [r7, #8]
 800537a:	4618      	mov	r0, r3
 800537c:	f000 fa4e 	bl	800581c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	699a      	ldr	r2, [r3, #24]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f042 0208 	orr.w	r2, r2, #8
 800538e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	699a      	ldr	r2, [r3, #24]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f022 0204 	bic.w	r2, r2, #4
 800539e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	6999      	ldr	r1, [r3, #24]
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	691a      	ldr	r2, [r3, #16]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	430a      	orrs	r2, r1
 80053b0:	619a      	str	r2, [r3, #24]
      break;
 80053b2:	e0a3      	b.n	80054fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	68b9      	ldr	r1, [r7, #8]
 80053ba:	4618      	mov	r0, r3
 80053bc:	f000 faa0 	bl	8005900 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	699a      	ldr	r2, [r3, #24]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	699a      	ldr	r2, [r3, #24]
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	6999      	ldr	r1, [r3, #24]
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	021a      	lsls	r2, r3, #8
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	430a      	orrs	r2, r1
 80053f2:	619a      	str	r2, [r3, #24]
      break;
 80053f4:	e082      	b.n	80054fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	68b9      	ldr	r1, [r7, #8]
 80053fc:	4618      	mov	r0, r3
 80053fe:	f000 faf7 	bl	80059f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	69da      	ldr	r2, [r3, #28]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f042 0208 	orr.w	r2, r2, #8
 8005410:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	69da      	ldr	r2, [r3, #28]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f022 0204 	bic.w	r2, r2, #4
 8005420:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	69d9      	ldr	r1, [r3, #28]
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	691a      	ldr	r2, [r3, #16]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	430a      	orrs	r2, r1
 8005432:	61da      	str	r2, [r3, #28]
      break;
 8005434:	e062      	b.n	80054fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	68b9      	ldr	r1, [r7, #8]
 800543c:	4618      	mov	r0, r3
 800543e:	f000 fb4d 	bl	8005adc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	69da      	ldr	r2, [r3, #28]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005450:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	69da      	ldr	r2, [r3, #28]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005460:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	69d9      	ldr	r1, [r3, #28]
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	691b      	ldr	r3, [r3, #16]
 800546c:	021a      	lsls	r2, r3, #8
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	430a      	orrs	r2, r1
 8005474:	61da      	str	r2, [r3, #28]
      break;
 8005476:	e041      	b.n	80054fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	68b9      	ldr	r1, [r7, #8]
 800547e:	4618      	mov	r0, r3
 8005480:	f000 fb84 	bl	8005b8c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f042 0208 	orr.w	r2, r2, #8
 8005492:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f022 0204 	bic.w	r2, r2, #4
 80054a2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	691a      	ldr	r2, [r3, #16]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	430a      	orrs	r2, r1
 80054b4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80054b6:	e021      	b.n	80054fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	68b9      	ldr	r1, [r7, #8]
 80054be:	4618      	mov	r0, r3
 80054c0:	f000 fbb6 	bl	8005c30 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054d2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054e2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	691b      	ldr	r3, [r3, #16]
 80054ee:	021a      	lsls	r2, r3, #8
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	430a      	orrs	r2, r1
 80054f6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80054f8:	e000      	b.n	80054fc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 80054fa:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2201      	movs	r2, #1
 8005500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2200      	movs	r2, #0
 8005508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800550c:	2300      	movs	r3, #0
}
 800550e:	4618      	mov	r0, r3
 8005510:	3710      	adds	r7, #16
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
 8005516:	bf00      	nop

08005518 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b084      	sub	sp, #16
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005528:	2b01      	cmp	r3, #1
 800552a:	d101      	bne.n	8005530 <HAL_TIM_ConfigClockSource+0x18>
 800552c:	2302      	movs	r3, #2
 800552e:	e0a6      	b.n	800567e <HAL_TIM_ConfigClockSource+0x166>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2202      	movs	r2, #2
 800553c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005548:	68fa      	ldr	r2, [r7, #12]
 800554a:	4b4f      	ldr	r3, [pc, #316]	; (8005688 <HAL_TIM_ConfigClockSource+0x170>)
 800554c:	4013      	ands	r3, r2
 800554e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005556:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	68fa      	ldr	r2, [r7, #12]
 800555e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	2b40      	cmp	r3, #64	; 0x40
 8005566:	d067      	beq.n	8005638 <HAL_TIM_ConfigClockSource+0x120>
 8005568:	2b40      	cmp	r3, #64	; 0x40
 800556a:	d80b      	bhi.n	8005584 <HAL_TIM_ConfigClockSource+0x6c>
 800556c:	2b10      	cmp	r3, #16
 800556e:	d073      	beq.n	8005658 <HAL_TIM_ConfigClockSource+0x140>
 8005570:	2b10      	cmp	r3, #16
 8005572:	d802      	bhi.n	800557a <HAL_TIM_ConfigClockSource+0x62>
 8005574:	2b00      	cmp	r3, #0
 8005576:	d06f      	beq.n	8005658 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005578:	e078      	b.n	800566c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800557a:	2b20      	cmp	r3, #32
 800557c:	d06c      	beq.n	8005658 <HAL_TIM_ConfigClockSource+0x140>
 800557e:	2b30      	cmp	r3, #48	; 0x30
 8005580:	d06a      	beq.n	8005658 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005582:	e073      	b.n	800566c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005584:	2b70      	cmp	r3, #112	; 0x70
 8005586:	d00d      	beq.n	80055a4 <HAL_TIM_ConfigClockSource+0x8c>
 8005588:	2b70      	cmp	r3, #112	; 0x70
 800558a:	d804      	bhi.n	8005596 <HAL_TIM_ConfigClockSource+0x7e>
 800558c:	2b50      	cmp	r3, #80	; 0x50
 800558e:	d033      	beq.n	80055f8 <HAL_TIM_ConfigClockSource+0xe0>
 8005590:	2b60      	cmp	r3, #96	; 0x60
 8005592:	d041      	beq.n	8005618 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005594:	e06a      	b.n	800566c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005596:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800559a:	d066      	beq.n	800566a <HAL_TIM_ConfigClockSource+0x152>
 800559c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055a0:	d017      	beq.n	80055d2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80055a2:	e063      	b.n	800566c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6818      	ldr	r0, [r3, #0]
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	6899      	ldr	r1, [r3, #8]
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	685a      	ldr	r2, [r3, #4]
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	f000 fc0a 	bl	8005dcc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80055c6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	68fa      	ldr	r2, [r7, #12]
 80055ce:	609a      	str	r2, [r3, #8]
      break;
 80055d0:	e04c      	b.n	800566c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6818      	ldr	r0, [r3, #0]
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	6899      	ldr	r1, [r3, #8]
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	685a      	ldr	r2, [r3, #4]
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	68db      	ldr	r3, [r3, #12]
 80055e2:	f000 fbf3 	bl	8005dcc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	689a      	ldr	r2, [r3, #8]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80055f4:	609a      	str	r2, [r3, #8]
      break;
 80055f6:	e039      	b.n	800566c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6818      	ldr	r0, [r3, #0]
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	6859      	ldr	r1, [r3, #4]
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	68db      	ldr	r3, [r3, #12]
 8005604:	461a      	mov	r2, r3
 8005606:	f000 fb67 	bl	8005cd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	2150      	movs	r1, #80	; 0x50
 8005610:	4618      	mov	r0, r3
 8005612:	f000 fbc0 	bl	8005d96 <TIM_ITRx_SetConfig>
      break;
 8005616:	e029      	b.n	800566c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6818      	ldr	r0, [r3, #0]
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	6859      	ldr	r1, [r3, #4]
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	68db      	ldr	r3, [r3, #12]
 8005624:	461a      	mov	r2, r3
 8005626:	f000 fb86 	bl	8005d36 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	2160      	movs	r1, #96	; 0x60
 8005630:	4618      	mov	r0, r3
 8005632:	f000 fbb0 	bl	8005d96 <TIM_ITRx_SetConfig>
      break;
 8005636:	e019      	b.n	800566c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6818      	ldr	r0, [r3, #0]
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	6859      	ldr	r1, [r3, #4]
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	461a      	mov	r2, r3
 8005646:	f000 fb47 	bl	8005cd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	2140      	movs	r1, #64	; 0x40
 8005650:	4618      	mov	r0, r3
 8005652:	f000 fba0 	bl	8005d96 <TIM_ITRx_SetConfig>
      break;
 8005656:	e009      	b.n	800566c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4619      	mov	r1, r3
 8005662:	4610      	mov	r0, r2
 8005664:	f000 fb97 	bl	8005d96 <TIM_ITRx_SetConfig>
      break;
 8005668:	e000      	b.n	800566c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800566a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2200      	movs	r2, #0
 8005678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800567c:	2300      	movs	r3, #0
}
 800567e:	4618      	mov	r0, r3
 8005680:	3710      	adds	r7, #16
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
 8005686:	bf00      	nop
 8005688:	fffeff88 	.word	0xfffeff88

0800568c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800568c:	b480      	push	{r7}
 800568e:	b083      	sub	sp, #12
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005694:	bf00      	nop
 8005696:	370c      	adds	r7, #12
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b083      	sub	sp, #12
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80056a8:	bf00      	nop
 80056aa:	370c      	adds	r7, #12
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr

080056b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b083      	sub	sp, #12
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80056bc:	bf00      	nop
 80056be:	370c      	adds	r7, #12
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr

080056c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b083      	sub	sp, #12
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80056d0:	bf00      	nop
 80056d2:	370c      	adds	r7, #12
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr

080056dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80056dc:	b480      	push	{r7}
 80056de:	b085      	sub	sp, #20
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	4a40      	ldr	r2, [pc, #256]	; (80057f0 <TIM_Base_SetConfig+0x114>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d013      	beq.n	800571c <TIM_Base_SetConfig+0x40>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056fa:	d00f      	beq.n	800571c <TIM_Base_SetConfig+0x40>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	4a3d      	ldr	r2, [pc, #244]	; (80057f4 <TIM_Base_SetConfig+0x118>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d00b      	beq.n	800571c <TIM_Base_SetConfig+0x40>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4a3c      	ldr	r2, [pc, #240]	; (80057f8 <TIM_Base_SetConfig+0x11c>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d007      	beq.n	800571c <TIM_Base_SetConfig+0x40>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	4a3b      	ldr	r2, [pc, #236]	; (80057fc <TIM_Base_SetConfig+0x120>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d003      	beq.n	800571c <TIM_Base_SetConfig+0x40>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	4a3a      	ldr	r2, [pc, #232]	; (8005800 <TIM_Base_SetConfig+0x124>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d108      	bne.n	800572e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005722:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	68fa      	ldr	r2, [r7, #12]
 800572a:	4313      	orrs	r3, r2
 800572c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4a2f      	ldr	r2, [pc, #188]	; (80057f0 <TIM_Base_SetConfig+0x114>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d02b      	beq.n	800578e <TIM_Base_SetConfig+0xb2>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800573c:	d027      	beq.n	800578e <TIM_Base_SetConfig+0xb2>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4a2c      	ldr	r2, [pc, #176]	; (80057f4 <TIM_Base_SetConfig+0x118>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d023      	beq.n	800578e <TIM_Base_SetConfig+0xb2>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4a2b      	ldr	r2, [pc, #172]	; (80057f8 <TIM_Base_SetConfig+0x11c>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d01f      	beq.n	800578e <TIM_Base_SetConfig+0xb2>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4a2a      	ldr	r2, [pc, #168]	; (80057fc <TIM_Base_SetConfig+0x120>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d01b      	beq.n	800578e <TIM_Base_SetConfig+0xb2>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4a29      	ldr	r2, [pc, #164]	; (8005800 <TIM_Base_SetConfig+0x124>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d017      	beq.n	800578e <TIM_Base_SetConfig+0xb2>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4a28      	ldr	r2, [pc, #160]	; (8005804 <TIM_Base_SetConfig+0x128>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d013      	beq.n	800578e <TIM_Base_SetConfig+0xb2>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4a27      	ldr	r2, [pc, #156]	; (8005808 <TIM_Base_SetConfig+0x12c>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d00f      	beq.n	800578e <TIM_Base_SetConfig+0xb2>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4a26      	ldr	r2, [pc, #152]	; (800580c <TIM_Base_SetConfig+0x130>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d00b      	beq.n	800578e <TIM_Base_SetConfig+0xb2>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	4a25      	ldr	r2, [pc, #148]	; (8005810 <TIM_Base_SetConfig+0x134>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d007      	beq.n	800578e <TIM_Base_SetConfig+0xb2>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4a24      	ldr	r2, [pc, #144]	; (8005814 <TIM_Base_SetConfig+0x138>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d003      	beq.n	800578e <TIM_Base_SetConfig+0xb2>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	4a23      	ldr	r2, [pc, #140]	; (8005818 <TIM_Base_SetConfig+0x13c>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d108      	bne.n	80057a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005794:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	68db      	ldr	r3, [r3, #12]
 800579a:	68fa      	ldr	r2, [r7, #12]
 800579c:	4313      	orrs	r3, r2
 800579e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	695b      	ldr	r3, [r3, #20]
 80057aa:	4313      	orrs	r3, r2
 80057ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	68fa      	ldr	r2, [r7, #12]
 80057b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	689a      	ldr	r2, [r3, #8]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	4a0a      	ldr	r2, [pc, #40]	; (80057f0 <TIM_Base_SetConfig+0x114>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d003      	beq.n	80057d4 <TIM_Base_SetConfig+0xf8>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	4a0c      	ldr	r2, [pc, #48]	; (8005800 <TIM_Base_SetConfig+0x124>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d103      	bne.n	80057dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	691a      	ldr	r2, [r3, #16]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2201      	movs	r2, #1
 80057e0:	615a      	str	r2, [r3, #20]
}
 80057e2:	bf00      	nop
 80057e4:	3714      	adds	r7, #20
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr
 80057ee:	bf00      	nop
 80057f0:	40010000 	.word	0x40010000
 80057f4:	40000400 	.word	0x40000400
 80057f8:	40000800 	.word	0x40000800
 80057fc:	40000c00 	.word	0x40000c00
 8005800:	40010400 	.word	0x40010400
 8005804:	40014000 	.word	0x40014000
 8005808:	40014400 	.word	0x40014400
 800580c:	40014800 	.word	0x40014800
 8005810:	40001800 	.word	0x40001800
 8005814:	40001c00 	.word	0x40001c00
 8005818:	40002000 	.word	0x40002000

0800581c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800581c:	b480      	push	{r7}
 800581e:	b087      	sub	sp, #28
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6a1b      	ldr	r3, [r3, #32]
 800582a:	f023 0201 	bic.w	r2, r3, #1
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6a1b      	ldr	r3, [r3, #32]
 8005836:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	699b      	ldr	r3, [r3, #24]
 8005842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005844:	68fa      	ldr	r2, [r7, #12]
 8005846:	4b2b      	ldr	r3, [pc, #172]	; (80058f4 <TIM_OC1_SetConfig+0xd8>)
 8005848:	4013      	ands	r3, r2
 800584a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f023 0303 	bic.w	r3, r3, #3
 8005852:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	68fa      	ldr	r2, [r7, #12]
 800585a:	4313      	orrs	r3, r2
 800585c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	f023 0302 	bic.w	r3, r3, #2
 8005864:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	697a      	ldr	r2, [r7, #20]
 800586c:	4313      	orrs	r3, r2
 800586e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	4a21      	ldr	r2, [pc, #132]	; (80058f8 <TIM_OC1_SetConfig+0xdc>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d003      	beq.n	8005880 <TIM_OC1_SetConfig+0x64>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4a20      	ldr	r2, [pc, #128]	; (80058fc <TIM_OC1_SetConfig+0xe0>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d10c      	bne.n	800589a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	f023 0308 	bic.w	r3, r3, #8
 8005886:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	68db      	ldr	r3, [r3, #12]
 800588c:	697a      	ldr	r2, [r7, #20]
 800588e:	4313      	orrs	r3, r2
 8005890:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	f023 0304 	bic.w	r3, r3, #4
 8005898:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4a16      	ldr	r2, [pc, #88]	; (80058f8 <TIM_OC1_SetConfig+0xdc>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d003      	beq.n	80058aa <TIM_OC1_SetConfig+0x8e>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a15      	ldr	r2, [pc, #84]	; (80058fc <TIM_OC1_SetConfig+0xe0>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d111      	bne.n	80058ce <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80058b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	695b      	ldr	r3, [r3, #20]
 80058be:	693a      	ldr	r2, [r7, #16]
 80058c0:	4313      	orrs	r3, r2
 80058c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	699b      	ldr	r3, [r3, #24]
 80058c8:	693a      	ldr	r2, [r7, #16]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	693a      	ldr	r2, [r7, #16]
 80058d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	68fa      	ldr	r2, [r7, #12]
 80058d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	685a      	ldr	r2, [r3, #4]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	697a      	ldr	r2, [r7, #20]
 80058e6:	621a      	str	r2, [r3, #32]
}
 80058e8:	bf00      	nop
 80058ea:	371c      	adds	r7, #28
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr
 80058f4:	fffeff8f 	.word	0xfffeff8f
 80058f8:	40010000 	.word	0x40010000
 80058fc:	40010400 	.word	0x40010400

08005900 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005900:	b480      	push	{r7}
 8005902:	b087      	sub	sp, #28
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6a1b      	ldr	r3, [r3, #32]
 800590e:	f023 0210 	bic.w	r2, r3, #16
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6a1b      	ldr	r3, [r3, #32]
 800591a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	699b      	ldr	r3, [r3, #24]
 8005926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005928:	68fa      	ldr	r2, [r7, #12]
 800592a:	4b2e      	ldr	r3, [pc, #184]	; (80059e4 <TIM_OC2_SetConfig+0xe4>)
 800592c:	4013      	ands	r3, r2
 800592e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005936:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	021b      	lsls	r3, r3, #8
 800593e:	68fa      	ldr	r2, [r7, #12]
 8005940:	4313      	orrs	r3, r2
 8005942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	f023 0320 	bic.w	r3, r3, #32
 800594a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	011b      	lsls	r3, r3, #4
 8005952:	697a      	ldr	r2, [r7, #20]
 8005954:	4313      	orrs	r3, r2
 8005956:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	4a23      	ldr	r2, [pc, #140]	; (80059e8 <TIM_OC2_SetConfig+0xe8>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d003      	beq.n	8005968 <TIM_OC2_SetConfig+0x68>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	4a22      	ldr	r2, [pc, #136]	; (80059ec <TIM_OC2_SetConfig+0xec>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d10d      	bne.n	8005984 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800596e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	011b      	lsls	r3, r3, #4
 8005976:	697a      	ldr	r2, [r7, #20]
 8005978:	4313      	orrs	r3, r2
 800597a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005982:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	4a18      	ldr	r2, [pc, #96]	; (80059e8 <TIM_OC2_SetConfig+0xe8>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d003      	beq.n	8005994 <TIM_OC2_SetConfig+0x94>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	4a17      	ldr	r2, [pc, #92]	; (80059ec <TIM_OC2_SetConfig+0xec>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d113      	bne.n	80059bc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800599a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80059a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	695b      	ldr	r3, [r3, #20]
 80059a8:	009b      	lsls	r3, r3, #2
 80059aa:	693a      	ldr	r2, [r7, #16]
 80059ac:	4313      	orrs	r3, r2
 80059ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	699b      	ldr	r3, [r3, #24]
 80059b4:	009b      	lsls	r3, r3, #2
 80059b6:	693a      	ldr	r2, [r7, #16]
 80059b8:	4313      	orrs	r3, r2
 80059ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	693a      	ldr	r2, [r7, #16]
 80059c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	68fa      	ldr	r2, [r7, #12]
 80059c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	685a      	ldr	r2, [r3, #4]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	697a      	ldr	r2, [r7, #20]
 80059d4:	621a      	str	r2, [r3, #32]
}
 80059d6:	bf00      	nop
 80059d8:	371c      	adds	r7, #28
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr
 80059e2:	bf00      	nop
 80059e4:	feff8fff 	.word	0xfeff8fff
 80059e8:	40010000 	.word	0x40010000
 80059ec:	40010400 	.word	0x40010400

080059f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b087      	sub	sp, #28
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6a1b      	ldr	r3, [r3, #32]
 80059fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6a1b      	ldr	r3, [r3, #32]
 8005a0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	69db      	ldr	r3, [r3, #28]
 8005a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a18:	68fa      	ldr	r2, [r7, #12]
 8005a1a:	4b2d      	ldr	r3, [pc, #180]	; (8005ad0 <TIM_OC3_SetConfig+0xe0>)
 8005a1c:	4013      	ands	r3, r2
 8005a1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f023 0303 	bic.w	r3, r3, #3
 8005a26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	68fa      	ldr	r2, [r7, #12]
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	021b      	lsls	r3, r3, #8
 8005a40:	697a      	ldr	r2, [r7, #20]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a22      	ldr	r2, [pc, #136]	; (8005ad4 <TIM_OC3_SetConfig+0xe4>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d003      	beq.n	8005a56 <TIM_OC3_SetConfig+0x66>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a21      	ldr	r2, [pc, #132]	; (8005ad8 <TIM_OC3_SetConfig+0xe8>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d10d      	bne.n	8005a72 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	68db      	ldr	r3, [r3, #12]
 8005a62:	021b      	lsls	r3, r3, #8
 8005a64:	697a      	ldr	r2, [r7, #20]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	4a17      	ldr	r2, [pc, #92]	; (8005ad4 <TIM_OC3_SetConfig+0xe4>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d003      	beq.n	8005a82 <TIM_OC3_SetConfig+0x92>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4a16      	ldr	r2, [pc, #88]	; (8005ad8 <TIM_OC3_SetConfig+0xe8>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d113      	bne.n	8005aaa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	695b      	ldr	r3, [r3, #20]
 8005a96:	011b      	lsls	r3, r3, #4
 8005a98:	693a      	ldr	r2, [r7, #16]
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	699b      	ldr	r3, [r3, #24]
 8005aa2:	011b      	lsls	r3, r3, #4
 8005aa4:	693a      	ldr	r2, [r7, #16]
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	693a      	ldr	r2, [r7, #16]
 8005aae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	68fa      	ldr	r2, [r7, #12]
 8005ab4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	685a      	ldr	r2, [r3, #4]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	697a      	ldr	r2, [r7, #20]
 8005ac2:	621a      	str	r2, [r3, #32]
}
 8005ac4:	bf00      	nop
 8005ac6:	371c      	adds	r7, #28
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr
 8005ad0:	fffeff8f 	.word	0xfffeff8f
 8005ad4:	40010000 	.word	0x40010000
 8005ad8:	40010400 	.word	0x40010400

08005adc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b087      	sub	sp, #28
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6a1b      	ldr	r3, [r3, #32]
 8005aea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6a1b      	ldr	r3, [r3, #32]
 8005af6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	69db      	ldr	r3, [r3, #28]
 8005b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005b04:	68fa      	ldr	r2, [r7, #12]
 8005b06:	4b1e      	ldr	r3, [pc, #120]	; (8005b80 <TIM_OC4_SetConfig+0xa4>)
 8005b08:	4013      	ands	r3, r2
 8005b0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	021b      	lsls	r3, r3, #8
 8005b1a:	68fa      	ldr	r2, [r7, #12]
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	031b      	lsls	r3, r3, #12
 8005b2e:	693a      	ldr	r2, [r7, #16]
 8005b30:	4313      	orrs	r3, r2
 8005b32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	4a13      	ldr	r2, [pc, #76]	; (8005b84 <TIM_OC4_SetConfig+0xa8>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d003      	beq.n	8005b44 <TIM_OC4_SetConfig+0x68>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	4a12      	ldr	r2, [pc, #72]	; (8005b88 <TIM_OC4_SetConfig+0xac>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d109      	bne.n	8005b58 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	695b      	ldr	r3, [r3, #20]
 8005b50:	019b      	lsls	r3, r3, #6
 8005b52:	697a      	ldr	r2, [r7, #20]
 8005b54:	4313      	orrs	r3, r2
 8005b56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	697a      	ldr	r2, [r7, #20]
 8005b5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	68fa      	ldr	r2, [r7, #12]
 8005b62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	685a      	ldr	r2, [r3, #4]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	693a      	ldr	r2, [r7, #16]
 8005b70:	621a      	str	r2, [r3, #32]
}
 8005b72:	bf00      	nop
 8005b74:	371c      	adds	r7, #28
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr
 8005b7e:	bf00      	nop
 8005b80:	feff8fff 	.word	0xfeff8fff
 8005b84:	40010000 	.word	0x40010000
 8005b88:	40010400 	.word	0x40010400

08005b8c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b087      	sub	sp, #28
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a1b      	ldr	r3, [r3, #32]
 8005b9a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6a1b      	ldr	r3, [r3, #32]
 8005ba6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005bb4:	68fa      	ldr	r2, [r7, #12]
 8005bb6:	4b1b      	ldr	r3, [pc, #108]	; (8005c24 <TIM_OC5_SetConfig+0x98>)
 8005bb8:	4013      	ands	r3, r2
 8005bba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	68fa      	ldr	r2, [r7, #12]
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005bcc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	041b      	lsls	r3, r3, #16
 8005bd4:	693a      	ldr	r2, [r7, #16]
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	4a12      	ldr	r2, [pc, #72]	; (8005c28 <TIM_OC5_SetConfig+0x9c>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d003      	beq.n	8005bea <TIM_OC5_SetConfig+0x5e>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	4a11      	ldr	r2, [pc, #68]	; (8005c2c <TIM_OC5_SetConfig+0xa0>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d109      	bne.n	8005bfe <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bf0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	695b      	ldr	r3, [r3, #20]
 8005bf6:	021b      	lsls	r3, r3, #8
 8005bf8:	697a      	ldr	r2, [r7, #20]
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	697a      	ldr	r2, [r7, #20]
 8005c02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	68fa      	ldr	r2, [r7, #12]
 8005c08:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	685a      	ldr	r2, [r3, #4]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	693a      	ldr	r2, [r7, #16]
 8005c16:	621a      	str	r2, [r3, #32]
}
 8005c18:	bf00      	nop
 8005c1a:	371c      	adds	r7, #28
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr
 8005c24:	fffeff8f 	.word	0xfffeff8f
 8005c28:	40010000 	.word	0x40010000
 8005c2c:	40010400 	.word	0x40010400

08005c30 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b087      	sub	sp, #28
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6a1b      	ldr	r3, [r3, #32]
 8005c3e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6a1b      	ldr	r3, [r3, #32]
 8005c4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005c58:	68fa      	ldr	r2, [r7, #12]
 8005c5a:	4b1c      	ldr	r3, [pc, #112]	; (8005ccc <TIM_OC6_SetConfig+0x9c>)
 8005c5c:	4013      	ands	r3, r2
 8005c5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	021b      	lsls	r3, r3, #8
 8005c66:	68fa      	ldr	r2, [r7, #12]
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005c72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	051b      	lsls	r3, r3, #20
 8005c7a:	693a      	ldr	r2, [r7, #16]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	4a13      	ldr	r2, [pc, #76]	; (8005cd0 <TIM_OC6_SetConfig+0xa0>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d003      	beq.n	8005c90 <TIM_OC6_SetConfig+0x60>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	4a12      	ldr	r2, [pc, #72]	; (8005cd4 <TIM_OC6_SetConfig+0xa4>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d109      	bne.n	8005ca4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c96:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	695b      	ldr	r3, [r3, #20]
 8005c9c:	029b      	lsls	r3, r3, #10
 8005c9e:	697a      	ldr	r2, [r7, #20]
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	697a      	ldr	r2, [r7, #20]
 8005ca8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	68fa      	ldr	r2, [r7, #12]
 8005cae:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	685a      	ldr	r2, [r3, #4]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	693a      	ldr	r2, [r7, #16]
 8005cbc:	621a      	str	r2, [r3, #32]
}
 8005cbe:	bf00      	nop
 8005cc0:	371c      	adds	r7, #28
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc8:	4770      	bx	lr
 8005cca:	bf00      	nop
 8005ccc:	feff8fff 	.word	0xfeff8fff
 8005cd0:	40010000 	.word	0x40010000
 8005cd4:	40010400 	.word	0x40010400

08005cd8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b087      	sub	sp, #28
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	60f8      	str	r0, [r7, #12]
 8005ce0:	60b9      	str	r1, [r7, #8]
 8005ce2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	6a1b      	ldr	r3, [r3, #32]
 8005ce8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	6a1b      	ldr	r3, [r3, #32]
 8005cee:	f023 0201 	bic.w	r2, r3, #1
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	699b      	ldr	r3, [r3, #24]
 8005cfa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	011b      	lsls	r3, r3, #4
 8005d08:	693a      	ldr	r2, [r7, #16]
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	f023 030a 	bic.w	r3, r3, #10
 8005d14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d16:	697a      	ldr	r2, [r7, #20]
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	693a      	ldr	r2, [r7, #16]
 8005d22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	697a      	ldr	r2, [r7, #20]
 8005d28:	621a      	str	r2, [r3, #32]
}
 8005d2a:	bf00      	nop
 8005d2c:	371c      	adds	r7, #28
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr

08005d36 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d36:	b480      	push	{r7}
 8005d38:	b087      	sub	sp, #28
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	60f8      	str	r0, [r7, #12]
 8005d3e:	60b9      	str	r1, [r7, #8]
 8005d40:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	6a1b      	ldr	r3, [r3, #32]
 8005d46:	f023 0210 	bic.w	r2, r3, #16
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	699b      	ldr	r3, [r3, #24]
 8005d52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	6a1b      	ldr	r3, [r3, #32]
 8005d58:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d60:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	031b      	lsls	r3, r3, #12
 8005d66:	697a      	ldr	r2, [r7, #20]
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005d72:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	011b      	lsls	r3, r3, #4
 8005d78:	693a      	ldr	r2, [r7, #16]
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	697a      	ldr	r2, [r7, #20]
 8005d82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	693a      	ldr	r2, [r7, #16]
 8005d88:	621a      	str	r2, [r3, #32]
}
 8005d8a:	bf00      	nop
 8005d8c:	371c      	adds	r7, #28
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr

08005d96 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d96:	b480      	push	{r7}
 8005d98:	b085      	sub	sp, #20
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	6078      	str	r0, [r7, #4]
 8005d9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005dae:	683a      	ldr	r2, [r7, #0]
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	4313      	orrs	r3, r2
 8005db4:	f043 0307 	orr.w	r3, r3, #7
 8005db8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	68fa      	ldr	r2, [r7, #12]
 8005dbe:	609a      	str	r2, [r3, #8]
}
 8005dc0:	bf00      	nop
 8005dc2:	3714      	adds	r7, #20
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr

08005dcc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b087      	sub	sp, #28
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	60f8      	str	r0, [r7, #12]
 8005dd4:	60b9      	str	r1, [r7, #8]
 8005dd6:	607a      	str	r2, [r7, #4]
 8005dd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005de6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	021a      	lsls	r2, r3, #8
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	431a      	orrs	r2, r3
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	4313      	orrs	r3, r2
 8005df4:	697a      	ldr	r2, [r7, #20]
 8005df6:	4313      	orrs	r3, r2
 8005df8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	697a      	ldr	r2, [r7, #20]
 8005dfe:	609a      	str	r2, [r3, #8]
}
 8005e00:	bf00      	nop
 8005e02:	371c      	adds	r7, #28
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr

08005e0c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b087      	sub	sp, #28
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	60f8      	str	r0, [r7, #12]
 8005e14:	60b9      	str	r1, [r7, #8]
 8005e16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	f003 031f 	and.w	r3, r3, #31
 8005e1e:	2201      	movs	r2, #1
 8005e20:	fa02 f303 	lsl.w	r3, r2, r3
 8005e24:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	6a1a      	ldr	r2, [r3, #32]
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	43db      	mvns	r3, r3
 8005e2e:	401a      	ands	r2, r3
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	6a1a      	ldr	r2, [r3, #32]
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	f003 031f 	and.w	r3, r3, #31
 8005e3e:	6879      	ldr	r1, [r7, #4]
 8005e40:	fa01 f303 	lsl.w	r3, r1, r3
 8005e44:	431a      	orrs	r2, r3
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	621a      	str	r2, [r3, #32]
}
 8005e4a:	bf00      	nop
 8005e4c:	371c      	adds	r7, #28
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr
	...

08005e58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b085      	sub	sp, #20
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d101      	bne.n	8005e70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e6c:	2302      	movs	r3, #2
 8005e6e:	e06d      	b.n	8005f4c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2201      	movs	r2, #1
 8005e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2202      	movs	r2, #2
 8005e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a30      	ldr	r2, [pc, #192]	; (8005f58 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d004      	beq.n	8005ea4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a2f      	ldr	r2, [pc, #188]	; (8005f5c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d108      	bne.n	8005eb6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005eaa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	68fa      	ldr	r2, [r7, #12]
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ebc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	68fa      	ldr	r2, [r7, #12]
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	68fa      	ldr	r2, [r7, #12]
 8005ece:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a20      	ldr	r2, [pc, #128]	; (8005f58 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d022      	beq.n	8005f20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ee2:	d01d      	beq.n	8005f20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a1d      	ldr	r2, [pc, #116]	; (8005f60 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d018      	beq.n	8005f20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a1c      	ldr	r2, [pc, #112]	; (8005f64 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d013      	beq.n	8005f20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a1a      	ldr	r2, [pc, #104]	; (8005f68 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d00e      	beq.n	8005f20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a15      	ldr	r2, [pc, #84]	; (8005f5c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d009      	beq.n	8005f20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a16      	ldr	r2, [pc, #88]	; (8005f6c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d004      	beq.n	8005f20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a15      	ldr	r2, [pc, #84]	; (8005f70 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d10c      	bne.n	8005f3a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f26:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	68ba      	ldr	r2, [r7, #8]
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	68ba      	ldr	r2, [r7, #8]
 8005f38:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f4a:	2300      	movs	r3, #0
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3714      	adds	r7, #20
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr
 8005f58:	40010000 	.word	0x40010000
 8005f5c:	40010400 	.word	0x40010400
 8005f60:	40000400 	.word	0x40000400
 8005f64:	40000800 	.word	0x40000800
 8005f68:	40000c00 	.word	0x40000c00
 8005f6c:	40014000 	.word	0x40014000
 8005f70:	40001800 	.word	0x40001800

08005f74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b083      	sub	sp, #12
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f7c:	bf00      	nop
 8005f7e:	370c      	adds	r7, #12
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr

08005f88 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b083      	sub	sp, #12
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f90:	bf00      	nop
 8005f92:	370c      	adds	r7, #12
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr

08005f9c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005fa4:	bf00      	nop
 8005fa6:	370c      	adds	r7, #12
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr

08005fb0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b082      	sub	sp, #8
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d101      	bne.n	8005fc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	e040      	b.n	8006044 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d106      	bne.n	8005fd8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f7fc fca0 	bl	8002918 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2224      	movs	r2, #36	; 0x24
 8005fdc:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f022 0201 	bic.w	r2, r2, #1
 8005fec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 f972 	bl	80062d8 <UART_SetConfig>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d101      	bne.n	8005ffe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e022      	b.n	8006044 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006002:	2b00      	cmp	r3, #0
 8006004:	d002      	beq.n	800600c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f000 fc10 	bl	800682c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	685a      	ldr	r2, [r3, #4]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800601a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	689a      	ldr	r2, [r3, #8]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800602a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f042 0201 	orr.w	r2, r2, #1
 800603a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f000 fc97 	bl	8006970 <UART_CheckIdleState>
 8006042:	4603      	mov	r3, r0
}
 8006044:	4618      	mov	r0, r3
 8006046:	3708      	adds	r7, #8
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}

0800604c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b088      	sub	sp, #32
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	69db      	ldr	r3, [r3, #28]
 800605a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800606c:	69fa      	ldr	r2, [r7, #28]
 800606e:	f640 030f 	movw	r3, #2063	; 0x80f
 8006072:	4013      	ands	r3, r2
 8006074:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d113      	bne.n	80060a4 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800607c:	69fb      	ldr	r3, [r7, #28]
 800607e:	f003 0320 	and.w	r3, r3, #32
 8006082:	2b00      	cmp	r3, #0
 8006084:	d00e      	beq.n	80060a4 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006086:	69bb      	ldr	r3, [r7, #24]
 8006088:	f003 0320 	and.w	r3, r3, #32
 800608c:	2b00      	cmp	r3, #0
 800608e:	d009      	beq.n	80060a4 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006094:	2b00      	cmp	r3, #0
 8006096:	f000 8100 	beq.w	800629a <HAL_UART_IRQHandler+0x24e>
      {
        huart->RxISR(huart);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	4798      	blx	r3
      }
      return;
 80060a2:	e0fa      	b.n	800629a <HAL_UART_IRQHandler+0x24e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	f000 80d5 	beq.w	8006256 <HAL_UART_IRQHandler+0x20a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	f003 0301 	and.w	r3, r3, #1
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d105      	bne.n	80060c2 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80060b6:	69bb      	ldr	r3, [r7, #24]
 80060b8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80060bc:	2b00      	cmp	r3, #0
 80060be:	f000 80ca 	beq.w	8006256 <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80060c2:	69fb      	ldr	r3, [r7, #28]
 80060c4:	f003 0301 	and.w	r3, r3, #1
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d00e      	beq.n	80060ea <HAL_UART_IRQHandler+0x9e>
 80060cc:	69bb      	ldr	r3, [r7, #24]
 80060ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d009      	beq.n	80060ea <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	2201      	movs	r2, #1
 80060dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060e2:	f043 0201 	orr.w	r2, r3, #1
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80060ea:	69fb      	ldr	r3, [r7, #28]
 80060ec:	f003 0302 	and.w	r3, r3, #2
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d00e      	beq.n	8006112 <HAL_UART_IRQHandler+0xc6>
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	f003 0301 	and.w	r3, r3, #1
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d009      	beq.n	8006112 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	2202      	movs	r2, #2
 8006104:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800610a:	f043 0204 	orr.w	r2, r3, #4
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006112:	69fb      	ldr	r3, [r7, #28]
 8006114:	f003 0304 	and.w	r3, r3, #4
 8006118:	2b00      	cmp	r3, #0
 800611a:	d00e      	beq.n	800613a <HAL_UART_IRQHandler+0xee>
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	f003 0301 	and.w	r3, r3, #1
 8006122:	2b00      	cmp	r3, #0
 8006124:	d009      	beq.n	800613a <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	2204      	movs	r2, #4
 800612c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006132:	f043 0202 	orr.w	r2, r3, #2
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800613a:	69fb      	ldr	r3, [r7, #28]
 800613c:	f003 0308 	and.w	r3, r3, #8
 8006140:	2b00      	cmp	r3, #0
 8006142:	d013      	beq.n	800616c <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006144:	69bb      	ldr	r3, [r7, #24]
 8006146:	f003 0320 	and.w	r3, r3, #32
 800614a:	2b00      	cmp	r3, #0
 800614c:	d104      	bne.n	8006158 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006154:	2b00      	cmp	r3, #0
 8006156:	d009      	beq.n	800616c <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	2208      	movs	r2, #8
 800615e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006164:	f043 0208 	orr.w	r2, r3, #8
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800616c:	69fb      	ldr	r3, [r7, #28]
 800616e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006172:	2b00      	cmp	r3, #0
 8006174:	d00f      	beq.n	8006196 <HAL_UART_IRQHandler+0x14a>
 8006176:	69bb      	ldr	r3, [r7, #24]
 8006178:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800617c:	2b00      	cmp	r3, #0
 800617e:	d00a      	beq.n	8006196 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006188:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800618e:	f043 0220 	orr.w	r2, r3, #32
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800619a:	2b00      	cmp	r3, #0
 800619c:	d07f      	beq.n	800629e <HAL_UART_IRQHandler+0x252>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800619e:	69fb      	ldr	r3, [r7, #28]
 80061a0:	f003 0320 	and.w	r3, r3, #32
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d00c      	beq.n	80061c2 <HAL_UART_IRQHandler+0x176>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80061a8:	69bb      	ldr	r3, [r7, #24]
 80061aa:	f003 0320 	and.w	r3, r3, #32
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d007      	beq.n	80061c2 <HAL_UART_IRQHandler+0x176>
      {
        if (huart->RxISR != NULL)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d003      	beq.n	80061c2 <HAL_UART_IRQHandler+0x176>
        {
          huart->RxISR(huart);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061c6:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061d2:	2b40      	cmp	r3, #64	; 0x40
 80061d4:	d004      	beq.n	80061e0 <HAL_UART_IRQHandler+0x194>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d031      	beq.n	8006244 <HAL_UART_IRQHandler+0x1f8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f000 fc6f 	bl	8006ac4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061f0:	2b40      	cmp	r3, #64	; 0x40
 80061f2:	d123      	bne.n	800623c <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	689a      	ldr	r2, [r3, #8]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006202:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006208:	2b00      	cmp	r3, #0
 800620a:	d013      	beq.n	8006234 <HAL_UART_IRQHandler+0x1e8>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006210:	4a26      	ldr	r2, [pc, #152]	; (80062ac <HAL_UART_IRQHandler+0x260>)
 8006212:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006218:	4618      	mov	r0, r3
 800621a:	f7fc fd82 	bl	8002d22 <HAL_DMA_Abort_IT>
 800621e:	4603      	mov	r3, r0
 8006220:	2b00      	cmp	r3, #0
 8006222:	d016      	beq.n	8006252 <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006228:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800622a:	687a      	ldr	r2, [r7, #4]
 800622c:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800622e:	4610      	mov	r0, r2
 8006230:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006232:	e00e      	b.n	8006252 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f000 f845 	bl	80062c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800623a:	e00a      	b.n	8006252 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f000 f841 	bl	80062c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006242:	e006      	b.n	8006252 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f000 f83d 	bl	80062c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2200      	movs	r2, #0
 800624e:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8006250:	e025      	b.n	800629e <HAL_UART_IRQHandler+0x252>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006252:	bf00      	nop
    return;
 8006254:	e023      	b.n	800629e <HAL_UART_IRQHandler+0x252>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006256:	69fb      	ldr	r3, [r7, #28]
 8006258:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800625c:	2b00      	cmp	r3, #0
 800625e:	d00d      	beq.n	800627c <HAL_UART_IRQHandler+0x230>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006260:	69bb      	ldr	r3, [r7, #24]
 8006262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006266:	2b00      	cmp	r3, #0
 8006268:	d008      	beq.n	800627c <HAL_UART_IRQHandler+0x230>
  {
    if (huart->TxISR != NULL)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800626e:	2b00      	cmp	r3, #0
 8006270:	d017      	beq.n	80062a2 <HAL_UART_IRQHandler+0x256>
    {
      huart->TxISR(huart);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	4798      	blx	r3
    }
    return;
 800627a:	e012      	b.n	80062a2 <HAL_UART_IRQHandler+0x256>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800627c:	69fb      	ldr	r3, [r7, #28]
 800627e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006282:	2b00      	cmp	r3, #0
 8006284:	d00e      	beq.n	80062a4 <HAL_UART_IRQHandler+0x258>
 8006286:	69bb      	ldr	r3, [r7, #24]
 8006288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800628c:	2b00      	cmp	r3, #0
 800628e:	d009      	beq.n	80062a4 <HAL_UART_IRQHandler+0x258>
  {
    UART_EndTransmit_IT(huart);
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f000 fc4d 	bl	8006b30 <UART_EndTransmit_IT>
    return;
 8006296:	bf00      	nop
 8006298:	e004      	b.n	80062a4 <HAL_UART_IRQHandler+0x258>
      return;
 800629a:	bf00      	nop
 800629c:	e002      	b.n	80062a4 <HAL_UART_IRQHandler+0x258>
    return;
 800629e:	bf00      	nop
 80062a0:	e000      	b.n	80062a4 <HAL_UART_IRQHandler+0x258>
    return;
 80062a2:	bf00      	nop
  }

}
 80062a4:	3720      	adds	r7, #32
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}
 80062aa:	bf00      	nop
 80062ac:	08006b05 	.word	0x08006b05

080062b0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b083      	sub	sp, #12
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80062b8:	bf00      	nop
 80062ba:	370c      	adds	r7, #12
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr

080062c4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b083      	sub	sp, #12
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80062cc:	bf00      	nop
 80062ce:	370c      	adds	r7, #12
 80062d0:	46bd      	mov	sp, r7
 80062d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d6:	4770      	bx	lr

080062d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b088      	sub	sp, #32
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80062e0:	2300      	movs	r3, #0
 80062e2:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80062e4:	2300      	movs	r3, #0
 80062e6:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	689a      	ldr	r2, [r3, #8]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	691b      	ldr	r3, [r3, #16]
 80062f0:	431a      	orrs	r2, r3
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	695b      	ldr	r3, [r3, #20]
 80062f6:	431a      	orrs	r2, r3
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	69db      	ldr	r3, [r3, #28]
 80062fc:	4313      	orrs	r3, r2
 80062fe:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	4bb1      	ldr	r3, [pc, #708]	; (80065cc <UART_SetConfig+0x2f4>)
 8006308:	4013      	ands	r3, r2
 800630a:	687a      	ldr	r2, [r7, #4]
 800630c:	6812      	ldr	r2, [r2, #0]
 800630e:	6939      	ldr	r1, [r7, #16]
 8006310:	430b      	orrs	r3, r1
 8006312:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	68da      	ldr	r2, [r3, #12]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	430a      	orrs	r2, r1
 8006328:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	699b      	ldr	r3, [r3, #24]
 800632e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6a1b      	ldr	r3, [r3, #32]
 8006334:	693a      	ldr	r2, [r7, #16]
 8006336:	4313      	orrs	r3, r2
 8006338:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	693a      	ldr	r2, [r7, #16]
 800634a:	430a      	orrs	r2, r1
 800634c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a9f      	ldr	r2, [pc, #636]	; (80065d0 <UART_SetConfig+0x2f8>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d121      	bne.n	800639c <UART_SetConfig+0xc4>
 8006358:	4b9e      	ldr	r3, [pc, #632]	; (80065d4 <UART_SetConfig+0x2fc>)
 800635a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800635e:	f003 0303 	and.w	r3, r3, #3
 8006362:	2b03      	cmp	r3, #3
 8006364:	d816      	bhi.n	8006394 <UART_SetConfig+0xbc>
 8006366:	a201      	add	r2, pc, #4	; (adr r2, 800636c <UART_SetConfig+0x94>)
 8006368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800636c:	0800637d 	.word	0x0800637d
 8006370:	08006389 	.word	0x08006389
 8006374:	08006383 	.word	0x08006383
 8006378:	0800638f 	.word	0x0800638f
 800637c:	2301      	movs	r3, #1
 800637e:	77fb      	strb	r3, [r7, #31]
 8006380:	e151      	b.n	8006626 <UART_SetConfig+0x34e>
 8006382:	2302      	movs	r3, #2
 8006384:	77fb      	strb	r3, [r7, #31]
 8006386:	e14e      	b.n	8006626 <UART_SetConfig+0x34e>
 8006388:	2304      	movs	r3, #4
 800638a:	77fb      	strb	r3, [r7, #31]
 800638c:	e14b      	b.n	8006626 <UART_SetConfig+0x34e>
 800638e:	2308      	movs	r3, #8
 8006390:	77fb      	strb	r3, [r7, #31]
 8006392:	e148      	b.n	8006626 <UART_SetConfig+0x34e>
 8006394:	2310      	movs	r3, #16
 8006396:	77fb      	strb	r3, [r7, #31]
 8006398:	bf00      	nop
 800639a:	e144      	b.n	8006626 <UART_SetConfig+0x34e>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a8d      	ldr	r2, [pc, #564]	; (80065d8 <UART_SetConfig+0x300>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d134      	bne.n	8006410 <UART_SetConfig+0x138>
 80063a6:	4b8b      	ldr	r3, [pc, #556]	; (80065d4 <UART_SetConfig+0x2fc>)
 80063a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063ac:	f003 030c 	and.w	r3, r3, #12
 80063b0:	2b0c      	cmp	r3, #12
 80063b2:	d829      	bhi.n	8006408 <UART_SetConfig+0x130>
 80063b4:	a201      	add	r2, pc, #4	; (adr r2, 80063bc <UART_SetConfig+0xe4>)
 80063b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ba:	bf00      	nop
 80063bc:	080063f1 	.word	0x080063f1
 80063c0:	08006409 	.word	0x08006409
 80063c4:	08006409 	.word	0x08006409
 80063c8:	08006409 	.word	0x08006409
 80063cc:	080063fd 	.word	0x080063fd
 80063d0:	08006409 	.word	0x08006409
 80063d4:	08006409 	.word	0x08006409
 80063d8:	08006409 	.word	0x08006409
 80063dc:	080063f7 	.word	0x080063f7
 80063e0:	08006409 	.word	0x08006409
 80063e4:	08006409 	.word	0x08006409
 80063e8:	08006409 	.word	0x08006409
 80063ec:	08006403 	.word	0x08006403
 80063f0:	2300      	movs	r3, #0
 80063f2:	77fb      	strb	r3, [r7, #31]
 80063f4:	e117      	b.n	8006626 <UART_SetConfig+0x34e>
 80063f6:	2302      	movs	r3, #2
 80063f8:	77fb      	strb	r3, [r7, #31]
 80063fa:	e114      	b.n	8006626 <UART_SetConfig+0x34e>
 80063fc:	2304      	movs	r3, #4
 80063fe:	77fb      	strb	r3, [r7, #31]
 8006400:	e111      	b.n	8006626 <UART_SetConfig+0x34e>
 8006402:	2308      	movs	r3, #8
 8006404:	77fb      	strb	r3, [r7, #31]
 8006406:	e10e      	b.n	8006626 <UART_SetConfig+0x34e>
 8006408:	2310      	movs	r3, #16
 800640a:	77fb      	strb	r3, [r7, #31]
 800640c:	bf00      	nop
 800640e:	e10a      	b.n	8006626 <UART_SetConfig+0x34e>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a71      	ldr	r2, [pc, #452]	; (80065dc <UART_SetConfig+0x304>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d120      	bne.n	800645c <UART_SetConfig+0x184>
 800641a:	4b6e      	ldr	r3, [pc, #440]	; (80065d4 <UART_SetConfig+0x2fc>)
 800641c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006420:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006424:	2b10      	cmp	r3, #16
 8006426:	d00f      	beq.n	8006448 <UART_SetConfig+0x170>
 8006428:	2b10      	cmp	r3, #16
 800642a:	d802      	bhi.n	8006432 <UART_SetConfig+0x15a>
 800642c:	2b00      	cmp	r3, #0
 800642e:	d005      	beq.n	800643c <UART_SetConfig+0x164>
 8006430:	e010      	b.n	8006454 <UART_SetConfig+0x17c>
 8006432:	2b20      	cmp	r3, #32
 8006434:	d005      	beq.n	8006442 <UART_SetConfig+0x16a>
 8006436:	2b30      	cmp	r3, #48	; 0x30
 8006438:	d009      	beq.n	800644e <UART_SetConfig+0x176>
 800643a:	e00b      	b.n	8006454 <UART_SetConfig+0x17c>
 800643c:	2300      	movs	r3, #0
 800643e:	77fb      	strb	r3, [r7, #31]
 8006440:	e0f1      	b.n	8006626 <UART_SetConfig+0x34e>
 8006442:	2302      	movs	r3, #2
 8006444:	77fb      	strb	r3, [r7, #31]
 8006446:	e0ee      	b.n	8006626 <UART_SetConfig+0x34e>
 8006448:	2304      	movs	r3, #4
 800644a:	77fb      	strb	r3, [r7, #31]
 800644c:	e0eb      	b.n	8006626 <UART_SetConfig+0x34e>
 800644e:	2308      	movs	r3, #8
 8006450:	77fb      	strb	r3, [r7, #31]
 8006452:	e0e8      	b.n	8006626 <UART_SetConfig+0x34e>
 8006454:	2310      	movs	r3, #16
 8006456:	77fb      	strb	r3, [r7, #31]
 8006458:	bf00      	nop
 800645a:	e0e4      	b.n	8006626 <UART_SetConfig+0x34e>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a5f      	ldr	r2, [pc, #380]	; (80065e0 <UART_SetConfig+0x308>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d120      	bne.n	80064a8 <UART_SetConfig+0x1d0>
 8006466:	4b5b      	ldr	r3, [pc, #364]	; (80065d4 <UART_SetConfig+0x2fc>)
 8006468:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800646c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006470:	2b40      	cmp	r3, #64	; 0x40
 8006472:	d00f      	beq.n	8006494 <UART_SetConfig+0x1bc>
 8006474:	2b40      	cmp	r3, #64	; 0x40
 8006476:	d802      	bhi.n	800647e <UART_SetConfig+0x1a6>
 8006478:	2b00      	cmp	r3, #0
 800647a:	d005      	beq.n	8006488 <UART_SetConfig+0x1b0>
 800647c:	e010      	b.n	80064a0 <UART_SetConfig+0x1c8>
 800647e:	2b80      	cmp	r3, #128	; 0x80
 8006480:	d005      	beq.n	800648e <UART_SetConfig+0x1b6>
 8006482:	2bc0      	cmp	r3, #192	; 0xc0
 8006484:	d009      	beq.n	800649a <UART_SetConfig+0x1c2>
 8006486:	e00b      	b.n	80064a0 <UART_SetConfig+0x1c8>
 8006488:	2300      	movs	r3, #0
 800648a:	77fb      	strb	r3, [r7, #31]
 800648c:	e0cb      	b.n	8006626 <UART_SetConfig+0x34e>
 800648e:	2302      	movs	r3, #2
 8006490:	77fb      	strb	r3, [r7, #31]
 8006492:	e0c8      	b.n	8006626 <UART_SetConfig+0x34e>
 8006494:	2304      	movs	r3, #4
 8006496:	77fb      	strb	r3, [r7, #31]
 8006498:	e0c5      	b.n	8006626 <UART_SetConfig+0x34e>
 800649a:	2308      	movs	r3, #8
 800649c:	77fb      	strb	r3, [r7, #31]
 800649e:	e0c2      	b.n	8006626 <UART_SetConfig+0x34e>
 80064a0:	2310      	movs	r3, #16
 80064a2:	77fb      	strb	r3, [r7, #31]
 80064a4:	bf00      	nop
 80064a6:	e0be      	b.n	8006626 <UART_SetConfig+0x34e>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a4d      	ldr	r2, [pc, #308]	; (80065e4 <UART_SetConfig+0x30c>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d124      	bne.n	80064fc <UART_SetConfig+0x224>
 80064b2:	4b48      	ldr	r3, [pc, #288]	; (80065d4 <UART_SetConfig+0x2fc>)
 80064b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064c0:	d012      	beq.n	80064e8 <UART_SetConfig+0x210>
 80064c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064c6:	d802      	bhi.n	80064ce <UART_SetConfig+0x1f6>
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d007      	beq.n	80064dc <UART_SetConfig+0x204>
 80064cc:	e012      	b.n	80064f4 <UART_SetConfig+0x21c>
 80064ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064d2:	d006      	beq.n	80064e2 <UART_SetConfig+0x20a>
 80064d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064d8:	d009      	beq.n	80064ee <UART_SetConfig+0x216>
 80064da:	e00b      	b.n	80064f4 <UART_SetConfig+0x21c>
 80064dc:	2300      	movs	r3, #0
 80064de:	77fb      	strb	r3, [r7, #31]
 80064e0:	e0a1      	b.n	8006626 <UART_SetConfig+0x34e>
 80064e2:	2302      	movs	r3, #2
 80064e4:	77fb      	strb	r3, [r7, #31]
 80064e6:	e09e      	b.n	8006626 <UART_SetConfig+0x34e>
 80064e8:	2304      	movs	r3, #4
 80064ea:	77fb      	strb	r3, [r7, #31]
 80064ec:	e09b      	b.n	8006626 <UART_SetConfig+0x34e>
 80064ee:	2308      	movs	r3, #8
 80064f0:	77fb      	strb	r3, [r7, #31]
 80064f2:	e098      	b.n	8006626 <UART_SetConfig+0x34e>
 80064f4:	2310      	movs	r3, #16
 80064f6:	77fb      	strb	r3, [r7, #31]
 80064f8:	bf00      	nop
 80064fa:	e094      	b.n	8006626 <UART_SetConfig+0x34e>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a39      	ldr	r2, [pc, #228]	; (80065e8 <UART_SetConfig+0x310>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d124      	bne.n	8006550 <UART_SetConfig+0x278>
 8006506:	4b33      	ldr	r3, [pc, #204]	; (80065d4 <UART_SetConfig+0x2fc>)
 8006508:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800650c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006510:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006514:	d012      	beq.n	800653c <UART_SetConfig+0x264>
 8006516:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800651a:	d802      	bhi.n	8006522 <UART_SetConfig+0x24a>
 800651c:	2b00      	cmp	r3, #0
 800651e:	d007      	beq.n	8006530 <UART_SetConfig+0x258>
 8006520:	e012      	b.n	8006548 <UART_SetConfig+0x270>
 8006522:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006526:	d006      	beq.n	8006536 <UART_SetConfig+0x25e>
 8006528:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800652c:	d009      	beq.n	8006542 <UART_SetConfig+0x26a>
 800652e:	e00b      	b.n	8006548 <UART_SetConfig+0x270>
 8006530:	2301      	movs	r3, #1
 8006532:	77fb      	strb	r3, [r7, #31]
 8006534:	e077      	b.n	8006626 <UART_SetConfig+0x34e>
 8006536:	2302      	movs	r3, #2
 8006538:	77fb      	strb	r3, [r7, #31]
 800653a:	e074      	b.n	8006626 <UART_SetConfig+0x34e>
 800653c:	2304      	movs	r3, #4
 800653e:	77fb      	strb	r3, [r7, #31]
 8006540:	e071      	b.n	8006626 <UART_SetConfig+0x34e>
 8006542:	2308      	movs	r3, #8
 8006544:	77fb      	strb	r3, [r7, #31]
 8006546:	e06e      	b.n	8006626 <UART_SetConfig+0x34e>
 8006548:	2310      	movs	r3, #16
 800654a:	77fb      	strb	r3, [r7, #31]
 800654c:	bf00      	nop
 800654e:	e06a      	b.n	8006626 <UART_SetConfig+0x34e>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a25      	ldr	r2, [pc, #148]	; (80065ec <UART_SetConfig+0x314>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d124      	bne.n	80065a4 <UART_SetConfig+0x2cc>
 800655a:	4b1e      	ldr	r3, [pc, #120]	; (80065d4 <UART_SetConfig+0x2fc>)
 800655c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006560:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006564:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006568:	d012      	beq.n	8006590 <UART_SetConfig+0x2b8>
 800656a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800656e:	d802      	bhi.n	8006576 <UART_SetConfig+0x29e>
 8006570:	2b00      	cmp	r3, #0
 8006572:	d007      	beq.n	8006584 <UART_SetConfig+0x2ac>
 8006574:	e012      	b.n	800659c <UART_SetConfig+0x2c4>
 8006576:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800657a:	d006      	beq.n	800658a <UART_SetConfig+0x2b2>
 800657c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006580:	d009      	beq.n	8006596 <UART_SetConfig+0x2be>
 8006582:	e00b      	b.n	800659c <UART_SetConfig+0x2c4>
 8006584:	2300      	movs	r3, #0
 8006586:	77fb      	strb	r3, [r7, #31]
 8006588:	e04d      	b.n	8006626 <UART_SetConfig+0x34e>
 800658a:	2302      	movs	r3, #2
 800658c:	77fb      	strb	r3, [r7, #31]
 800658e:	e04a      	b.n	8006626 <UART_SetConfig+0x34e>
 8006590:	2304      	movs	r3, #4
 8006592:	77fb      	strb	r3, [r7, #31]
 8006594:	e047      	b.n	8006626 <UART_SetConfig+0x34e>
 8006596:	2308      	movs	r3, #8
 8006598:	77fb      	strb	r3, [r7, #31]
 800659a:	e044      	b.n	8006626 <UART_SetConfig+0x34e>
 800659c:	2310      	movs	r3, #16
 800659e:	77fb      	strb	r3, [r7, #31]
 80065a0:	bf00      	nop
 80065a2:	e040      	b.n	8006626 <UART_SetConfig+0x34e>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a11      	ldr	r2, [pc, #68]	; (80065f0 <UART_SetConfig+0x318>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d139      	bne.n	8006622 <UART_SetConfig+0x34a>
 80065ae:	4b09      	ldr	r3, [pc, #36]	; (80065d4 <UART_SetConfig+0x2fc>)
 80065b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80065b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80065bc:	d027      	beq.n	800660e <UART_SetConfig+0x336>
 80065be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80065c2:	d817      	bhi.n	80065f4 <UART_SetConfig+0x31c>
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d01c      	beq.n	8006602 <UART_SetConfig+0x32a>
 80065c8:	e027      	b.n	800661a <UART_SetConfig+0x342>
 80065ca:	bf00      	nop
 80065cc:	efff69f3 	.word	0xefff69f3
 80065d0:	40011000 	.word	0x40011000
 80065d4:	40023800 	.word	0x40023800
 80065d8:	40004400 	.word	0x40004400
 80065dc:	40004800 	.word	0x40004800
 80065e0:	40004c00 	.word	0x40004c00
 80065e4:	40005000 	.word	0x40005000
 80065e8:	40011400 	.word	0x40011400
 80065ec:	40007800 	.word	0x40007800
 80065f0:	40007c00 	.word	0x40007c00
 80065f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065f8:	d006      	beq.n	8006608 <UART_SetConfig+0x330>
 80065fa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80065fe:	d009      	beq.n	8006614 <UART_SetConfig+0x33c>
 8006600:	e00b      	b.n	800661a <UART_SetConfig+0x342>
 8006602:	2300      	movs	r3, #0
 8006604:	77fb      	strb	r3, [r7, #31]
 8006606:	e00e      	b.n	8006626 <UART_SetConfig+0x34e>
 8006608:	2302      	movs	r3, #2
 800660a:	77fb      	strb	r3, [r7, #31]
 800660c:	e00b      	b.n	8006626 <UART_SetConfig+0x34e>
 800660e:	2304      	movs	r3, #4
 8006610:	77fb      	strb	r3, [r7, #31]
 8006612:	e008      	b.n	8006626 <UART_SetConfig+0x34e>
 8006614:	2308      	movs	r3, #8
 8006616:	77fb      	strb	r3, [r7, #31]
 8006618:	e005      	b.n	8006626 <UART_SetConfig+0x34e>
 800661a:	2310      	movs	r3, #16
 800661c:	77fb      	strb	r3, [r7, #31]
 800661e:	bf00      	nop
 8006620:	e001      	b.n	8006626 <UART_SetConfig+0x34e>
 8006622:	2310      	movs	r3, #16
 8006624:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	69db      	ldr	r3, [r3, #28]
 800662a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800662e:	d17f      	bne.n	8006730 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8006630:	7ffb      	ldrb	r3, [r7, #31]
 8006632:	2b08      	cmp	r3, #8
 8006634:	d85c      	bhi.n	80066f0 <UART_SetConfig+0x418>
 8006636:	a201      	add	r2, pc, #4	; (adr r2, 800663c <UART_SetConfig+0x364>)
 8006638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800663c:	08006661 	.word	0x08006661
 8006640:	08006681 	.word	0x08006681
 8006644:	080066a1 	.word	0x080066a1
 8006648:	080066f1 	.word	0x080066f1
 800664c:	080066b9 	.word	0x080066b9
 8006650:	080066f1 	.word	0x080066f1
 8006654:	080066f1 	.word	0x080066f1
 8006658:	080066f1 	.word	0x080066f1
 800665c:	080066d9 	.word	0x080066d9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006660:	f7fd fa4c 	bl	8003afc <HAL_RCC_GetPCLK1Freq>
 8006664:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	005a      	lsls	r2, r3, #1
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	085b      	lsrs	r3, r3, #1
 8006670:	441a      	add	r2, r3
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	fbb2 f3f3 	udiv	r3, r2, r3
 800667a:	b29b      	uxth	r3, r3
 800667c:	61bb      	str	r3, [r7, #24]
        break;
 800667e:	e03a      	b.n	80066f6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006680:	f7fd fa50 	bl	8003b24 <HAL_RCC_GetPCLK2Freq>
 8006684:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	005a      	lsls	r2, r3, #1
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	085b      	lsrs	r3, r3, #1
 8006690:	441a      	add	r2, r3
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	fbb2 f3f3 	udiv	r3, r2, r3
 800669a:	b29b      	uxth	r3, r3
 800669c:	61bb      	str	r3, [r7, #24]
        break;
 800669e:	e02a      	b.n	80066f6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	085a      	lsrs	r2, r3, #1
 80066a6:	4b5f      	ldr	r3, [pc, #380]	; (8006824 <UART_SetConfig+0x54c>)
 80066a8:	4413      	add	r3, r2
 80066aa:	687a      	ldr	r2, [r7, #4]
 80066ac:	6852      	ldr	r2, [r2, #4]
 80066ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	61bb      	str	r3, [r7, #24]
        break;
 80066b6:	e01e      	b.n	80066f6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066b8:	f7fd f93c 	bl	8003934 <HAL_RCC_GetSysClockFreq>
 80066bc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	005a      	lsls	r2, r3, #1
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	085b      	lsrs	r3, r3, #1
 80066c8:	441a      	add	r2, r3
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80066d2:	b29b      	uxth	r3, r3
 80066d4:	61bb      	str	r3, [r7, #24]
        break;
 80066d6:	e00e      	b.n	80066f6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	085b      	lsrs	r3, r3, #1
 80066de:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	61bb      	str	r3, [r7, #24]
        break;
 80066ee:	e002      	b.n	80066f6 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 80066f0:	2301      	movs	r3, #1
 80066f2:	75fb      	strb	r3, [r7, #23]
        break;
 80066f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066f6:	69bb      	ldr	r3, [r7, #24]
 80066f8:	2b0f      	cmp	r3, #15
 80066fa:	d916      	bls.n	800672a <UART_SetConfig+0x452>
 80066fc:	69bb      	ldr	r3, [r7, #24]
 80066fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006702:	d212      	bcs.n	800672a <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006704:	69bb      	ldr	r3, [r7, #24]
 8006706:	b29b      	uxth	r3, r3
 8006708:	f023 030f 	bic.w	r3, r3, #15
 800670c:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800670e:	69bb      	ldr	r3, [r7, #24]
 8006710:	085b      	lsrs	r3, r3, #1
 8006712:	b29b      	uxth	r3, r3
 8006714:	f003 0307 	and.w	r3, r3, #7
 8006718:	b29a      	uxth	r2, r3
 800671a:	897b      	ldrh	r3, [r7, #10]
 800671c:	4313      	orrs	r3, r2
 800671e:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	897a      	ldrh	r2, [r7, #10]
 8006726:	60da      	str	r2, [r3, #12]
 8006728:	e070      	b.n	800680c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800672a:	2301      	movs	r3, #1
 800672c:	75fb      	strb	r3, [r7, #23]
 800672e:	e06d      	b.n	800680c <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8006730:	7ffb      	ldrb	r3, [r7, #31]
 8006732:	2b08      	cmp	r3, #8
 8006734:	d859      	bhi.n	80067ea <UART_SetConfig+0x512>
 8006736:	a201      	add	r2, pc, #4	; (adr r2, 800673c <UART_SetConfig+0x464>)
 8006738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800673c:	08006761 	.word	0x08006761
 8006740:	0800677f 	.word	0x0800677f
 8006744:	0800679d 	.word	0x0800679d
 8006748:	080067eb 	.word	0x080067eb
 800674c:	080067b5 	.word	0x080067b5
 8006750:	080067eb 	.word	0x080067eb
 8006754:	080067eb 	.word	0x080067eb
 8006758:	080067eb 	.word	0x080067eb
 800675c:	080067d3 	.word	0x080067d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006760:	f7fd f9cc 	bl	8003afc <HAL_RCC_GetPCLK1Freq>
 8006764:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	085a      	lsrs	r2, r3, #1
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	441a      	add	r2, r3
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	fbb2 f3f3 	udiv	r3, r2, r3
 8006778:	b29b      	uxth	r3, r3
 800677a:	61bb      	str	r3, [r7, #24]
        break;
 800677c:	e038      	b.n	80067f0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800677e:	f7fd f9d1 	bl	8003b24 <HAL_RCC_GetPCLK2Freq>
 8006782:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	085a      	lsrs	r2, r3, #1
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	441a      	add	r2, r3
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	fbb2 f3f3 	udiv	r3, r2, r3
 8006796:	b29b      	uxth	r3, r3
 8006798:	61bb      	str	r3, [r7, #24]
        break;
 800679a:	e029      	b.n	80067f0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	085a      	lsrs	r2, r3, #1
 80067a2:	4b21      	ldr	r3, [pc, #132]	; (8006828 <UART_SetConfig+0x550>)
 80067a4:	4413      	add	r3, r2
 80067a6:	687a      	ldr	r2, [r7, #4]
 80067a8:	6852      	ldr	r2, [r2, #4]
 80067aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80067ae:	b29b      	uxth	r3, r3
 80067b0:	61bb      	str	r3, [r7, #24]
        break;
 80067b2:	e01d      	b.n	80067f0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067b4:	f7fd f8be 	bl	8003934 <HAL_RCC_GetSysClockFreq>
 80067b8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	085a      	lsrs	r2, r3, #1
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	441a      	add	r2, r3
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80067cc:	b29b      	uxth	r3, r3
 80067ce:	61bb      	str	r3, [r7, #24]
        break;
 80067d0:	e00e      	b.n	80067f0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	085b      	lsrs	r3, r3, #1
 80067d8:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	61bb      	str	r3, [r7, #24]
        break;
 80067e8:	e002      	b.n	80067f0 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 80067ea:	2301      	movs	r3, #1
 80067ec:	75fb      	strb	r3, [r7, #23]
        break;
 80067ee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067f0:	69bb      	ldr	r3, [r7, #24]
 80067f2:	2b0f      	cmp	r3, #15
 80067f4:	d908      	bls.n	8006808 <UART_SetConfig+0x530>
 80067f6:	69bb      	ldr	r3, [r7, #24]
 80067f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067fc:	d204      	bcs.n	8006808 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	69ba      	ldr	r2, [r7, #24]
 8006804:	60da      	str	r2, [r3, #12]
 8006806:	e001      	b.n	800680c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8006808:	2301      	movs	r3, #1
 800680a:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2200      	movs	r2, #0
 8006810:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2200      	movs	r2, #0
 8006816:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8006818:	7dfb      	ldrb	r3, [r7, #23]
}
 800681a:	4618      	mov	r0, r3
 800681c:	3720      	adds	r7, #32
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}
 8006822:	bf00      	nop
 8006824:	01e84800 	.word	0x01e84800
 8006828:	00f42400 	.word	0x00f42400

0800682c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800682c:	b480      	push	{r7}
 800682e:	b083      	sub	sp, #12
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006838:	f003 0301 	and.w	r3, r3, #1
 800683c:	2b00      	cmp	r3, #0
 800683e:	d00a      	beq.n	8006856 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	430a      	orrs	r2, r1
 8006854:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800685a:	f003 0302 	and.w	r3, r3, #2
 800685e:	2b00      	cmp	r3, #0
 8006860:	d00a      	beq.n	8006878 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	430a      	orrs	r2, r1
 8006876:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800687c:	f003 0304 	and.w	r3, r3, #4
 8006880:	2b00      	cmp	r3, #0
 8006882:	d00a      	beq.n	800689a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	430a      	orrs	r2, r1
 8006898:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800689e:	f003 0308 	and.w	r3, r3, #8
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d00a      	beq.n	80068bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	430a      	orrs	r2, r1
 80068ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c0:	f003 0310 	and.w	r3, r3, #16
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d00a      	beq.n	80068de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	689b      	ldr	r3, [r3, #8]
 80068ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	430a      	orrs	r2, r1
 80068dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e2:	f003 0320 	and.w	r3, r3, #32
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d00a      	beq.n	8006900 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	689b      	ldr	r3, [r3, #8]
 80068f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	430a      	orrs	r2, r1
 80068fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006908:	2b00      	cmp	r3, #0
 800690a:	d01a      	beq.n	8006942 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	430a      	orrs	r2, r1
 8006920:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006926:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800692a:	d10a      	bne.n	8006942 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	430a      	orrs	r2, r1
 8006940:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800694a:	2b00      	cmp	r3, #0
 800694c:	d00a      	beq.n	8006964 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	430a      	orrs	r2, r1
 8006962:	605a      	str	r2, [r3, #4]
  }
}
 8006964:	bf00      	nop
 8006966:	370c      	adds	r7, #12
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr

08006970 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b086      	sub	sp, #24
 8006974:	af02      	add	r7, sp, #8
 8006976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2200      	movs	r2, #0
 800697c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800697e:	f7fc f891 	bl	8002aa4 <HAL_GetTick>
 8006982:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f003 0308 	and.w	r3, r3, #8
 800698e:	2b08      	cmp	r3, #8
 8006990:	d10e      	bne.n	80069b0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006992:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006996:	9300      	str	r3, [sp, #0]
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	2200      	movs	r2, #0
 800699c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f000 f814 	bl	80069ce <UART_WaitOnFlagUntilTimeout>
 80069a6:	4603      	mov	r3, r0
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d001      	beq.n	80069b0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069ac:	2303      	movs	r3, #3
 80069ae:	e00a      	b.n	80069c6 <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2220      	movs	r2, #32
 80069b4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2220      	movs	r2, #32
 80069ba:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2200      	movs	r2, #0
 80069c0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80069c4:	2300      	movs	r3, #0
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3710      	adds	r7, #16
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}

080069ce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80069ce:	b580      	push	{r7, lr}
 80069d0:	b084      	sub	sp, #16
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	60f8      	str	r0, [r7, #12]
 80069d6:	60b9      	str	r1, [r7, #8]
 80069d8:	603b      	str	r3, [r7, #0]
 80069da:	4613      	mov	r3, r2
 80069dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069de:	e05d      	b.n	8006a9c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069e0:	69bb      	ldr	r3, [r7, #24]
 80069e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069e6:	d059      	beq.n	8006a9c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069e8:	f7fc f85c 	bl	8002aa4 <HAL_GetTick>
 80069ec:	4602      	mov	r2, r0
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	1ad3      	subs	r3, r2, r3
 80069f2:	69ba      	ldr	r2, [r7, #24]
 80069f4:	429a      	cmp	r2, r3
 80069f6:	d302      	bcc.n	80069fe <UART_WaitOnFlagUntilTimeout+0x30>
 80069f8:	69bb      	ldr	r3, [r7, #24]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d11b      	bne.n	8006a36 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	681a      	ldr	r2, [r3, #0]
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006a0c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	689a      	ldr	r2, [r3, #8]
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f022 0201 	bic.w	r2, r2, #1
 8006a1c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2220      	movs	r2, #32
 8006a22:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2220      	movs	r2, #32
 8006a28:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8006a32:	2303      	movs	r3, #3
 8006a34:	e042      	b.n	8006abc <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f003 0304 	and.w	r3, r3, #4
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d02b      	beq.n	8006a9c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	69db      	ldr	r3, [r3, #28]
 8006a4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a52:	d123      	bne.n	8006a9c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a5c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	681a      	ldr	r2, [r3, #0]
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006a6c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	689a      	ldr	r2, [r3, #8]
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f022 0201 	bic.w	r2, r2, #1
 8006a7c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2220      	movs	r2, #32
 8006a82:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2220      	movs	r2, #32
 8006a88:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	2220      	movs	r2, #32
 8006a8e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2200      	movs	r2, #0
 8006a94:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8006a98:	2303      	movs	r3, #3
 8006a9a:	e00f      	b.n	8006abc <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	69da      	ldr	r2, [r3, #28]
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	4013      	ands	r3, r2
 8006aa6:	68ba      	ldr	r2, [r7, #8]
 8006aa8:	429a      	cmp	r2, r3
 8006aaa:	bf0c      	ite	eq
 8006aac:	2301      	moveq	r3, #1
 8006aae:	2300      	movne	r3, #0
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	461a      	mov	r2, r3
 8006ab4:	79fb      	ldrb	r3, [r7, #7]
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	d092      	beq.n	80069e0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006aba:	2300      	movs	r3, #0
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3710      	adds	r7, #16
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}

08006ac4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b083      	sub	sp, #12
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	681a      	ldr	r2, [r3, #0]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006ada:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	689a      	ldr	r2, [r3, #8]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f022 0201 	bic.w	r2, r2, #1
 8006aea:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2220      	movs	r2, #32
 8006af0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2200      	movs	r2, #0
 8006af6:	661a      	str	r2, [r3, #96]	; 0x60
}
 8006af8:	bf00      	nop
 8006afa:	370c      	adds	r7, #12
 8006afc:	46bd      	mov	sp, r7
 8006afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b02:	4770      	bx	lr

08006b04 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b084      	sub	sp, #16
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b10:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2200      	movs	r2, #0
 8006b16:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b22:	68f8      	ldr	r0, [r7, #12]
 8006b24:	f7ff fbce 	bl	80062c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b28:	bf00      	nop
 8006b2a:	3710      	adds	r7, #16
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}

08006b30 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b082      	sub	sp, #8
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	681a      	ldr	r2, [r3, #0]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b46:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2220      	movs	r2, #32
 8006b4c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2200      	movs	r2, #0
 8006b52:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f7ff fbab 	bl	80062b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b5a:	bf00      	nop
 8006b5c:	3708      	adds	r7, #8
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}
	...

08006b64 <__libc_init_array>:
 8006b64:	b570      	push	{r4, r5, r6, lr}
 8006b66:	4e0d      	ldr	r6, [pc, #52]	; (8006b9c <__libc_init_array+0x38>)
 8006b68:	4c0d      	ldr	r4, [pc, #52]	; (8006ba0 <__libc_init_array+0x3c>)
 8006b6a:	1ba4      	subs	r4, r4, r6
 8006b6c:	10a4      	asrs	r4, r4, #2
 8006b6e:	2500      	movs	r5, #0
 8006b70:	42a5      	cmp	r5, r4
 8006b72:	d109      	bne.n	8006b88 <__libc_init_array+0x24>
 8006b74:	4e0b      	ldr	r6, [pc, #44]	; (8006ba4 <__libc_init_array+0x40>)
 8006b76:	4c0c      	ldr	r4, [pc, #48]	; (8006ba8 <__libc_init_array+0x44>)
 8006b78:	f000 f862 	bl	8006c40 <_init>
 8006b7c:	1ba4      	subs	r4, r4, r6
 8006b7e:	10a4      	asrs	r4, r4, #2
 8006b80:	2500      	movs	r5, #0
 8006b82:	42a5      	cmp	r5, r4
 8006b84:	d105      	bne.n	8006b92 <__libc_init_array+0x2e>
 8006b86:	bd70      	pop	{r4, r5, r6, pc}
 8006b88:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006b8c:	4798      	blx	r3
 8006b8e:	3501      	adds	r5, #1
 8006b90:	e7ee      	b.n	8006b70 <__libc_init_array+0xc>
 8006b92:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006b96:	4798      	blx	r3
 8006b98:	3501      	adds	r5, #1
 8006b9a:	e7f2      	b.n	8006b82 <__libc_init_array+0x1e>
 8006b9c:	08006c7c 	.word	0x08006c7c
 8006ba0:	08006c7c 	.word	0x08006c7c
 8006ba4:	08006c7c 	.word	0x08006c7c
 8006ba8:	08006c80 	.word	0x08006c80

08006bac <memset>:
 8006bac:	4402      	add	r2, r0
 8006bae:	4603      	mov	r3, r0
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d100      	bne.n	8006bb6 <memset+0xa>
 8006bb4:	4770      	bx	lr
 8006bb6:	f803 1b01 	strb.w	r1, [r3], #1
 8006bba:	e7f9      	b.n	8006bb0 <memset+0x4>

08006bbc <floorf>:
 8006bbc:	ee10 3a10 	vmov	r3, s0
 8006bc0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006bc4:	0dca      	lsrs	r2, r1, #23
 8006bc6:	3a7f      	subs	r2, #127	; 0x7f
 8006bc8:	2a16      	cmp	r2, #22
 8006bca:	dc2a      	bgt.n	8006c22 <floorf+0x66>
 8006bcc:	2a00      	cmp	r2, #0
 8006bce:	da11      	bge.n	8006bf4 <floorf+0x38>
 8006bd0:	eddf 7a18 	vldr	s15, [pc, #96]	; 8006c34 <floorf+0x78>
 8006bd4:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006bd8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006be0:	dd05      	ble.n	8006bee <floorf+0x32>
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	da23      	bge.n	8006c2e <floorf+0x72>
 8006be6:	4a14      	ldr	r2, [pc, #80]	; (8006c38 <floorf+0x7c>)
 8006be8:	2900      	cmp	r1, #0
 8006bea:	bf18      	it	ne
 8006bec:	4613      	movne	r3, r2
 8006bee:	ee00 3a10 	vmov	s0, r3
 8006bf2:	4770      	bx	lr
 8006bf4:	4911      	ldr	r1, [pc, #68]	; (8006c3c <floorf+0x80>)
 8006bf6:	4111      	asrs	r1, r2
 8006bf8:	420b      	tst	r3, r1
 8006bfa:	d0fa      	beq.n	8006bf2 <floorf+0x36>
 8006bfc:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8006c34 <floorf+0x78>
 8006c00:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006c04:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006c08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c0c:	ddef      	ble.n	8006bee <floorf+0x32>
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	bfbe      	ittt	lt
 8006c12:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8006c16:	fa40 f202 	asrlt.w	r2, r0, r2
 8006c1a:	189b      	addlt	r3, r3, r2
 8006c1c:	ea23 0301 	bic.w	r3, r3, r1
 8006c20:	e7e5      	b.n	8006bee <floorf+0x32>
 8006c22:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8006c26:	d3e4      	bcc.n	8006bf2 <floorf+0x36>
 8006c28:	ee30 0a00 	vadd.f32	s0, s0, s0
 8006c2c:	4770      	bx	lr
 8006c2e:	2300      	movs	r3, #0
 8006c30:	e7dd      	b.n	8006bee <floorf+0x32>
 8006c32:	bf00      	nop
 8006c34:	7149f2ca 	.word	0x7149f2ca
 8006c38:	bf800000 	.word	0xbf800000
 8006c3c:	007fffff 	.word	0x007fffff

08006c40 <_init>:
 8006c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c42:	bf00      	nop
 8006c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c46:	bc08      	pop	{r3}
 8006c48:	469e      	mov	lr, r3
 8006c4a:	4770      	bx	lr

08006c4c <_fini>:
 8006c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c4e:	bf00      	nop
 8006c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c52:	bc08      	pop	{r3}
 8006c54:	469e      	mov	lr, r3
 8006c56:	4770      	bx	lr
